<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\nrf52840_qiaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\nrf52840_qiaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Apr 08 14:57:12 2022
<BR><P>
<H3>Maximum Stack Usage =       2128 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
PedometerActivate &rArr; cwm_pedometer &rArr; GetStepCounter &rArr; FindSteps &rArr; cwm_bubbleSort
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">NMI_Handler</a><BR>
 <LI><a href="#[13]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">HardFault_Handler</a><BR>
 <LI><a href="#[14]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
 <LI><a href="#[17]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">SVC_Handler</a><BR>
 <LI><a href="#[18]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">DebugMon_Handler</a><BR>
 <LI><a href="#[19]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">PendSV_Handler</a><BR>
 <LI><a href="#[1a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">SysTick_Handler</a><BR>
 <LI><a href="#[2a]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[2f9]">__embedded_string</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f9]">__embedded_string</a><BR>
 <LI><a href="#[181]">clst_get_leng</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[181]">clst_get_leng</a><BR>
 <LI><a href="#[2f8]">__embedded_string</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f8]">__embedded_string</a><BR>
 <LI><a href="#[440]">hwsensorListAdd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[440]">hwsensorListAdd</a><BR>
 <LI><a href="#[442]">hwsensorListLength</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[442]">hwsensorListLength</a><BR>
 <LI><a href="#[367]">nrf_log_frontend_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[368]">nrf_log_frontend_std_0</a><BR>
 <LI><a href="#[3ab]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ab]">buffer_add</a><BR>
 <LI><a href="#[24b]">cwm_quick_sort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24b]">cwm_quick_sort</a><BR>
 <LI><a href="#[1be]">_embedded_string</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1be]">_embedded_string</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c5]">AbsoluteStaticPower</a> from proj_algo.o(i.AbsoluteStaticPower) referenced from proj_algo.o(.constdata)
 <LI><a href="#[133]">ActivateBiking</a> from cwm_biking_interface.o(i.ActivateBiking) referenced from cwm_biking_interface.o(.constdata)
 <LI><a href="#[13e]">ActivityAlertActivate</a> from cwm_activity_alert_interface.o(i.ActivityAlertActivate) referenced from cwm_activity_alert_interface.o(.constdata)
 <LI><a href="#[139]">ActivityAlertCreateObject</a> from cwm_activity_alert_interface.o(i.ActivityAlertCreateObject) referenced from cwm_activity_alert_interface.o(.constdata)
 <LI><a href="#[13d]">ActivityAlertGetConfig</a> from cwm_activity_alert_interface.o(i.ActivityAlertGetConfig) referenced from cwm_activity_alert_interface.o(.constdata)
 <LI><a href="#[138]">ActivityAlertGetMemSize</a> from cwm_activity_alert_interface.o(i.ActivityAlertGetMemSize) referenced from cwm_activity_alert_interface.o(.constdata)
 <LI><a href="#[13c]">ActivityAlertSetConfig</a> from cwm_activity_alert_interface.o(i.ActivityAlertSetConfig) referenced from cwm_activity_alert_interface.o(.constdata)
 <LI><a href="#[c2]">ActivityOutputPower</a> from proj_algo.o(i.ActivityOutputPower) referenced from proj_algo.o(.constdata)
 <LI><a href="#[69]">AlgoAmhListen</a> from algo_amh.o(.cwm_sec.common_aml.p0) referenced from algo_amh.o(i.algo_amh)
 <LI><a href="#[4d]">AmhListen</a> from proj_algo.o(.cwm_sec.common_aml.p0) referenced from proj_algo.o(i.AMH_Custom)
 <LI><a href="#[12c]">BikingCreateObject</a> from cwm_biking_interface.o(i.BikingCreateObject) referenced from cwm_biking_interface.o(.constdata)
 <LI><a href="#[131]">BikingExit</a> from cwm_biking_interface.o(i.BikingExit) referenced from cwm_biking_interface.o(.constdata)
 <LI><a href="#[12b]">BikingGetMemSize</a> from cwm_biking_interface.o(i.BikingGetMemSize) referenced from cwm_biking_interface.o(.constdata)
 <LI><a href="#[12f]">BikingPause</a> from cwm_biking_interface.o(i.BikingPause) referenced from cwm_biking_interface.o(.constdata)
 <LI><a href="#[130]">BikingResume</a> from cwm_biking_interface.o(i.BikingResume) referenced from cwm_biking_interface.o(.constdata)
 <LI><a href="#[132]">BikingSetConfig</a> from cwm_biking_interface.o(i.BikingSetConfig) referenced from cwm_biking_interface.o(.constdata)
 <LI><a href="#[f3]">BreachCheckSteps</a> from cwm_ar_utility_interface.o(i.BreachCheckSteps) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[f2]">BreachReportEvent</a> from cwm_ar_utility_interface.o(i.BreachReportEvent) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[f1]">BreachResetVariables</a> from cwm_ar_utility_interface.o(i.BreachResetVariables) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[15]">BusFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2a]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2e]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[43]">CRYPTOCELL_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[76]">CUSTOM_CMD</a> from drv_custom.o(i.CUSTOM_CMD) referenced from drv_custom.o(i.drv_custom)
 <LI><a href="#[7f]">CWM_AP_SensorListen</a> from main.o(i.CWM_AP_SensorListen) referenced from main.o(i.main)
 <LI><a href="#[99]">CWM_OS_GetTimeNs</a> from board_nordic.o(i.CWM_OS_GetTimeNs) referenced from main.o(.constdata)
 <LI><a href="#[9a]">CWM_OS_dbgOutput</a> from board_nordic.o(i.CWM_OS_dbgOutput) referenced from main.o(.constdata)
 <LI><a href="#[98]">CWM_OS_free</a> from board_nordic.o(i.CWM_OS_free) referenced from main.o(.constdata)
 <LI><a href="#[97]">CWM_OS_malloc</a> from board_nordic.o(i.CWM_OS_malloc) referenced from main.o(.constdata)
 <LI><a href="#[119]">CalculateActivityScores</a> from cwm_seden_activity_interface.o(i.CalculateActivityScores) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[56]">CompareFloat</a> from cwm_algorithm_interface.o(i.CompareFloat) referenced from cwm_activity_recognition.o(i.CollectData)
 <LI><a href="#[56]">CompareFloat</a> from cwm_algorithm_interface.o(i.CompareFloat) referenced from cwm_activity_recognition.o(i.RealTimeFilter)
 <LI><a href="#[58]">CompareUint8</a> from cwm_algorithm_interface.o(i.CompareUint8) referenced from cwm_activity_recognition.o(i.DetermineAverageActivity)
 <LI><a href="#[18]">DebugMon_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[ea]">DoNothing</a> from cwm_algorithm_interface.o(i.DoNothing) referenced 23 times from cwm_algorithm_interface.o(.constdata)
 <LI><a href="#[29]">ECB_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[106]">ElevationActivate</a> from cwm_ar_utility_interface.o(i.ElevationActivate) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[105]">ElevationSetConfig</a> from cwm_ar_utility_interface.o(i.ElevationSetConfig) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[3f]">FPU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c4]">FallingPower</a> from proj_algo.o(i.FallingPower) referenced from proj_algo.o(.constdata)
 <LI><a href="#[137]">FitnessCreateObject</a> from cwm_fitness_interface.o(i.FitnessCreateObject) referenced from cwm_fitness_interface.o(.constdata)
 <LI><a href="#[136]">FitnessGetMemSize</a> from cwm_fitness_interface.o(i.FitnessGetMemSize) referenced from cwm_fitness_interface.o(.constdata)
 <LI><a href="#[109]">GNSSFilterActivate</a> from cwm_ar_utility_interface.o(i.GNSSFilterActivate) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[108]">GNSSFilterSetConfig</a> from cwm_ar_utility_interface.o(i.GNSSFilterSetConfig) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[21]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[134]">GetOpdrPackageMemSize</a> from cwm_PDR_interface.o(i.GetOpdrPackageMemSize) referenced from cwm_PDR_interface.o(.constdata)
 <LI><a href="#[117]">GetSedenActMemSize</a> from cwm_seden_activity_interface.o(i.GetSedenActMemSize) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[f4]">HandWashReport</a> from cwm_ar_utility_interface.o(i.HandWashReport) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[c1]">HandupdownPower</a> from proj_algo.o(i.HandupdownPower) referenced from proj_algo.o(.constdata)
 <LI><a href="#[13]">HardFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3e]">I2S_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c6]">InactivityOutputPower</a> from proj_algo.o(i.InactivityOutputPower) referenced from proj_algo.o(.constdata)
 <LI><a href="#[bb]">Ioctl</a> from algo_amh.o(i.Ioctl) referenced from algo_amh.o(.constdata)
 <LI><a href="#[39]">MWU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[14]">MemoryManagement_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[103]">MetabolismActivate</a> from cwm_ar_utility_interface.o(i.MetabolismActivate) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[102]">MetabolismGetConfig</a> from cwm_ar_utility_interface.o(i.MetabolismGetConfig) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[ee]">MetabolismOperation</a> from cwm_ar_utility_interface.o(i.MetabolismOperation) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[101]">MetabolismSetConfig</a> from cwm_ar_utility_interface.o(i.MetabolismSetConfig) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[f0]">MetabolsimAnaerobicTask</a> from cwm_ar_utility_interface.o(i.MetabolsimAnaerobicTask) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[ef]">MetabolsimUpdateMetrics</a> from cwm_ar_utility_interface.o(i.MetabolsimUpdateMetrics) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[1]">MgrUpdate_Acc</a> from input_sensor_manager.o(.cwm_sec.common_aml.p0) referenced 2 times from input_sensor_manager.o(.data)
 <LI><a href="#[8]">MgrUpdate_AnyMotion</a> from input_sensor_manager.o(i.MgrUpdate_AnyMotion) referenced 2 times from input_sensor_manager.o(.data)
 <LI><a href="#[4]">MgrUpdate_Baro</a> from input_sensor_manager.o(i.MgrUpdate_Baro) referenced 2 times from input_sensor_manager.o(.data)
 <LI><a href="#[7]">MgrUpdate_Gnss</a> from input_sensor_manager.o(i.MgrUpdate_Gnss) referenced 2 times from input_sensor_manager.o(.data)
 <LI><a href="#[2]">MgrUpdate_Gyro</a> from input_sensor_manager.o(i.MgrUpdate_Gyro) referenced 2 times from input_sensor_manager.o(.data)
 <LI><a href="#[6]">MgrUpdate_Hr</a> from input_sensor_manager.o(i.MgrUpdate_Hr) referenced 2 times from input_sensor_manager.o(.data)
 <LI><a href="#[3]">MgrUpdate_Mag</a> from input_sensor_manager.o(i.MgrUpdate_Mag) referenced 2 times from input_sensor_manager.o(.data)
 <LI><a href="#[9]">MgrUpdate_OffBody</a> from input_sensor_manager.o(i.MgrUpdate_OffBody) referenced 2 times from input_sensor_manager.o(.data)
 <LI><a href="#[a]">MgrUpdate_OnCharging</a> from input_sensor_manager.o(i.MgrUpdate_OnCharging) referenced 2 times from input_sensor_manager.o(.data)
 <LI><a href="#[5]">MgrUpdate_Temp</a> from input_sensor_manager.o(i.MgrUpdate_Temp) referenced 2 times from input_sensor_manager.o(.data)
 <LI><a href="#[20]">NFCT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c3]">NoMotionPower</a> from proj_algo.o(i.NoMotionPower) referenced from proj_algo.o(.constdata)
 <LI><a href="#[135]">OPDRCreateObject</a> from cwm_PDR_interface.o(i.OPDRCreateObject) referenced from cwm_PDR_interface.o(.constdata)
 <LI><a href="#[38]">PDM_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1b]">POWER_CLOCK_IRQHandler</a> from nrfx_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[37]">PWM0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3a]">PWM1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3b]">PWM2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[44]">PWM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[140]">PauseResumeCreateObject</a> from cwm_pause_resume_interface.o(i.PauseResumeCreateObject) referenced from cwm_pause_resume_interface.o(.constdata)
 <LI><a href="#[13f]">PauseResumeGetMemSize</a> from cwm_pause_resume_interface.o(i.PauseResumeGetMemSize) referenced from cwm_pause_resume_interface.o(.constdata)
 <LI><a href="#[110]">PedometerAccumulateMAI</a> from cwm_pedometer_interface.o(i.PedometerAccumulateMAI) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[116]">PedometerActivate</a> from cwm_pedometer_interface.o(i.PedometerActivate) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[10b]">PedometerCreateObject</a> from cwm_pedometer_interface.o(i.PedometerCreateObject) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[113]">PedometerExit</a> from cwm_pedometer_interface.o(i.PedometerExit) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[115]">PedometerGetConfig</a> from cwm_pedometer_interface.o(i.PedometerGetConfig) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[10a]">PedometerGetMemSize</a> from cwm_pedometer_interface.o(i.PedometerGetMemSize) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[10f]">PedometerReportSteps</a> from cwm_pedometer_interface.o(i.PedometerReportSteps) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[10d]">PedometerSetCaloriesInfo</a> from cwm_pedometer_interface.o(i.PedometerSetCaloriesInfo) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[114]">PedometerSetConfig</a> from cwm_pedometer_interface.o(i.PedometerSetConfig) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[10c]">PedometerSetGNSSInfo</a> from cwm_pedometer_interface.o(i.PedometerSetGNSSInfo) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[5a]">PedometerSetTmConfig</a> from cwm_pedometer_interface.o(i.PedometerSetTmConfig) referenced from cwm_pedometer_interface.o(i.PedometerCreateObject)
 <LI><a href="#[10e]">PedometerUpdateInfo</a> from cwm_pedometer_interface.o(i.PedometerUpdateInfo) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[19]">PendSV_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2d]">QDEC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[42]">QSPI_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1c]">RADIO_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[28]">RNG_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[26]">RTC0_IRQHandler</a> from nrfx_rtc.o(i.RTC0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2c]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3d]">RTC2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[eb]">ReturnNothing</a> from cwm_algorithm_interface.o(i.ReturnNothing) referenced 6 times from cwm_algorithm_interface.o(.constdata)
 <LI><a href="#[22]">SAADC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1e]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1f]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrfx_twim.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from nrfx_twim.o(.constdata)
 <LI><a href="#[1f]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrfx_twim.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3c]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[45]">SPIM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2f]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[30]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[31]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[32]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[33]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[34]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[128]">SedenActActivate</a> from cwm_seden_activity_interface.o(i.SedenActActivate) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[118]">SedenActCreateObject</a> from cwm_seden_activity_interface.o(i.SedenActCreateObject) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[127]">SedenActGetConfig</a> from cwm_seden_activity_interface.o(i.SedenActGetConfig) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[11a]">SedenActOperation</a> from cwm_seden_activity_interface.o(i.SedenActOperation) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[126]">SedenActSetConfig</a> from cwm_seden_activity_interface.o(i.SedenActSetConfig) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[c0]">SedentaryPower</a> from proj_algo.o(i.SedentaryPower) referenced from proj_algo.o(.constdata)
 <LI><a href="#[bc]">ShakePower</a> from proj_algo.o(i.ShakePower) referenced from proj_algo.o(.constdata)
 <LI><a href="#[bf]">SleepPower</a> from proj_algo.o(i.SleepPower) referenced from proj_algo.o(.constdata)
 <LI><a href="#[142]">SportsSwingCreate</a> from cwm_sports_swing_interface.o(i.SportsSwingCreate) referenced from cwm_sports_swing_interface.o(.constdata)
 <LI><a href="#[141]">SportsSwingGetMemSize</a> from cwm_sports_swing_interface.o(i.SportsSwingGetMemSize) referenced from cwm_sports_swing_interface.o(.constdata)
 <LI><a href="#[c7]">StandPower</a> from proj_algo.o(i.StandPower) referenced from proj_algo.o(.constdata)
 <LI><a href="#[12a]">SwimCreateObject</a> from cwm_swim_interface.o(i.SwimCreateObject) referenced from cwm_swim_interface.o(.constdata)
 <LI><a href="#[129]">SwimGetMemSize</a> from cwm_swim_interface.o(i.SwimGetMemSize) referenced from cwm_swim_interface.o(.constdata)
 <LI><a href="#[1a]">SysTick_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[4c]">SystemEVT</a> from proj_algo.o(i.SystemEVT) referenced from proj_algo.o(i.AMH_Custom)
 <LI><a href="#[5f]">SystemEVT</a> from algo_amh.o(i.SystemEVT) referenced from algo_amh.o(i.algo_amh)
 <LI><a href="#[4a]">SystemInit</a> from system_nrf52840.o(i.SystemInit) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[27]">TEMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[23]">TIMER0_IRQHandler</a> from nrfx_timer.o(i.TIMER0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[24]">TIMER1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[25]">TIMER2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[35]">TIMER3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[36]">TIMER4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1d]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[41]">UARTE1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[40]">USBD_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[f]">UnknownEvent</a> from cwm_activity_recognition.o(i.UnknownEvent) referenced 2 times from cwm_activity_recognition.o(.data)
 <LI><a href="#[16]">UsageFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[ed]">UtilityCreateObject</a> from cwm_ar_utility_interface.o(i.UtilityCreateObject) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[ec]">UtilityGetMemSize</a> from cwm_ar_utility_interface.o(i.UtilityGetMemSize) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[d]">VehicleEvent</a> from cwm_activity_recognition.o(i.VehicleEvent) referenced 2 times from cwm_activity_recognition.o(.data)
 <LI><a href="#[2b]">WDT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c]">WalkRunEvent</a> from cwm_activity_recognition.o(i.WalkRunEvent) referenced 2 times from cwm_activity_recognition.o(.data)
 <LI><a href="#[e]">WorkoutEvent</a> from cwm_activity_recognition.o(i.WorkoutEvent) referenced 2 times from cwm_activity_recognition.o(.data)
 <LI><a href="#[4b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[78]">_hw_client_search_list</a> from hw_components.o(i._hw_client_search_list) referenced from hw_components.o(i.hw_client_components_active)
 <LI><a href="#[78]">_hw_client_search_list</a> from hw_components.o(i._hw_client_search_list) referenced from hw_components.o(i.hw_client_components_hwApi)
 <LI><a href="#[78]">_hw_client_search_list</a> from hw_components.o(i._hw_client_search_list) referenced from hw_components.o(i.hw_client_components_request)
 <LI><a href="#[79]">_hw_clients_components_resume</a> from hw_components.o(i._hw_clients_components_resume) referenced from hw_components.o(i.hw_clients_components_resume)
 <LI><a href="#[7a]">_hw_clients_components_suspended</a> from hw_components.o(i._hw_clients_components_suspended) referenced from hw_components.o(i.hw_clients_components_suspended)
 <LI><a href="#[5d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[5d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[5e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[ca]">accIoctl</a> from drv_custom.o(i.accIoctl) referenced from drv_custom.o(.constdata)
 <LI><a href="#[c9]">accSetRate</a> from drv_custom.o(i.accSetRate) referenced from drv_custom.o(.constdata)
 <LI><a href="#[c8]">accStepPower</a> from drv_custom.o(i.accStepPower) referenced from drv_custom.o(.constdata)
 <LI><a href="#[60]">acc_sensor_config</a> from algo_amh.o(i.acc_sensor_config) referenced from algo_amh.o(i.algo_amh)
 <LI><a href="#[70]">agLogout</a> from amh_main.o(i.agLogout) referenced from amh_main.o(i.amh_main_set_cfg_directly)
 <LI><a href="#[e9]">algo_amh</a> from algo_amh.o(i.algo_amh) referenced from config_algo.o(.constdata)
 <LI><a href="#[6b]">algo_process_setoperated</a> from amh_main.o(i.algo_process_setoperated) referenced from amh_main.o(i.amh_main_new)
 <LI><a href="#[6c]">alog_process_getoperated</a> from amh_main.o(i.alog_process_getoperated) referenced from amh_main.o(i.amh_main_new)
 <LI><a href="#[6f]">amh_algo_init_cbk</a> from amh_main.o(i.amh_algo_init_cbk) referenced from amh_main.o(i.amh_main_new)
 <LI><a href="#[6d]">amh_main_proc</a> from amh_main.o(.cwm_sec.common_aml.p0) referenced from amh_main.o(i.amh_main_new)
 <LI><a href="#[49]">amhapp_OutputCallback</a> from proj_algo.o(i.amhapp_OutputCallback) referenced from proj_algo.o(.cwm_sec.common_aml.p0)
 <LI><a href="#[e8]">anyMotionIoctl</a> from drv_custom.o(i.anyMotionIoctl) referenced from drv_custom.o(.constdata)
 <LI><a href="#[e6]">anyMotionPower</a> from drv_custom.o(i.anyMotionPower) referenced from drv_custom.o(.constdata)
 <LI><a href="#[e7]">anyMotionSetRate</a> from drv_custom.o(i.anyMotionSetRate) referenced from drv_custom.o(.constdata)
 <LI><a href="#[a2]">ap3__check_mcu</a> from chip_manager.o(i.ap3__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[b6]">ap3__deinit_info0</a> from chip_manager.o(i.ap3__deinit_info0) referenced 2 times from chip_manager.o(.constdata)
 <LI><a href="#[a3]">ap3__get_uid</a> from chip_manager.o(i.ap3__get_uid) referenced 3 times from chip_manager.o(.constdata)
 <LI><a href="#[b5]">ap3__init_info0</a> from chip_manager.o(i.ap3__init_info0) referenced 2 times from chip_manager.o(.constdata)
 <LI><a href="#[b0]">ap4__check_mcu</a> from chip_manager.o(i.ap4__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[b8]">ap4__deinit_info0</a> from chip_manager.o(i.ap4__deinit_info0) referenced from chip_manager.o(.constdata)
 <LI><a href="#[b7]">ap4__init_info0</a> from chip_manager.o(i.ap4__init_info0) referenced from chip_manager.o(.constdata)
 <LI><a href="#[a4]">apa__check_mcu</a> from chip_manager.o(i.apa__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[b3]">as1__check_mcu</a> from chip_manager.o(i.as1__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[b4]">as1__get_uid</a> from chip_manager.o(i.as1__get_uid) referenced from chip_manager.o(.constdata)
 <LI><a href="#[d3]">baroIoctl</a> from drv_custom.o(i.baroIoctl) referenced from drv_custom.o(.constdata)
 <LI><a href="#[d2]">baroSetRate</a> from drv_custom.o(i.baroSetRate) referenced from drv_custom.o(.constdata)
 <LI><a href="#[d1]">baroStepPower</a> from drv_custom.o(i.baroStepPower) referenced from drv_custom.o(.constdata)
 <LI><a href="#[65]">baro_sensor_config</a> from algo_amh.o(i.baro_sensor_config) referenced from algo_amh.o(i.algo_amh)
 <LI><a href="#[47]">callBack</a> from scheduler.o(i.callBack) referenced from scheduler.o(.cwm_sec.common_aml.p0)
 <LI><a href="#[80]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[94]">compare_evtmgr_item</a> from scheduler.o(i.compare_evtmgr_item) referenced from scheduler.o(i.subscribeEvent)
 <LI><a href="#[57]">customSensorListen</a> from proj_sensor.o(.cwm_sec.common_aml.p0) referenced from proj_sensor.o(i.Custom_MGR_Init)
 <LI><a href="#[13b]">cwm_activity_alert_enable</a> from cwm_activity_alert.o(i.cwm_activity_alert_enable) referenced from cwm_activity_alert_interface.o(.constdata)
 <LI><a href="#[13a]">cwm_activity_alert_init</a> from cwm_activity_alert.o(i.cwm_activity_alert_init) referenced from cwm_activity_alert_interface.o(.constdata)
 <LI><a href="#[12d]">cwm_biking_init</a> from cwm_biking.o(i.cwm_biking_init) referenced from cwm_biking_interface.o(.constdata)
 <LI><a href="#[104]">cwm_elevation_estimation_init</a> from cwm_elevation_estimation.o(i.cwm_elevation_estimation_init) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[107]">cwm_gps_filter_init</a> from cwm_gps_filter.o(i.cwm_gps_filter_init) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[100]">cwm_metabolism_enable</a> from cwm_metabolism.o(i.cwm_metabolism_enable) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[f9]">cwm_metabolism_get_daily_data</a> from cwm_metabolism.o(i.cwm_metabolism_get_daily_data) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[fc]">cwm_metabolism_get_saved_metrics_info</a> from cwm_metabolism.o(i.cwm_metabolism_get_saved_metrics_info) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[ff]">cwm_metabolism_init</a> from cwm_metabolism.o(i.cwm_metabolism_init) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[fa]">cwm_metabolism_reset_metrics</a> from cwm_metabolism.o(i.cwm_metabolism_reset_metrics) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[fd]">cwm_metabolism_rolling_weekly_data</a> from cwm_metabolism.o(i.cwm_metabolism_rolling_weekly_data) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[fe]">cwm_metabolism_set_activity_class</a> from cwm_metabolism.o(i.cwm_metabolism_set_activity_class) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[5b]">cwm_metabolism_set_activity_counts</a> from cwm_metabolism.o(i.cwm_metabolism_set_activity_counts) referenced from cwm_ar_utility_interface.o(i.UtilityCreateObject)
 <LI><a href="#[f5]">cwm_metabolism_set_max_hr</a> from cwm_metabolism.o(i.cwm_metabolism_set_max_hr) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[f6]">cwm_metabolism_set_min_hr</a> from cwm_metabolism.o(i.cwm_metabolism_set_min_hr) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[f7]">cwm_metabolism_set_resting_hr</a> from cwm_metabolism.o(i.cwm_metabolism_set_resting_hr) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[fb]">cwm_metabolism_set_saved_metrics_info</a> from cwm_metabolism.o(i.cwm_metabolism_set_saved_metrics_info) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[f8]">cwm_metabolism_set_touch</a> from cwm_metabolism.o(i.cwm_metabolism_set_touch) referenced from cwm_ar_utility_interface.o(.constdata)
 <LI><a href="#[75]">cwm_resample_EMA_get</a> from cwm_resample.o(i.cwm_resample_EMA_get) referenced from cwm_resample.o(i.config_cwm_resample)
 <LI><a href="#[74]">cwm_resample_EMA_update</a> from cwm_resample.o(i.cwm_resample_EMA_update) referenced from cwm_resample.o(i.config_cwm_resample)
 <LI><a href="#[73]">cwm_resample_SMA_get</a> from cwm_resample.o(i.cwm_resample_SMA_get) referenced from cwm_resample.o(i.config_cwm_resample)
 <LI><a href="#[72]">cwm_resample_SMA_update</a> from cwm_resample.o(i.cwm_resample_SMA_update) referenced from cwm_resample.o(i.config_cwm_resample)
 <LI><a href="#[11d]">cwm_sedentary_activity_get_sleep_accumulated_time</a> from cwm_sedentary_activity.o(i.cwm_sedentary_activity_get_sleep_accumulated_time) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[120]">cwm_sedentary_activity_get_sleep_quality</a> from cwm_sedentary_activity.o(i.cwm_sedentary_activity_get_sleep_quality) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[11c]">cwm_sedentary_activity_get_sleep_report_data</a> from cwm_sedentary_activity.o(i.cwm_sedentary_activity_get_sleep_report_data) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[11b]">cwm_sedentary_activity_release_reminder</a> from cwm_sedentary_activity.o(i.cwm_sedentary_activity_release_reminder) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[122]">cwm_sedentary_activity_reset_nap</a> from cwm_sedentary_activity.o(i.cwm_sedentary_activity_reset_nap) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[121]">cwm_sedentary_activity_reset_sedentary</a> from cwm_sedentary_activity.o(i.cwm_sedentary_activity_reset_sedentary) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[123]">cwm_sedentary_activity_reset_sleep</a> from cwm_sedentary_activity.o(i.cwm_sedentary_activity_reset_sleep) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[11f]">cwm_sedentary_activity_reset_stand</a> from cwm_sedentary_activity.o(i.cwm_sedentary_activity_reset_stand) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[11e]">cwm_sedentary_activity_set_ap_status</a> from cwm_sedentary_activity.o(i.cwm_sedentary_activity_set_ap_status) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[b1]">da2__check_mcu</a> from chip_manager.o(i.da2__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[b2]">da2__get_uid</a> from chip_manager.o(i.da2__get_uid) referenced from chip_manager.o(.constdata)
 <LI><a href="#[10]">donothing</a> from algoattribute_emptyobj.o(i.donothing) referenced 6 times from algoattribute_emptyobj.o(.data)
 <LI><a href="#[a1]">drv_custom</a> from drv_custom.o(i.drv_custom) referenced from config_drv.o(.constdata)
 <LI><a href="#[12e]">enable_cwm_biking</a> from cwm_biking.o(i.enable_cwm_biking) referenced from cwm_biking_interface.o(.constdata)
 <LI><a href="#[112]">enable_cwm_pedometer</a> from cwm_pedometer_watch_activity.o(i.enable_cwm_pedometer) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[125]">enable_cwm_sedentary_activity</a> from cwm_sedentary_activity.o(i.enable_cwm_sedentary_activity) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[55]">evtCallback</a> from proj_prepare.o(i.evtCallback) referenced from proj_prepare.o(i.CWM_LibPostInit)
 <LI><a href="#[5c]">fputc</a> from retarget.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[ae]">g5a__check_mcu</a> from chip_manager.o(i.g5a__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[af]">g5a__get_uid</a> from chip_manager.o(i.g5a__get_uid) referenced from chip_manager.o(.constdata)
 <LI><a href="#[b]">getChipManager2</a> from chip_manager.o(i.getChipManager2) referenced 2 times from chip_manager.o(.data)
 <LI><a href="#[93]">get_evtmgr_item</a> from scheduler.o(i.get_evtmgr_item) referenced from scheduler.o(i.subscribeEvent)
 <LI><a href="#[93]">get_evtmgr_item</a> from scheduler.o(i.get_evtmgr_item) referenced from scheduler.o(i.unSubscribeEvent)
 <LI><a href="#[48]">get_evtmgr_item_type_only</a> from scheduler.o(i.get_evtmgr_item_type_only) referenced from scheduler.o(.cwm_sec.common_aml.p0)
 <LI><a href="#[48]">get_evtmgr_item_type_only</a> from scheduler.o(i.get_evtmgr_item_type_only) referenced from scheduler.o(i.subscribeEvent)
 <LI><a href="#[59]">get_msg_item</a> from sensor_manager.o(i.get_msg_item) referenced from sensor_manager.o(i.MGR_Disable)
 <LI><a href="#[59]">get_msg_item</a> from sensor_manager.o(i.get_msg_item) referenced from sensor_manager.o(i.MGR_Enable)
 <LI><a href="#[92]">get_sensor</a> from hal_sensor.o(i.get_sensor) referenced from hal_sensor.o(i.sensorDisable)
 <LI><a href="#[92]">get_sensor</a> from hal_sensor.o(i.get_sensor) referenced from hal_sensor.o(i.sensorEnable)
 <LI><a href="#[92]">get_sensor</a> from hal_sensor.o(i.get_sensor) referenced from hal_sensor.o(i.sensorIoCtl)
 <LI><a href="#[92]">get_sensor</a> from hal_sensor.o(i.get_sensor) referenced from hal_sensor.o(i.sensorSetRate)
 <LI><a href="#[86]">getoperated</a> from algo_proc_absolute_static.o(i.getoperated) referenced from algo_proc_absolute_static.o(i.obj_absolute_static_new)
 <LI><a href="#[89]">getoperated</a> from algo_proc_activity_recognition.o(i.getoperated) referenced from algo_proc_activity_recognition.o(i.obj_ar_new)
 <LI><a href="#[8c]">getoperated</a> from algo_proc_watch_hand_up_down.o(i.getoperated) referenced from algo_proc_watch_hand_up_down.o(i.obj_handupdownwatch_new)
 <LI><a href="#[8f]">getoperated</a> from algo_proc_rocking_detection.o(i.getoperated) referenced from algo_proc_rocking_detection.o(i.obj_rockingdetection_new)
 <LI><a href="#[dc]">gnssIoctl</a> from drv_custom.o(i.gnssIoctl) referenced from drv_custom.o(.constdata)
 <LI><a href="#[db]">gnssSetRate</a> from drv_custom.o(i.gnssSetRate) referenced from drv_custom.o(.constdata)
 <LI><a href="#[da]">gnssStepPower</a> from drv_custom.o(i.gnssStepPower) referenced from drv_custom.o(.constdata)
 <LI><a href="#[66]">gnss_sensor_config</a> from algo_amh.o(i.gnss_sensor_config) referenced from algo_amh.o(i.algo_amh)
 <LI><a href="#[cd]">gyroIoctl</a> from drv_custom.o(i.gyroIoctl) referenced from drv_custom.o(.constdata)
 <LI><a href="#[cc]">gyroSetRate</a> from drv_custom.o(i.gyroSetRate) referenced from drv_custom.o(.constdata)
 <LI><a href="#[cb]">gyroStepPower</a> from drv_custom.o(i.gyroStepPower) referenced from drv_custom.o(.constdata)
 <LI><a href="#[61]">gyro_sensor_config</a> from algo_amh.o(i.gyro_sensor_config) referenced from algo_amh.o(i.algo_amh)
 <LI><a href="#[d9]">hrIoctl</a> from drv_custom.o(i.hrIoctl) referenced from drv_custom.o(.constdata)
 <LI><a href="#[d8]">hrSetRate</a> from drv_custom.o(i.hrSetRate) referenced from drv_custom.o(.constdata)
 <LI><a href="#[d7]">hrStepPower</a> from drv_custom.o(i.hrStepPower) referenced from drv_custom.o(.constdata)
 <LI><a href="#[64]">hr_sensor_config</a> from algo_amh.o(i.hr_sensor_config) referenced from algo_amh.o(i.algo_amh)
 <LI><a href="#[77]">in_pin_handler</a> from board_nordic.o(i.in_pin_handler) referenced from board_nordic.o(i.gpio_init)
 <LI><a href="#[111]">init_cwm_pedometer</a> from cwm_pedometer_watch_activity.o(i.init_cwm_pedometer) referenced from cwm_pedometer_interface.o(.constdata)
 <LI><a href="#[124]">init_cwm_sedentary_activity</a> from cwm_sedentary_activity.o(i.init_cwm_sedentary_activity) referenced from cwm_seden_activity_interface.o(.constdata)
 <LI><a href="#[a0]">input_sensor_manager</a> from input_sensor_manager.o(i.input_sensor_manager) referenced from config_drv.o(.constdata)
 <LI><a href="#[7c]">input_sensor_manager_handleEvent</a> from input_sensor_manager.o(.cwm_sec.common_aml.p0) referenced from input_sensor_manager.o(i.input_sensor_manager)
 <LI><a href="#[6e]">log_mask</a> from amh_main.o(i.log_mask) referenced from amh_main.o(i.amh_main_new)
 <LI><a href="#[d0]">magIoctl</a> from drv_custom.o(i.magIoctl) referenced from drv_custom.o(.constdata)
 <LI><a href="#[cf]">magSetRate</a> from drv_custom.o(i.magSetRate) referenced from drv_custom.o(.constdata)
 <LI><a href="#[ce]">magStepPower</a> from drv_custom.o(i.magStepPower) referenced from drv_custom.o(.constdata)
 <LI><a href="#[62]">mag_sensor_config</a> from algo_amh.o(i.mag_sensor_config) referenced from algo_amh.o(i.algo_amh)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a7]">n32__check_mcu</a> from chip_manager.o(i.n32__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[a5]">n40__check_mcu</a> from chip_manager.o(i.n40__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[a6]">n40__get_uid</a> from chip_manager.o(i.n40__get_uid) referenced 2 times from chip_manager.o(.constdata)
 <LI><a href="#[ac]">n5a__check_mcu</a> from chip_manager.o(i.n5a__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[ad]">n5a__get_uid</a> from chip_manager.o(i.n5a__get_uid) referenced from chip_manager.o(.constdata)
 <LI><a href="#[9f]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[9e]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[9d]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[9b]">nrfx_uart_0_irq_handler</a> from nrfx_uart.o(i.nrfx_uart_0_irq_handler) referenced from nrfx_uart.o(.constdata)
 <LI><a href="#[9c]">nrfx_uarte_0_irq_handler</a> from nrfx_uarte.o(i.nrfx_uarte_0_irq_handler) referenced from nrfx_uarte.o(.constdata)
 <LI><a href="#[df]">offBodyIoctl</a> from drv_custom.o(i.offBodyIoctl) referenced from drv_custom.o(.constdata)
 <LI><a href="#[de]">offBodySetRate</a> from drv_custom.o(i.offBodySetRate) referenced from drv_custom.o(.constdata)
 <LI><a href="#[dd]">offBodyStepPower</a> from drv_custom.o(i.offBodyStepPower) referenced from drv_custom.o(.constdata)
 <LI><a href="#[63]">offbody_sensor_config</a> from algo_amh.o(i.offbody_sensor_config) referenced from algo_amh.o(i.algo_amh)
 <LI><a href="#[e2]">onChargingIoctl</a> from drv_custom.o(i.onChargingIoctl) referenced from drv_custom.o(.constdata)
 <LI><a href="#[e1]">onChargingSetRate</a> from drv_custom.o(i.onChargingSetRate) referenced from drv_custom.o(.constdata)
 <LI><a href="#[e0]">onChargingStepPower</a> from drv_custom.o(i.onChargingStepPower) referenced from drv_custom.o(.constdata)
 <LI><a href="#[67]">oncharging_sensor_config</a> from algo_amh.o(i.oncharging_sensor_config) referenced from algo_amh.o(i.algo_amh)
 <LI><a href="#[95]">one_sec_timer_handle</a> from board_nordic.o(i.one_sec_timer_handle) referenced from board_nordic.o(i.timer_init)
 <LI><a href="#[7e]">platform_read</a> from main.o(i.platform_read) referenced from main.o(i.main)
 <LI><a href="#[7d]">platform_write</a> from main.o(i.platform_write) referenced from main.o(i.main)
 <LI><a href="#[87]">proc_absolute_static</a> from algo_proc_absolute_static.o(.cwm_sec.common_amh_proc.p3) referenced from algo_proc_absolute_static.o(i.obj_absolute_static_new)
 <LI><a href="#[8a]">proc_activity_recognition</a> from algo_proc_activity_recognition.o(.cwm_sec.common_amh_proc.p3) referenced from algo_proc_activity_recognition.o(i.obj_ar_new)
 <LI><a href="#[90]">proc_rocking_detection</a> from algo_proc_rocking_detection.o(.cwm_sec.common_amh_proc.p3) referenced from algo_proc_rocking_detection.o(i.obj_rockingdetection_new)
 <LI><a href="#[8d]">proc_watch_hand_up_down</a> from algo_proc_watch_hand_up_down.o(.cwm_sec.common_amh_proc.p3) referenced from algo_proc_watch_hand_up_down.o(i.obj_handupdownwatch_new)
 <LI><a href="#[a8]">r87__check_mcu</a> from chip_manager.o(i.r87__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[a9]">r87__get_uid</a> from chip_manager.o(i.r87__get_uid) referenced from chip_manager.o(.constdata)
 <LI><a href="#[aa]">r8a__check_mcu</a> from chip_manager.o(i.r8a__check_mcu) referenced from chip_manager.o(.constdata)
 <LI><a href="#[ab]">r8a__get_uid</a> from chip_manager.o(i.r8a__get_uid) referenced from chip_manager.o(.constdata)
 <LI><a href="#[e5]">reqSensorIoctl</a> from drv_custom.o(i.reqSensorIoctl) referenced from drv_custom.o(.constdata)
 <LI><a href="#[e3]">reqSensorPower</a> from drv_custom.o(i.reqSensorPower) referenced from drv_custom.o(.constdata)
 <LI><a href="#[e4]">reqSensorSetRate</a> from drv_custom.o(i.reqSensorSetRate) referenced from drv_custom.o(.constdata)
 <LI><a href="#[91]">rtc_handler</a> from board_nordic.o(i.rtc_handler) referenced from board_nordic.o(i.rtc_config)
 <LI><a href="#[4e]">sensorMotionListener</a> from proj_prepare.o(.cwm_sec.common_aml.p0) referenced from proj_prepare.o(i.CWM_LibPostInit)
 <LI><a href="#[84]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[be]">setIoctl</a> from proj_algo.o(i.setIoctl) referenced 10 times from proj_algo.o(.constdata)
 <LI><a href="#[ba]">setRate</a> from algo_amh.o(i.setRate) referenced 11 times from algo_amh.o(.constdata)
 <LI><a href="#[85]">setoperated</a> from algo_proc_absolute_static.o(i.setoperated) referenced from algo_proc_absolute_static.o(i.obj_absolute_static_new)
 <LI><a href="#[88]">setoperated</a> from algo_proc_activity_recognition.o(i.setoperated) referenced from algo_proc_activity_recognition.o(i.obj_ar_new)
 <LI><a href="#[8b]">setoperated</a> from algo_proc_watch_hand_up_down.o(i.setoperated) referenced from algo_proc_watch_hand_up_down.o(i.obj_handupdownwatch_new)
 <LI><a href="#[8e]">setoperated</a> from algo_proc_rocking_detection.o(i.setoperated) referenced from algo_proc_rocking_detection.o(i.obj_rockingdetection_new)
 <LI><a href="#[b9]">stepPower</a> from algo_amh.o(i.stepPower) referenced from algo_amh.o(.constdata)
 <LI><a href="#[d6]">tempIoctl</a> from drv_custom.o(i.tempIoctl) referenced from drv_custom.o(.constdata)
 <LI><a href="#[d5]">tempSetRate</a> from drv_custom.o(i.tempSetRate) referenced from drv_custom.o(.constdata)
 <LI><a href="#[d4]">tempStepPower</a> from drv_custom.o(i.tempStepPower) referenced from drv_custom.o(.constdata)
 <LI><a href="#[54]">timerCallBack_1000ms</a> from proj_prepare.o(i.timerCallBack_1000ms) referenced from proj_prepare.o(i.CWM_LibPostInit)
 <LI><a href="#[53]">timerCallBack_100ms</a> from proj_prepare.o(i.timerCallBack_100ms) referenced from proj_prepare.o(i.CWM_LibPostInit)
 <LI><a href="#[50]">timerCallBack_10ms</a> from proj_prepare.o(i.timerCallBack_10ms) referenced from proj_prepare.o(i.CWM_LibPostInit)
 <LI><a href="#[51]">timerCallBack_20ms</a> from proj_prepare.o(i.timerCallBack_20ms) referenced from proj_prepare.o(i.CWM_LibPostInit)
 <LI><a href="#[52]">timerCallBack_40ms</a> from proj_prepare.o(i.timerCallBack_40ms) referenced from proj_prepare.o(i.CWM_LibPostInit)
 <LI><a href="#[4f]">timerCallBack_5ms</a> from proj_prepare.o(i.timerCallBack_5ms) referenced from proj_prepare.o(i.CWM_LibPostInit)
 <LI><a href="#[6a]">timerCallBack_LowPower</a> from algo_amh.o(i.timerCallBack_LowPower) referenced from algo_amh.o(i.algo_amh)
 <LI><a href="#[7b]">twi_handler</a> from board_nordic.o(i.twi_handler) referenced from board_nordic.o(i.i2c_init)
 <LI><a href="#[81]">twim_evt_handler</a> from nrf_drv_twi.o(i.twim_evt_handler) referenced from nrf_drv_twi.o(i.nrf_drv_twi_init)
 <LI><a href="#[96]">uart_error_handle</a> from board_nordic.o(i.uart_error_handle) referenced from board_nordic.o(i.uart_init)
 <LI><a href="#[71]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[83]">uart_evt_handler</a> from nrf_drv_uart.o(i.uart_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[82]">uarte_evt_handler</a> from nrf_drv_uart.o(i.uarte_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[68]">virsens_dataadpter</a> from algo_amh.o(i.virsens_dataadpter) referenced from algo_amh.o(i.algo_amh)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[54a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[143]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1aa]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[54c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[54d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[54e]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[54f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[550]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[152]"></a>sec2timedate</STRONG> (Thumb, 354 bytes, Stack size 20 bytes, amh_time.o(.cwm_sec.common_amh_proc.p3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sec2timedate
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timedate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhTime2timedate
</UL>

<P><STRONG><a name="[148]"></a>amhTime2timedate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amh_time.o(.cwm_sec.common_amh_proc.p3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = amhTime2timedate &rArr; sec2timedate
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec2timedate
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_proc_activity_recognition
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutputTime
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateToUnixTime
</UL>

<P><STRONG><a name="[1]"></a>MgrUpdate_Acc</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MgrUpdate_Acc &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_sensor_manager.o(.data)
</UL>
<P><STRONG><a name="[16e]"></a>CWM_CustomSensorInput</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = CWM_CustomSensorInput &rArr; sensorInput &rArr; doubleArrayM2IntString &rArr; doubleM2Int &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCustDrvPollingDataReady
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgrUpdateBySchedule
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorIndexTbl
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>mgr_update_process_all</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCustDrvPollingDataReady
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgr_update_process_si
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process2
</UL>

<P><STRONG><a name="[177]"></a>CWM_process</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, proj_prepare.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CWM_process &rArr; updateTimer &rArr; cwmTimerIRQHandler &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_setLibRunning
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Scheduler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_GetScheduleQueueSize
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTimer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkProtectStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>CWM_process2</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, proj_prepare.o(.cwm_sec.common_aml.p0), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_setLibRunning
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sens_upadte_run_algo
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhProcess_dt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkProtectStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgr_update_process_all
</UL>

<P><STRONG><a name="[180]"></a>queueGetUseSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = queueGetUseSize &rArr; clst_get_leng &rArr;  clst_get_leng (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_leng
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_GetScheduleQueueSize
</UL>

<P><STRONG><a name="[182]"></a>Dequeue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scheduler.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_remove_head
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_add
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osevtQueueDequeue
</UL>

<P><STRONG><a name="[185]"></a>EnqueueFromIsr</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, scheduler.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EnqueueFromIsr &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_remove_head
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_add
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_add_node
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueuePrivateEvtFromIsr
</UL>

<P><STRONG><a name="[189]"></a>getTidMemory</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callBack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Scheduler
</UL>

<P><STRONG><a name="[187]"></a>osEnqueuePrivateEvtFromIsr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osEnqueuePrivateEvtFromIsr &rArr; EnqueueFromIsr &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnqueueFromIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCallBack_LowPower
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgrUpdateBySchedule
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_End
</UL>

<P><STRONG><a name="[188]"></a>osevtQueueDequeue</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, scheduler.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osevtQueueDequeue &rArr; Dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Scheduler
</UL>

<P><STRONG><a name="[17a]"></a>CWM_Scheduler</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, scheduler.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CWM_Scheduler &rArr; osevtQueueDequeue &rArr; Dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osevtQueueDequeue
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTidMemory
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_node
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process
</UL>

<P><STRONG><a name="[17b]"></a>CWM_GetScheduleQueueSize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CWM_GetScheduleQueueSize &rArr; queueGetUseSize &rArr; clst_get_leng &rArr;  clst_get_leng (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueGetUseSize
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_GetNextActionDuration_ns
</UL>

<P><STRONG><a name="[551]"></a>getOsAPI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sysplat.o(.cwm_sec.common_aml.p0), UNUSED)

<P><STRONG><a name="[165]"></a>sys_GetTimeNs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysplat.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_GetNextActionDuration_ns
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqSensorIoctl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_CMD
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEVT
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uSleep
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CWM_Sensor_Enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProjPrepareListen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process2
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTimer
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkProtectStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_Start
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_End
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgr_update_process_si
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
</UL>

<P><STRONG><a name="[162]"></a>syc_getFeatureLog</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscfg.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CWM_Sensor_Enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProjPrepareListen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process2
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSensorInputLog
</UL>

<P><STRONG><a name="[16c]"></a>syc_getFeatureDbg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscfg.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProjPrepareListen
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memFree
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
</UL>

<P><STRONG><a name="[3da]"></a>syc_getInternalFeatureDbg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscfg.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorRegister
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tidAlloc
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerIRQHandler
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memFree
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>

<P><STRONG><a name="[3db]"></a>syc_getLibCustomOption</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscfg.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerIRQHandler
</UL>

<P><STRONG><a name="[178]"></a>syc_setLibRunning</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, syscfg.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process2
</UL>

<P><STRONG><a name="[16b]"></a>syc_isLibRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, syscfg.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CWM_Sensor_Enable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_Start
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_End
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
</UL>

<P><STRONG><a name="[153]"></a>MGR_SensorUpdate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MGR_SensorUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_OutputCallback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virsens_dataadpter
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Temp
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_ReqSens
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_OnCharging
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_OffBody
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Mag
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Hr
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Gyro
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Gnss
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Baro
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_AnyMotion
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Acc
</UL>

<P><STRONG><a name="[17e]"></a>amhProcess_dt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, algo_amh.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhProcess
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process2
</UL>

<P><STRONG><a name="[17d]"></a>disable_sens_upadte_run_algo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, algo_amh.o(.cwm_sec.common_aml.p0), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process2
</UL>

<P><STRONG><a name="[4d]"></a>AmhListen</STRONG> (Thumb, 26 bytes, Stack size 72 bytes, proj_algo.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AmhListen &rArr; amhapp_getOutputType1 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_getOutputType1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(i.AMH_Custom)
</UL>
<P><STRONG><a name="[184]"></a>clst_mv_add</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, comm_list.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unSubscribeEvent
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnqueueFromIsr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dequeue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>

<P><STRONG><a name="[183]"></a>clst_mv_remove_head</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, comm_list.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeEvent
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnqueueFromIsr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dequeue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
</UL>

<P><STRONG><a name="[18a]"></a>clst_get_node</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, comm_list.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clst_get_node
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unSubscribeEvent
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeEvent
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSetRate
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorEnable
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorDisable
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Scheduler
</UL>

<P><STRONG><a name="[181]"></a>clst_get_leng</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, comm_list.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + In Cycle
<LI>Call Chain = clst_get_leng &rArr;  clst_get_leng (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_leng
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueGetUseSize
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_leng
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorRegister
</UL>

<P><STRONG><a name="[6d]"></a>amh_main_proc</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, amh_main.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = amh_main_proc &rArr; amh_rlog &rArr; amh_dlog_index &rArr; dlogRaw &rArr; conLogItems &rArr; getItemString &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHrRange_user
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAmhTime
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcHeartRateRange
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_rlog
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_proc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_dlog
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amh_main.o(i.amh_main_new)
</UL>
<P><STRONG><a name="[191]"></a>setHrRange_user</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, amh_common.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_proc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[195]"></a>getHrRage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, amh_common.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getHrRage
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcHeartRateRange
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[192]"></a>calcHeartRateRange</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, amh_common.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calcHeartRateRange &rArr; getHrRage
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHrRage
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_proc
</UL>

<P><STRONG><a name="[497]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[498]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>

<P><STRONG><a name="[496]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[552]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[495]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[49a]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[553]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[554]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CRYPTOCELL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platsystickTicksToUs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_dlog_index
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_proc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhProcess
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_proc_activity_recognition
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGapTime
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTeAndRecoveryTime
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uSleep
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkProtectStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_Start
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CWM_Sensor_Enable
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerIRQHandler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProjPrepareListen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputSclLog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_Start
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_End
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[555]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqSensorIoctl
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[556]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[48a]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[557]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cWrite
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAlgosOutput
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSteps
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertSetConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BikingSetConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActSetConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetTmConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MetabolismSetConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_add_node
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cWrite
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPreInit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_rx
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_OutputCallback
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode_cwm
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1digest
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindConvPeaks
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineAverageActivity
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_enable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed2biking_mets_code
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_gps_output_update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_biking_output
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biking_temp_update
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStatusProportion
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSleep
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMetabolism
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSteps
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecoveryTime
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAerobicTe
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three_points_buffer_update
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precision_update
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_info_update
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_gps_filter_output
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert_get_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertActivate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getConfig_cwm_sedentary_activity
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_report_data
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_accumulated_time
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_sedentary_activity
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActSetConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActOperation
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerActivate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_set_saved_metrics_info
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_get_saved_metrics_info
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_get_config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MetabolismOperation
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_custom
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customSensorListen
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Mag
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyInputSensorData
</UL>

<P><STRONG><a name="[558]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncLowActivityToScore
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetActScoreSleep
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isFalseTrigger
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepCounter
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSteps
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[559]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[55a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_amh
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipInfo
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetShareAlgo
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_absolute_static
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_watch_handupdown
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_rocking_detection
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_rocking_detection
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_reset_pedo_variables
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_sedentary_activity
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_pedometer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreachResetVariables
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_custom
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_MGR_Init
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cWrite
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_proc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_OutputCallback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_getOutputType1
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_act_common
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_sensor_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_sensor_config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_sensor_config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_sensor_config
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1digest
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetShareAlgo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGNSSRelatedAlgo
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecideShareMemSize
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetVariables
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineAverageActivity
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckValidData
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_resample
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_reset_pedo_variables
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_enable
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_disable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_contentpacked
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_sedentary
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_pedometer
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_metabolism
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_arAlert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_activity_recognition
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_reset
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biking_temp_update
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetActScoreSleep
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strideEstimation
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isFalseTrigger
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnssProcessing
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepCounter
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMetabolism
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSteps
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;points_smoother
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertActivate
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBiking
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_set_ap_status
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLowActivity
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActSetConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActActivate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateActivityScores
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_pedometer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_pedometer
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetGNSSInfo
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerActivate
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_elevation_estimation_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_elevation_estimation
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MetabolismActivate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSSFilterActivate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecideHandType
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlertCheckEvent
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertVoting
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorRegister
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Temp
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_ReqSens
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_OnCharging
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_OffBody
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Mag
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Hr
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Gyro
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Gnss
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Baro
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_AnyMotion
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Acc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_start
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyInputSensorData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transformSensorInputAndFifoDataStruct
</UL>

<P><STRONG><a name="[55b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3cf]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conLogItems
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatArrayM2IntString
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleArrayM2IntString
</UL>

<P><STRONG><a name="[432]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
</UL>

<P><STRONG><a name="[32a]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>

<P><STRONG><a name="[418]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>

<P><STRONG><a name="[1e1]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listdrvAdd
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListRemove
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListAdd
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvListFind
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableDriver
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_DiscoverRegisterSensor
</UL>

<P><STRONG><a name="[3c0]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v2
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_white_list_v2
</UL>

<P><STRONG><a name="[2f2]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_mean_filter
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_quality
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_anaerobic_te_task
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_quality
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_getOutputType1
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Gnss
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleM2Int
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_resample_run
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckValidData
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_biking_output
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumulateStandTime
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVO2maxRunSection
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_issue_return
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_quality
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_anaerobic_te_task
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVO2maxRunSection
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_mean_filter
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_ul2f</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ffltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTeAndRecoveryTime
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_update_metrics
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkProtectStatus
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleM2Int
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metabolism_event_update
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessGetMemSize
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_quality
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_mean_filter
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_issue_return
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_f2ulz</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ffixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTeAndRecoveryTime
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_getOutputType1
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleM2Int
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckValidData
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metabolism_event_update
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessGetMemSize
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Gnss
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_AP_SensorListen
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_getOutputType1
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlgoAmhListen
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_resample_run
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckValidData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_proc_activity_recognition
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_biking_output
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStatusProportion
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActDebugLogs
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNoticeCondition
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStopEvent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumulateStandTime
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVO2maxRunSection
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_quality
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateActivityScores
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_anaerobic_te_task
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Gnss
</UL>

<P><STRONG><a name="[55c]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_abs
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckValidData
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroArray
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoother_info_update
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;points_smoother
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_point
</UL>

<P><STRONG><a name="[227]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_max
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_resample_run
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckValidData
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroArray
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_point
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_getOutputType1
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_biking_output
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumulateStandTime
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVO2maxRunSection
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_issue_return
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_points
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_quality
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetGNSSInfo
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_anaerobic_te_task
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Gnss
</UL>

<P><STRONG><a name="[55d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[55e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[55f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1a2]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>

<P><STRONG><a name="[19d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[19c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[144]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[560]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[561]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[562]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>AMH_Custom</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, proj_algo.o(i.AMH_Custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AMH_Custom &rArr; sensorRegister &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorRegister
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Create
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projAlgoInit
</UL>

<P><STRONG><a name="[1c7]"></a>ActivityRecogModel</STRONG> (Thumb, 78 bytes, Stack size 68 bytes, cwm_ml_model.o(i.ActivityRecogModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ActivityRecogModel &rArr; DetermineModelActivities
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineModelActivities
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[1cc]"></a>AlgoInit</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_algo.o(i.AlgoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AlgoInit &rArr; GetAlgoSupportList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumberOfAlgoSupport
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoSupportList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projAlgoInit
</UL>

<P><STRONG><a name="[1cf]"></a>AssignMemoryAddress</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, cwm_algorithm_interface.o(i.AssignMemoryAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AssignMemoryAddress &rArr; DecideShareMemSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRotvOPDRMemAddress
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecideShareMemSize
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_init
</UL>

<P><STRONG><a name="[7f]"></a>CWM_AP_SensorListen</STRONG> (Thumb, 2122 bytes, Stack size 256 bytes, main.o(i.CWM_AP_SensorListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CWM_AP_SensorListen &rArr; CWM_OS_dbgPrintf &rArr; CWM_OS_dbgOutput &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgPrintf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReqSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1d9]"></a>CWM_CustomSensorInput_Fifo_End</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, input_sensor_manager.o(i.CWM_CustomSensorInput_Fifo_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CWM_CustomSensorInput_Fifo_End &rArr; sensorInput_Fifo_End &rArr; osEnqueuePrivateEvtFromIsr &rArr; EnqueueFromIsr &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_End
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1db]"></a>CWM_CustomSensorInput_Fifo_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, input_sensor_manager.o(i.CWM_CustomSensorInput_Fifo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CWM_CustomSensorInput_Fifo_Init &rArr; sensorInput_Fifo_Init &rArr; sys_memFree &rArr; maaFree &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isLibRunning
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dd]"></a>CWM_CustomSensorInput_Fifo_Start</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, input_sensor_manager.o(i.CWM_CustomSensorInput_Fifo_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CWM_CustomSensorInput_Fifo_Start &rArr; sensorInput_Fifo_Start &rArr; fifo_start &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>CWM_DiscoverRegisterSensor</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, proj_sensor.o(i.CWM_DiscoverRegisterSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CWM_DiscoverRegisterSensor &rArr; hwSensorListRemove &rArr; hwsensorListRemove &rArr; sys_memFree &rArr; maaFree &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tidFree
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tidAlloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_isHwInterfaceExist
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwSensorListRemove
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwSensorListLength
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInitFromEnabledList
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[1e7]"></a>CWM_GetNextActionDuration_ns</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, proj_prepare.o(i.CWM_GetNextActionDuration_ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CWM_GetNextActionDuration_ns &rArr; updateTimer &rArr; cwmTimerIRQHandler &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_GetScheduleQueueSize
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTimer
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>CWM_LibPostInit</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, proj_prepare.o(i.CWM_LibPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CWM_LibPostInit &rArr; projAlgoInit &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_setLowPowerModeStatus
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_setLowPowerModeCfgEnabled
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projAlgoInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueueCommon
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipManager
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventRegisterCallBack
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerCreate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Create
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_MGR_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_ScheduleInit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_RegisterSensor
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_DiscoverRegisterSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f5]"></a>CWM_LibPreInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, proj_prepare.o(i.CWM_LibPreInit))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>CWM_OS_GetTimeNs</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, board_nordic.o(i.CWM_OS_GetTimeNs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CWM_OS_GetTimeNs &rArr; platsystickTicksToUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platsystickTicksToUs
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcElapsedTicks
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>CWM_OS_dbgOutput</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board_nordic.o(i.CWM_OS_dbgOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CWM_OS_dbgOutput &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>CWM_OS_dbgPrintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, board_nordic.o(i.CWM_OS_dbgPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CWM_OS_dbgPrintf &rArr; CWM_OS_dbgOutput &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgOutput
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_AP_SensorListen
</UL>

<P><STRONG><a name="[98]"></a>CWM_OS_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board_nordic.o(i.CWM_OS_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CWM_OS_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>CWM_OS_i2cRead</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, board_nordic.o(i.CWM_OS_i2cRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CWM_OS_i2cRead &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_read
</UL>

<P><STRONG><a name="[1ff]"></a>CWM_OS_i2cWrite</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, board_nordic.o(i.CWM_OS_i2cWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CWM_OS_i2cWrite &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_write
</UL>

<P><STRONG><a name="[97]"></a>CWM_OS_malloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board_nordic.o(i.CWM_OS_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CWM_OS_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>CWM_RegisterSensor</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, proj_sensor.o(i.CWM_RegisterSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CWM_RegisterSensor &rArr; hwSensorListAdd &rArr; hwsensorListAdd &rArr;  hwsensorListAdd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwSensorListInit
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwSensorListAdd
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[1ed]"></a>CWM_ScheduleInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scheduler.o(i.CWM_ScheduleInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[204]"></a>CWM_Sensor_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proj_sensor.o(i.CWM_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CWM_Sensor_Enable &rArr; _CWM_Sensor_Enable &rArr; Custom_MGR_Enable &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CWM_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[487]"></a>CWM_SettingControl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proj_prepare.o(i.CWM_SettingControl))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ad]"></a>CalcAveragePace</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.CalcAveragePace))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedoOutputUpdate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSyncInfo
</UL>

<P><STRONG><a name="[56]"></a>CompareFloat</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cwm_algorithm_interface.o(i.CompareFloat))
<BR>[Address Reference Count : 2]<UL><LI> cwm_activity_recognition.o(i.CollectData)
<LI> cwm_activity_recognition.o(i.RealTimeFilter)
</UL>
<P><STRONG><a name="[58]"></a>CompareUint8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_algorithm_interface.o(i.CompareUint8))
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_recognition.o(i.DetermineAverageActivity)
</UL>
<P><STRONG><a name="[253]"></a>CreateEmptyTable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_algorithm_interface.o(i.CreateEmptyTable))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SportsSwingCreate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseResumeCreateObject
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessCreateObject
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPDRCreateObject
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwimCreateObject
</UL>

<P><STRONG><a name="[231]"></a>Custom_MGR_Disable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, proj_sensor.o(i.Custom_MGR_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Custom_MGR_Disable &rArr; MGR_Disable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CWM_Sensor_Enable
</UL>

<P><STRONG><a name="[232]"></a>Custom_MGR_Enable</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, proj_sensor.o(i.Custom_MGR_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Custom_MGR_Enable &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CWM_Sensor_Enable
</UL>

<P><STRONG><a name="[1ec]"></a>Custom_MGR_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, proj_sensor.o(i.Custom_MGR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Custom_MGR_Init &rArr; MGR_Create &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[1d0]"></a>DecideShareMemSize</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, cwm_algorithm_interface.o(i.DecideShareMemSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DecideShareMemSize
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMLDT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignMemoryAddress
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_memsize
</UL>

<P><STRONG><a name="[1c8]"></a>DetermineModelActivities</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, cwm_ml_model.o(i.DetermineModelActivities))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DetermineModelActivities
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecogModel
</UL>

<P><STRONG><a name="[ea]"></a>DoNothing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cwm_algorithm_interface.o(i.DoNothing))
<BR>[Address Reference Count : 6]<UL><LI> cwm_activity_alert_interface.o(.constdata)
<LI> cwm_algorithm_interface.o(.constdata)
<LI> cwm_ar_utility_interface.o(.constdata)
<LI> cwm_pedometer_interface.o(.constdata)
<LI> cwm_seden_activity_interface.o(.constdata)
<LI> cwm_biking_interface.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>DriverInitFromEnabledList</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hal_drv.o(i.DriverInitFromEnabledList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DriverInitFromEnabledList &rArr; getDrvInit &rArr; drvListFind &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDrvInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_DiscoverRegisterSensor
</UL>

<P><STRONG><a name="[249]"></a>Enqueue</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, scheduler.o(i.Enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Enqueue &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_remove_head
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_add
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_add_node
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueueCommon
</UL>

<P><STRONG><a name="[21]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GPIOTE_IRQHandler &rArr; port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1cd]"></a>GetAlgoSupportList</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, config_algo.o(i.GetAlgoSupportList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetAlgoSupportList
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlgoInit
</UL>

<P><STRONG><a name="[22a]"></a>GetMaxValueIndex</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, cwm_algorithm_interface.o(i.GetMaxValueIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetMaxValueIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTimeFilter
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineAverageActivity
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectData
</UL>

<P><STRONG><a name="[215]"></a>GetMeanStd</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, cwm_algorithm_interface.o(i.GetMeanStd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetMeanStd &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedentaryEvent
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassVariablesToSeden
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateActivityScores
</UL>

<P><STRONG><a name="[1ce]"></a>GetNumberOfAlgoSupport</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, config_algo.o(i.GetNumberOfAlgoSupport))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlgoInit
</UL>

<P><STRONG><a name="[134]"></a>GetOpdrPackageMemSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_PDR_interface.o(i.GetOpdrPackageMemSize))
<BR>[Address Reference Count : 1]<UL><LI> cwm_PDR_interface.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>InitAlgo</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cwm_algorithm_interface.o(i.InitAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitAlgo &rArr; SelectMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMemory
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectById
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGNSSRelatedAlgo
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_reset_pedo_variables
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_disable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBiking
</UL>

<P><STRONG><a name="[28a]"></a>InitMLDT</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cwm_algorithm_interface.o(i.InitMLDT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitMLDT &rArr; DecideShareMemSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecideShareMemSize
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_init
</UL>

<P><STRONG><a name="[1ac]"></a>MGR_Create</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sensor_manager.o(i.MGR_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MGR_Create &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_add_node
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMH_Custom
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_amh
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_MGR_Init
</UL>

<P><STRONG><a name="[208]"></a>MGR_Disable</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, sensor_manager.o(i.MGR_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MGR_Disable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Sync
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_remove
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_add
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oncharging_sensor_config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offbody_sensor_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_sensor_config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_sensor_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_sensor_config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_sensor_config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_sensor_config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_sensor_config
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_MGR_Disable
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_actions
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
</UL>

<P><STRONG><a name="[20a]"></a>MGR_Enable</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, sensor_manager.o(i.MGR_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Sync
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_remove_head
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_node
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_add_node
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oncharging_sensor_config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offbody_sensor_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_sensor_config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_sensor_config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_sensor_config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_sensor_config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_sensor_config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_sensor_config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_MGR_Enable
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projAlgoInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_actions
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
</UL>

<P><STRONG><a name="[209]"></a>MGR_Ioctl</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sensor_manager.o(i.MGR_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MGR_Ioctl &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIoctl
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_actions
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
</UL>

<P><STRONG><a name="[20b]"></a>MGR_SetRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensor_manager.o(i.MGR_SetRate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorSetRate
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
</UL>

<P><STRONG><a name="[1e9]"></a>MGR_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sensor_manager.o(i.MGR_init))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorHalInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[8]"></a>MgrUpdate_AnyMotion</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, input_sensor_manager.o(i.MgrUpdate_AnyMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MgrUpdate_AnyMotion &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_sensor_manager.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>MgrUpdate_Baro</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, input_sensor_manager.o(i.MgrUpdate_Baro))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MgrUpdate_Baro &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_sensor_manager.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>MgrUpdate_Gnss</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, input_sensor_manager.o(i.MgrUpdate_Gnss))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MgrUpdate_Gnss &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_sensor_manager.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>MgrUpdate_Gyro</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, input_sensor_manager.o(i.MgrUpdate_Gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MgrUpdate_Gyro &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_sensor_manager.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>MgrUpdate_Hr</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, input_sensor_manager.o(i.MgrUpdate_Hr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MgrUpdate_Hr &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_sensor_manager.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>MgrUpdate_Mag</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, input_sensor_manager.o(i.MgrUpdate_Mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MgrUpdate_Mag &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magCalibrationProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_sensor_manager.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>MgrUpdate_OffBody</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, input_sensor_manager.o(i.MgrUpdate_OffBody))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MgrUpdate_OffBody &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_sensor_manager.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>MgrUpdate_OnCharging</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, input_sensor_manager.o(i.MgrUpdate_OnCharging))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MgrUpdate_OnCharging &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_sensor_manager.o(.data)
</UL>
<P><STRONG><a name="[2a3]"></a>MgrUpdate_ReqSens</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, input_sensor_manager.o(i.MgrUpdate_ReqSens))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MgrUpdate_ReqSens &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqSensorIoctl
</UL>

<P><STRONG><a name="[5]"></a>MgrUpdate_Temp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, input_sensor_manager.o(i.MgrUpdate_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MgrUpdate_Temp &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_sensor_manager.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrfx_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17f]"></a>ProjPrepareListen</STRONG> (Thumb, 190 bytes, Stack size 296 bytes, proj_prepare.o(i.ProjPrepareListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ProjPrepareListen &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCustomSensIdx
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getSclLog8Opt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureDbg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatArrayM2IntString
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customSensorListen
</UL>

<P><STRONG><a name="[26]"></a>RTC0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_rtc.o(i.RTC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC0_IRQHandler &rArr; irq_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c9]"></a>ResetAndUpdateAlgo</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cwm_algorithm_interface.o(i.ResetAndUpdateAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ResetAndUpdateAlgo &rArr; ResetGNSSRelatedAlgo &rArr; InitAlgo &rArr; SelectMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetShareAlgo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGNSSRelatedAlgo
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[1b5]"></a>ResetGNSSRelatedAlgo</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cwm_algorithm_interface.o(i.ResetGNSSRelatedAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ResetGNSSRelatedAlgo &rArr; InitAlgo &rArr; SelectMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAlgo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAndUpdateAlgo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBiking
</UL>

<P><STRONG><a name="[1b4]"></a>ResetShareAlgo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cwm_algorithm_interface.o(i.ResetShareAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ResetShareAlgo &rArr; HandleDailyData
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleDailyData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAndUpdateAlgo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBiking
</UL>

<P><STRONG><a name="[eb]"></a>ReturnNothing</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_algorithm_interface.o(i.ReturnNothing))
<BR>[Address Reference Count : 3]<UL><LI> cwm_algorithm_interface.o(.constdata)
<LI> cwm_ar_utility_interface.o(.constdata)
<LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[2cf]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>

<P><STRONG><a name="[2d1]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[1e]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler &rArr; finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_twim.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler &rArr; twim_irq_handler &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_twim.o(.constdata)
<LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d8]"></a>SaveAlgosOutput</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cwm_algorithm_interface.o(i.SaveAlgosOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SaveAlgosOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActActivate
</UL>

<P><STRONG><a name="[288]"></a>SelectById</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, cwm_algorithm_interface.o(i.SelectById))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SelectById
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAlgo
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_algo_config
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_exit
</UL>

<P><STRONG><a name="[3de]"></a>SelectByMode</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, cwm_algorithm_interface.o(i.SelectByMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SelectByMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_resume
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_pause
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[289]"></a>SelectMemory</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, cwm_algorithm_interface.o(i.SelectMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SelectMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAlgo
</UL>

<P><STRONG><a name="[29c]"></a>SensorHalInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_sensor.o(i.SensorHalInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_init
</UL>

<P><STRONG><a name="[2b1]"></a>SetDailyInfo</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cwm_algorithm_interface.o(i.SetDailyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetDailyInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeCalories
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDailyData
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerActivate
</UL>

<P><STRONG><a name="[1b9]"></a>SetModeCalories</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_algorithm_interface.o(i.SetModeCalories))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDailyInfo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBiking
</UL>

<P><STRONG><a name="[1d1]"></a>SetRotvOPDRMemAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_PDR_interface.o(i.SetRotvOPDRMemAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignMemoryAddress
</UL>

<P><STRONG><a name="[2e7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52840.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4a]"></a>SystemInit</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, system_nrf52840.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_98
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_66
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_36
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_136
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_120
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_115
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_103
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTE0_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f3]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[563]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1f9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgOutput
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[564]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[565]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2f5]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[566]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[51c]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1digest
</UL>

<P><STRONG><a name="[567]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[568]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[2f6]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[569]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[169]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conLogItems
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatArrayM2IntString
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleArrayM2IntString
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
</UL>

<P><STRONG><a name="[56a]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[56b]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2f7]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[56c]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[56d]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[56e]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1fa]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgPrintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>

<P><STRONG><a name="[300]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[2fa]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_acos
</UL>

<P><STRONG><a name="[2ff]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_atan2
</UL>

<P><STRONG><a name="[303]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_cos
</UL>

<P><STRONG><a name="[21d]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatePAI
</UL>

<P><STRONG><a name="[56f]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[306]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sin
</UL>

<P><STRONG><a name="[307]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
</UL>

<P><STRONG><a name="[2fc]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[302]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[2fe]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[305]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[301]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[304]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[570]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[571]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[572]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2fd]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[1be]"></a>_embedded_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cwm_algorithm_interface.o(i._embedded_string))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_embedded_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_embedded_string
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertGetMemSize
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BikingGetMemSize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilityGetMemSize
</UL>

<P><STRONG><a name="[346]"></a>algo_LogMaskInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, log_algo.o(i.algo_LogMaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[e9]"></a>algo_amh</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, algo_amh.o(i.algo_amh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = algo_amh &rArr; amhapp_init &rArr; activate_virsens_algorithm &rArr; addHwClientComp &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorRegister
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerCreate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Create
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_algo.o(.constdata)
</UL>
<P><STRONG><a name="[329]"></a>algo_isLogOn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, log_algo.o(i.algo_isLogOn))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>

<P><STRONG><a name="[1b3]"></a>algo_log</STRONG> (Thumb, 90 bytes, Stack size 288 bytes, log_algo.o(i.algo_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_isLogOn
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMLDTReportEvent
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckValidData
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_reset_pedo_variables
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_enable
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_disable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStartSleepInitTime
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StageREMbyHeartRate
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStopInitTime
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStatusProportion
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStartInitTime
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActDebugLogs
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutputTime
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetStand
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedentary
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedenAct
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetActScoreSleep
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStopSleepTime
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStatusTime
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputOperationTime
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputEndNoticeEvent
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputAwakeSleepTime
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWakeCondition
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStatic
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSleepCondition
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNoticeCondition
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeBaseSwicth
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStopEvent
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStand
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSleepStop
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenSystemEvent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReminderAndRelease
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNotice
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNapStop
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleModeSwitch
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLightDeepTime
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleFakesleep
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleBackToSleep
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSleep
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSedentary
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigMode
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeDiff
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStartNoticeEvent
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOutputBuffer
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGapTime
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDelayMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumulateStandTime
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strideEstimation
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedoOutputUpdate
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepFrequency
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepCounter
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElevationProcess
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MetabolismInputCheck
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert_get_hand_type
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_set_ap_status
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_report_data
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_accumulated_time
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_sedentary_activity
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActActivate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateActivityScores
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityScoresDebugLog
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stairsUpdate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetTmConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerExit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_set_saved_metrics_info
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_set_min_hr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_set_max_hr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_set_config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_get_saved_metrics_info
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
</UL>

<P><STRONG><a name="[6b]"></a>algo_process_setoperated</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, amh_main.o(i.algo_process_setoperated))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = algo_process_setoperated &rArr; _setoperated &rArr; hw_client_components_get_hwApi &rArr; hw_client_components_hwApi &rArr; _linkedlist_get &rArr; datalist_create &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setoperated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amh_main.o(i.amh_main_new)
</UL>
<P><STRONG><a name="[34a]"></a>algo_setLogOutputFunc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, log_algo.o(i.algo_setLogOutputFunc), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_set_cfg_directly
</UL>

<P><STRONG><a name="[34b]"></a>algo_setTagIdMask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, log_algo.o(i.algo_setTagIdMask), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_set_cfg_directly
</UL>

<P><STRONG><a name="[6c]"></a>alog_process_getoperated</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, amh_main.o(i.alog_process_getoperated))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = alog_process_getoperated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amh_main.o(i.amh_main_new)
</UL>
<P><STRONG><a name="[190]"></a>amh_dlog</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, log_dlog.o(i.amh_dlog))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_proc
</UL>

<P><STRONG><a name="[14c]"></a>amh_main_algo_report</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, amh_main.o(i.amh_main_algo_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = amh_main_algo_report
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_absolute_static
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_watch_hand_up_down
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_rocking_detection
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportSleepData
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_activity_exit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_activity_recognition
</UL>

<P><STRONG><a name="[33c]"></a>amh_main_new</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, amh_main.o(i.amh_main_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = amh_main_new &rArr; obj_rockingdetection_new &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_stand_new
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_shake_new
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_rockingdetection_new
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_handupdownwatch_new
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_falling_detection_new
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_cust_algo1_new
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_ar_new
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_absolute_static_new
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStrAmh
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_LogMaskInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_init
</UL>

<P><STRONG><a name="[349]"></a>amh_main_set_cfg_directly</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, amh_main.o(i.amh_main_set_cfg_directly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_time_sync
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_config
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_setTagIdMask
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_setLogOutputFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
</UL>

<P><STRONG><a name="[34d]"></a>amh_reSample_config</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, amh_resample.o(i.amh_reSample_config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_set_cfg_directly
</UL>

<P><STRONG><a name="[348]"></a>amh_reSample_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, amh_resample.o(i.amh_reSample_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = amh_reSample_init &rArr; set_algo_config &rArr; config_cwm_resample
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_resample
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_resample
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_resample
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[316]"></a>amh_reSample_internal_ctrl</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, amh_resample.o(i.amh_reSample_internal_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = amh_reSample_internal_ctrl &rArr; set_algo_config &rArr; config_cwm_resample
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setoperated
</UL>

<P><STRONG><a name="[193]"></a>amh_reSample_proc</STRONG> (Thumb, 162 bytes, Stack size 96 bytes, amh_resample.o(i.amh_reSample_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = amh_reSample_proc &rArr; cwm_resample &rArr; cwm_resample_run &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_resample
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_proc
</UL>

<P><STRONG><a name="[194]"></a>amh_rlog</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, log_dlog.o(i.amh_rlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = amh_rlog &rArr; amh_dlog_index &rArr; dlogRaw &rArr; conLogItems &rArr; getItemString &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_dlog_index
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_proc
</UL>

<P><STRONG><a name="[34c]"></a>amh_time_sync</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, amh_time.o(i.amh_time_sync), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timedate2sec
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timedate
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_set_cfg_directly
</UL>

<P><STRONG><a name="[18e]"></a>amhapp_getOutputType1</STRONG> (Thumb, 3434 bytes, Stack size 96 bytes, amh_app.o(i.amhapp_getOutputType1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = amhapp_getOutputType1 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_act_common
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorPowerState
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmhListen
</UL>

<P><STRONG><a name="[31c]"></a>amhapp_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, amh_app.o(i.amhapp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = amhapp_init &rArr; activate_virsens_algorithm &rArr; addHwClientComp &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activate_virsens_algorithm
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_amh
</UL>

<P><STRONG><a name="[356]"></a>amhapp_setActmode_and_hw_cfg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, amh_app.o(i.amhapp_setActmode_and_hw_cfg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isNeedActivityMode
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_actmode_and_hw_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
</UL>

<P><STRONG><a name="[1ae]"></a>amhapp_setPower</STRONG> (Thumb, 484 bytes, Stack size 56 bytes, amh_app.o(i.amhapp_setPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = amhapp_setPower &rArr; setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPowerState
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLastActivityMode
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHwAlgoPower
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandPower
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepPower
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakePower
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedentaryPower
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoMotionPower
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InactivityOutputPower
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandupdownPower
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FallingPower
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityOutputPower
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AbsoluteStaticPower
</UL>

<P><STRONG><a name="[20d]"></a>amhapp_setting_control</STRONG> (Thumb, 1632 bytes, Stack size 88 bytes, amh_app.o(i.amhapp_setting_control), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_set_cfg_directly
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setActmode_and_hw_cfg
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_sleep_inputHr
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_actmode_inputHr
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_actmode_algo_cfg
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTbl_actmode_algo_cfg
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_actmode_input_all
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_hw_tbl_idx_get
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
</UL>

<P><STRONG><a name="[20c]"></a>apis_scl_common</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, apis_scl.o(i.apis_scl_common), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipInfo
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStr
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
</UL>

<P><STRONG><a name="[365]"></a>app_error_fault_handler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[369]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nordic_system_init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handle
</UL>

<P><STRONG><a name="[36a]"></a>app_fifo_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[379]"></a>app_fifo_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[36d]"></a>app_fifo_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[1f6]"></a>app_timer_cnt_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_cnt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_cnt_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systickUpdate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_GetTimeNs
</UL>

<P><STRONG><a name="[521]"></a>app_timer_create</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[370]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_init &rArr; rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[376]"></a>app_timer_start</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[378]"></a>app_uart_init</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[37c]"></a>app_uart_put</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[380]"></a>app_util_critical_region_enter</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[382]"></a>app_util_critical_region_exit</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[381]"></a>app_util_disable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[383]"></a>app_util_enable_irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[39a]"></a>board_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, board_nordic.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = board_init &rArr; uart_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nordic_system_init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[3a3]"></a>bsp_board_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, boards.o(i.bsp_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_board_init &rArr; bsp_board_leds_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_buttons_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nordic_system_init
</UL>

<P><STRONG><a name="[3a5]"></a>bsp_board_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[3a7]"></a>bsp_board_leds_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[4c9]"></a>buffer_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[353]"></a>check_timedate</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, amh_time.o(i.check_timedate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timedate2sec
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec2timedate
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_time_sync
</UL>

<P><STRONG><a name="[186]"></a>clst_add_node</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, comm_list.o(i.clst_add_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_insert_sort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnqueueFromIsr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorRegister
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Create
</UL>

<P><STRONG><a name="[3c5]"></a>clst_insert_sort</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, comm_list.o(i.clst_insert_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_add_node
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeEvent
</UL>

<P><STRONG><a name="[51f]"></a>clst_mv_insert_sort</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, comm_list.o(i.clst_mv_insert_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clst_mv_insert_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeEvent
</UL>

<P><STRONG><a name="[296]"></a>clst_mv_remove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, comm_list.o(i.clst_mv_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clst_mv_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unSubscribeEvent
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>

<P><STRONG><a name="[398]"></a>code_update</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, cwm_smoothing_filter.o(i.code_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = code_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_elevation_estimation_input
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stability_event_update
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metabolism_event_update
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_speed_stability
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_biking_input
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biking_acc_stability
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_filter_update
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_smoother_update
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_filter_input
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_elevation_estimation
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_estimation_update
</UL>

<P><STRONG><a name="[512]"></a>config_cwm_resample</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cwm_resample.o(i.config_cwm_resample))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = config_cwm_resample
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_config
</UL>

<P><STRONG><a name="[2dc]"></a>config_cwm_sedentary_activity</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, cwm_sedentary_activity.o(i.config_cwm_sedentary_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = config_cwm_sedentary_activity &rArr; ConfigSleep &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ThresholdInRange_int
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSleep
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSedentary
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigMode
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActSetConfig
</UL>

<P><STRONG><a name="[1d6]"></a>customDrvPollingTimeout</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, input_sensor_manager.o(i.customDrvPollingTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = customDrvPollingTimeout &rArr; mgrUpdateBySchedule &rArr; osEnqueuePrivateEvtFromIsr &rArr; EnqueueFromIsr &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCustDrvPollingDataReady
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgrUpdateBySchedule
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCustDrvPollingDataReady
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_CMD
</UL>

<P><STRONG><a name="[3d0]"></a>cv3_verify</STRONG> (Thumb, 518 bytes, Stack size 376 bytes, cypher3.o(i.cv3_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = cv3_verify &rArr; vli_modMult &rArr; vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_numBits
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_bytes2native
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
</UL>

<P><STRONG><a name="[542]"></a>cwmGetTimerInfo</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw_timer.o(i.cwmGetTimerInfo))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTimer
</UL>

<P><STRONG><a name="[1b0]"></a>cwmMat_length</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwmMat_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwmMat_length &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_absolute_static
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumulateStandTime
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertAccToCount
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerAccumulateMAI
</UL>

<P><STRONG><a name="[1f0]"></a>cwmTimerCreate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sw_timer.o(i.cwmTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cwmTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_amh
</UL>

<P><STRONG><a name="[3d9]"></a>cwmTimerIRQHandler</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, sw_timer.o(i.cwmTimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cwmTimerIRQHandler &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncTimerInfo
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getLibCustomOption
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getInternalFeatureDbg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateTimer
</UL>

<P><STRONG><a name="[1ef]"></a>cwmTimerInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sw_timer.o(i.cwmTimerInit))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[2df]"></a>cwmTimerStart</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, sw_timer.o(i.cwmTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cwmTimerStart &rArr; syncTimerInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncTimerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virsens_dataadpter
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEVT
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeRegisterEvent
</UL>

<P><STRONG><a name="[18d]"></a>cwmTimerStop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sw_timer.o(i.cwmTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cwmTimerStop &rArr; syncTimerInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncTimerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEVT
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlgoAmhListen
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeRegisterEvent
</UL>

<P><STRONG><a name="[213]"></a>cwmVec_movingAvg_SQR</STRONG> (Thumb, 260 bytes, Stack size 20 bytes, cwm_common_utility_float.o(i.cwmVec_movingAvg_SQR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cwmVec_movingAvg_SQR
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateActivityScores
</UL>

<P><STRONG><a name="[22d]"></a>cwm_ThresholdInRange_int</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_ThresholdInRange_int))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSleep
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSedentary
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_sedentary_activity
</UL>

<P><STRONG><a name="[3bc]"></a>cwm_abs</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cwm_common_utility_float.o(i.cwm_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwm_abs
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metabolism_event_update
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;points_smoother
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_point
</UL>

<P><STRONG><a name="[151]"></a>cwm_absolute_static</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, cwm_absolute_static.o(i.cwm_absolute_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cwm_absolute_static &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_absolute_static
</UL>

<P><STRONG><a name="[1b1]"></a>cwm_acos</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cwm_acos &rArr; __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumulateStandTime
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
</UL>

<P><STRONG><a name="[1bb]"></a>cwm_activity_alert</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, cwm_activity_alert.o(i.cwm_activity_alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cwm_activity_alert &rArr; AlertCheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRideInterval
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlertCheckEvent
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertVoting
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertActivate
</UL>

<P><STRONG><a name="[13b]"></a>cwm_activity_alert_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_activity_alert.o(i.cwm_activity_alert_enable))
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_alert_interface.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>cwm_activity_alert_get_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cwm_activity_alert.o(i.cwm_activity_alert_get_config))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertGetConfig
</UL>

<P><STRONG><a name="[1bc]"></a>cwm_activity_alert_get_hand_type</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cwm_activity_alert.o(i.cwm_activity_alert_get_hand_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = cwm_activity_alert_get_hand_type &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertActivate
</UL>

<P><STRONG><a name="[13a]"></a>cwm_activity_alert_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cwm_activity_alert.o(i.cwm_activity_alert_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cwm_activity_alert_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_alert_interface.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>cwm_activity_alert_memsize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_activity_alert.o(i.cwm_activity_alert_memsize))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertGetMemSize
</UL>

<P><STRONG><a name="[1c2]"></a>cwm_activity_alert_set_config</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, cwm_activity_alert.o(i.cwm_activity_alert_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwm_activity_alert_set_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertSetConfig
</UL>

<P><STRONG><a name="[149]"></a>cwm_ar_mldt</STRONG> (Thumb, 1354 bytes, Stack size 96 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = cwm_ar_mldt &rArr; FeaturesExtraction &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_swapf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectByMode
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAndUpdateAlgo
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeanStd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecogModel
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedentaryEvent
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RollActivityBuffer
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResultMapping
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetVariables
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetThreeSecWindow
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTimeFilter
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMLDTReportEvent
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectData
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckValidData
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecogFilter
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_proc_activity_recognition
</UL>

<P><STRONG><a name="[31f]"></a>cwm_ar_mldt_disable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = cwm_ar_mldt_disable &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAlgo
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
</UL>

<P><STRONG><a name="[31e]"></a>cwm_ar_mldt_enable</STRONG> (Thumb, 416 bytes, Stack size 424 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = cwm_ar_mldt_enable &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
</UL>

<P><STRONG><a name="[3e1]"></a>cwm_ar_mldt_exit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cwm_ar_mldt_exit &rArr; SelectById
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectById
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_activity_exit
</UL>

<P><STRONG><a name="[3e2]"></a>cwm_ar_mldt_init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = cwm_ar_mldt_init &rArr; cwm_ar_mldt_enable &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMLDT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignMemoryAddress
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_memsize
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[3e3]"></a>cwm_ar_mldt_memsize</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_memsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cwm_ar_mldt_memsize &rArr; DecideShareMemSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecideShareMemSize
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[516]"></a>cwm_ar_mldt_metabolism_operation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_metabolism_operation))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[3e4]"></a>cwm_ar_mldt_pause</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cwm_ar_mldt_pause &rArr; SelectByMode
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectByMode
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[515]"></a>cwm_ar_mldt_reset_breach_variables</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_reset_breach_variables))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[3e5]"></a>cwm_ar_mldt_reset_pedo_variables</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_reset_pedo_variables))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = cwm_ar_mldt_reset_pedo_variables &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAlgo
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_version
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[3e7]"></a>cwm_ar_mldt_resume</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cwm_ar_mldt_resume &rArr; SelectByMode
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectByMode
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[50a]"></a>cwm_ar_mldt_sedenAct_operation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_sedenAct_operation))
<BR><BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportSleepData
</UL>

<P><STRONG><a name="[330]"></a>cwm_ar_mldt_set_algo_config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_set_algo_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cwm_ar_mldt_set_algo_config &rArr; SelectById
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectById
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_swim
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_sedentary
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_pedometer
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_metabolism
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_biking
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_arAlert
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_actPauseDet
</UL>

<P><STRONG><a name="[336]"></a>cwm_ar_mldt_set_mldt_config</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_set_mldt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cwm_ar_mldt_set_mldt_config &rArr; isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_mldt
</UL>

<P><STRONG><a name="[3e6]"></a>cwm_ar_mldt_version</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cwm_activity_recognition.o(i.cwm_ar_mldt_version))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_reset_pedo_variables
</UL>

<P><STRONG><a name="[3e8]"></a>cwm_atan2</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cwm_atan2 &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slope_angle_update
</UL>

<P><STRONG><a name="[1b7]"></a>cwm_biking</STRONG> (Thumb, 418 bytes, Stack size 240 bytes, cwm_biking.o(i.cwm_biking))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = cwm_biking &rArr; metabolism_event_update &rArr; cwm_metabolism &rArr; MetabolismInputCheck &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_reset
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stability_event_update
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metabolism_event_update
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_metabolism_output_update
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_gps_output_update
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_elevation_output_update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_biking_output
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_biking_input
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biking_temp_update
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_statistic_info_reset
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBiking
</UL>

<P><STRONG><a name="[12d]"></a>cwm_biking_init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, cwm_biking.o(i.cwm_biking_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cwm_biking_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_biking_interface.o(.constdata)
</UL>
<P><STRONG><a name="[250]"></a>cwm_bubbleSort</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, cwm_common_utility_float.o(i.cwm_bubbleSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cwm_bubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_swapf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_swapint16
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSteps
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPeaks
</UL>

<P><STRONG><a name="[25f]"></a>cwm_calAvgMaxMin</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_calAvgMaxMin))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_metabolism_output_update
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_gps_output_update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_biking_output
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMetabolism
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[3f3]"></a>cwm_cos</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cwm_common_utility_float.o(i.cwm_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cwm_cos &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
</UL>

<P><STRONG><a name="[243]"></a>cwm_elevation_estimation</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, cwm_elevation_estimation.o(i.cwm_elevation_estimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = cwm_elevation_estimation &rArr; elevation_estimation_update &rArr; elevation_update &rArr; slope_angle_update &rArr; cwm_atan2 &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_elevation_estimation_input
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_info_update
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_estimation_update
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_elevation_estimation_output
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElevationActivate
</UL>

<P><STRONG><a name="[104]"></a>cwm_elevation_estimation_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cwm_elevation_estimation.o(i.cwm_elevation_estimation_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwm_elevation_estimation_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[1b2]"></a>cwm_fabs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_fabs))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMLDTReportEvent
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectData
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAxisFeatures
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_elevation_output_update
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_biking_output
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_biking_input_setting
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumulateStandTime
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeakFilter
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMetabolism
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElevationProcess
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAxisAccMess
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInterpolatedValue
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAerobicTe
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_info_update
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_update
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_check_data_convergence
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_filter_input
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSwimActivity
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertPassVariables
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBiking
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerAccumulateMAI
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_set_activity_class
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_anaerobic_te_task
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_xlnSmall
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_data_valid_check
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slope_update
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slope_angle_update
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_update
</UL>

<P><STRONG><a name="[24d]"></a>cwm_find_median</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_find_median))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
</UL>

<P><STRONG><a name="[40e]"></a>cwm_fmin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_fmin))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_quality
</UL>

<P><STRONG><a name="[396]"></a>cwm_get_statics_std_float</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cwm_smoothing_filter.o(i.cwm_get_statics_std_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwm_get_statics_std_float &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biking_acc_stability
</UL>

<P><STRONG><a name="[255]"></a>cwm_gps_filter</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, cwm_gps_filter.o(i.cwm_gps_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = cwm_gps_filter &rArr; gnss_smoother_update &rArr; points_smoother &rArr; cwm_mean_filter &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precision_update
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_info_update
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_filter_update
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_smoother_update
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clone_gps_filter_output
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_filter_input
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSSFilterActivate
</UL>

<P><STRONG><a name="[107]"></a>cwm_gps_filter_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cwm_gps_filter.o(i.cwm_gps_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cwm_gps_filter_init &rArr; set_default_gnss_spatial_info_constraint
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default_gnss_spatial_info_constraint
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_filter_info_buffer_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[224]"></a>cwm_iabs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_iabs))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeDiff
</UL>

<P><STRONG><a name="[230]"></a>cwm_imax</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_imax))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleAccumuStatusTime
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertAccToCount
</UL>

<P><STRONG><a name="[1cb]"></a>cwm_inRange</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_inRange))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedentaryEvent
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMLDTReportEvent
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckValidData
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_mldt_config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeBaseSwicth
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigMode
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strideEstimation
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert_set_config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_report_data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActSetConfig
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_pedometer
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_set_config
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlertCheckEvent
</UL>

<P><STRONG><a name="[254]"></a>cwm_max</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cwm_common_utility_float.o(i.cwm_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cwm_max
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessGetMemSize
</UL>

<P><STRONG><a name="[3fd]"></a>cwm_mean_filter</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cwm_smoothing_filter.o(i.cwm_mean_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cwm_mean_filter &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;points_smoother
</UL>

<P><STRONG><a name="[24e]"></a>cwm_median_crossing</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, cwm_common_utility_float.o(i.cwm_median_crossing))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cwm_median_crossing
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
</UL>

<P><STRONG><a name="[25e]"></a>cwm_metabolism</STRONG> (Thumb, 712 bytes, Stack size 56 bytes, cwm_metabolism.o(i.cwm_metabolism))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = cwm_metabolism &rArr; MetabolismInputCheck &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MetabolismInputCheck
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatePAI
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateEPOC
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAerobicTe
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMetaMetrics
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metabolism_event_update
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMetabolism
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MetabolismActivate
</UL>

<P><STRONG><a name="[2a0]"></a>cwm_metabolism_anaerobic_te_task</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, cwm_metabolism.o(i.cwm_metabolism_anaerobic_te_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cwm_metabolism_anaerobic_te_task &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MetabolsimAnaerobicTask
</UL>

<P><STRONG><a name="[100]"></a>cwm_metabolism_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_metabolism.o(i.cwm_metabolism_enable))
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[29d]"></a>cwm_metabolism_get_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cwm_metabolism.o(i.cwm_metabolism_get_config))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strideEstimation
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MetabolismGetConfig
</UL>

<P><STRONG><a name="[f9]"></a>cwm_metabolism_get_daily_data</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cwm_metabolism.o(i.cwm_metabolism_get_daily_data))
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>cwm_metabolism_get_saved_metrics_info</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cwm_metabolism.o(i.cwm_metabolism_get_saved_metrics_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = cwm_metabolism_get_saved_metrics_info &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>cwm_metabolism_init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, cwm_metabolism.o(i.cwm_metabolism_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cwm_metabolism_init &rArr; UpdateMetaModel
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePAIModel
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMetaModel
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[2eb]"></a>cwm_metabolism_memsize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_metabolism.o(i.cwm_metabolism_memsize))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilityGetMemSize
</UL>

<P><STRONG><a name="[fa]"></a>cwm_metabolism_reset_metrics</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cwm_metabolism.o(i.cwm_metabolism_reset_metrics))
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>cwm_metabolism_rolling_weekly_data</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cwm_metabolism.o(i.cwm_metabolism_rolling_weekly_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cwm_metabolism_rolling_weekly_data
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RollingWeekBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>cwm_metabolism_set_activity_class</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cwm_metabolism.o(i.cwm_metabolism_set_activity_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cwm_metabolism_set_activity_class
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>cwm_metabolism_set_activity_counts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_metabolism.o(i.cwm_metabolism_set_activity_counts))
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(i.UtilityCreateObject)
</UL>
<P><STRONG><a name="[29f]"></a>cwm_metabolism_set_config</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, cwm_metabolism.o(i.cwm_metabolism_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = cwm_metabolism_set_config &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePAIModel
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMetaModel
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MetabolismSetConfig
</UL>

<P><STRONG><a name="[f5]"></a>cwm_metabolism_set_max_hr</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, cwm_metabolism.o(i.cwm_metabolism_set_max_hr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = cwm_metabolism_set_max_hr &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>cwm_metabolism_set_min_hr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cwm_metabolism.o(i.cwm_metabolism_set_min_hr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = cwm_metabolism_set_min_hr &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>cwm_metabolism_set_resting_hr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cwm_metabolism.o(i.cwm_metabolism_set_resting_hr))
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>cwm_metabolism_set_saved_metrics_info</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cwm_metabolism.o(i.cwm_metabolism_set_saved_metrics_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = cwm_metabolism_set_saved_metrics_info &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>cwm_metabolism_set_touch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_metabolism.o(i.cwm_metabolism_set_touch))
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[2a1]"></a>cwm_metabolism_update_metrics</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cwm_metabolism.o(i.cwm_metabolism_update_metrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cwm_metabolism_update_metrics &rArr; UpdateTeAndRecoveryTime &rArr; GetRecoveryTime &rArr; GetInterpolatedValue
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTeAndRecoveryTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MetabolsimUpdateMetrics
</UL>

<P><STRONG><a name="[401]"></a>cwm_movingAvg_SQR</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, cwm_common_utility_float.o(i.cwm_movingAvg_SQR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cwm_movingAvg_SQR
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[2b0]"></a>cwm_pedometer</STRONG> (Thumb, 1270 bytes, Stack size 64 bytes, cwm_pedometer_watch_activity.o(i.cwm_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = cwm_pedometer &rArr; GetStepCounter &rArr; FindSteps &rArr; cwm_bubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_movingAvg_SQR
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_calAvgMaxMin
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_atan2
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_swapf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strideEstimation
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paceEstimation
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isFalseTrigger
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedoOutputUpdate
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepFrequency
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepFilter
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepCounter
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElevationProcess
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAxisAccMess
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccAnalysis
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerActivate
</UL>

<P><STRONG><a name="[24b]"></a>cwm_quick_sort</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, cwm_common_utility_float.o(i.cwm_quick_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = cwm_quick_sort &rArr;  cwm_quick_sort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_swapf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_quick_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_quick_sort
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
</UL>

<P><STRONG><a name="[352]"></a>cwm_resample</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cwm_resample.o(i.cwm_resample))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cwm_resample &rArr; cwm_resample_run &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_resample_run
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_proc
</UL>

<P><STRONG><a name="[14f]"></a>cwm_rocking_detection</STRONG> (Thumb, 1290 bytes, Stack size 32 bytes, cwm_rocking_detection.o(i.cwm_rocking_detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cwm_rocking_detection &rArr; rd_iasin &rArr; rd_ipow
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_isqrt
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_iasin
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_iabs
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_rocking_detection
</UL>

<P><STRONG><a name="[3f5]"></a>cwm_rolling_statistic_info_update</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, cwm_smoothing_filter.o(i.cwm_rolling_statistic_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cwm_rolling_statistic_info_update &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_gps_output_update
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_update
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_elevation_estimation
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_update
</UL>

<P><STRONG><a name="[3f0]"></a>cwm_rolling_statistic_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cwm_smoothing_filter.o(i.cwm_rolling_statistic_init))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_buffer_reset
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_filter_info_buffer_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_biking
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_elevation_estimation
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_elevation_estimation_init
</UL>

<P><STRONG><a name="[3ea]"></a>cwm_rolling_statistic_reset</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cwm_smoothing_filter.o(i.cwm_rolling_statistic_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwm_rolling_statistic_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_gps_output_update
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
</UL>

<P><STRONG><a name="[2d9]"></a>cwm_sedentary_activity</STRONG> (Thumb, 1246 bytes, Stack size 64 bytes, cwm_sedentary_activity.o(i.cwm_sedentary_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = cwm_sedentary_activity &rArr; HandleSedenActReportFlow &rArr; HandleSedenSystemEvent &rArr; HandleSleepStop &rArr; OutputStopSleepTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStartSleepInitTime
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncLowActivityToScore
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActDebugLogs
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedentary
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedenAct
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWakeCondition
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStatic
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSleepCondition
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStopEvent
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStand
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSleepStatus
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReminderAndRelease
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNotice
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleModeSwitch
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLightDeepTime
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleHeartRate
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleFakesleep
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleBackToSleep
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleAlarmAndNonstatic
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectHighActivity
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumulateSleepTime
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActActivate
</UL>

<P><STRONG><a name="[11d]"></a>cwm_sedentary_activity_get_sleep_accumulated_time</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cwm_sedentary_activity.o(i.cwm_sedentary_activity_get_sleep_accumulated_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = cwm_sedentary_activity_get_sleep_accumulated_time &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleAccumuStatusTime
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>cwm_sedentary_activity_get_sleep_quality</STRONG> (Thumb, 512 bytes, Stack size 72 bytes, cwm_sedentary_activity.o(i.cwm_sedentary_activity_get_sleep_quality))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cwm_sedentary_activity_get_sleep_quality &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fmin
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>cwm_sedentary_activity_get_sleep_report_data</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, cwm_sedentary_activity.o(i.cwm_sedentary_activity_get_sleep_report_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = cwm_sedentary_activity_get_sleep_report_data &rArr; HandleFakesleep &rArr; ResetActScoreSleep &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleFakesleep
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>cwm_sedentary_activity_release_reminder</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cwm_sedentary_activity.o(i.cwm_sedentary_activity_release_reminder))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = cwm_sedentary_activity_release_reminder &rArr; ResetSedentary &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedentary
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>cwm_sedentary_activity_reset_nap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cwm_sedentary_activity.o(i.cwm_sedentary_activity_reset_nap))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = cwm_sedentary_activity_reset_nap &rArr; ResetActScoreSleep &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetActScoreSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>cwm_sedentary_activity_reset_sedentary</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cwm_sedentary_activity.o(i.cwm_sedentary_activity_reset_sedentary))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = cwm_sedentary_activity_reset_sedentary &rArr; ResetSedentary &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedentary
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>cwm_sedentary_activity_reset_sleep</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cwm_sedentary_activity.o(i.cwm_sedentary_activity_reset_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = cwm_sedentary_activity_reset_sleep &rArr; ResetActScoreSleep &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetActScoreSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>cwm_sedentary_activity_reset_stand</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cwm_sedentary_activity.o(i.cwm_sedentary_activity_reset_stand))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = cwm_sedentary_activity_reset_stand &rArr; ResetStand &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetStand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>cwm_sedentary_activity_set_ap_status</STRONG> (Thumb, 294 bytes, Stack size 136 bytes, cwm_sedentary_activity.o(i.cwm_sedentary_activity_set_ap_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = cwm_sedentary_activity_set_ap_status &rArr; OutputEndNoticeEvent &rArr; OutputStopSleepTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputOperationTime
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputEndNoticeEvent
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateToUnixTime
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[40f]"></a>cwm_sin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cwm_common_utility_float.o(i.cwm_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cwm_sin &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
</UL>

<P><STRONG><a name="[228]"></a>cwm_sqrt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeanStd
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCorrelationCoef
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_absolute_static
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_get_statics_std_float
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_biking_input_setting
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biking_temp_update
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActDebugLogs
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleHeartRate
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_info_update
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectASData
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_update
</UL>

<P><STRONG><a name="[395]"></a>cwm_statics_data_update_float</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, cwm_smoothing_filter.o(i.cwm_statics_data_update_float))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biking_acc_stability
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_update
</UL>

<P><STRONG><a name="[3e0]"></a>cwm_swapf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_swapf))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_bubbleSort
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_quick_sort
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[3f1]"></a>cwm_swapint16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cwm_common_utility_float.o(i.cwm_swapint16))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_bubbleSort
</UL>

<P><STRONG><a name="[150]"></a>cwm_watch_handupdown</STRONG> (Thumb, 4302 bytes, Stack size 72 bytes, cwm_watch_handupdown_extMem.o(i.cwm_watch_handupdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cwm_watch_handupdown &rArr; reset_cwm_watch_handupdown &rArr; math_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handup
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_cwm_watch_handupdown
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fabs
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_iabs
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Low_Pass_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_watch_hand_up_down
</UL>

<P><STRONG><a name="[245]"></a>cwm_xlnSmall</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, cwm_common_utility_float.o(i.cwm_xlnSmall))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cwm_xlnSmall
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElevationProcess
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_update
</UL>

<P><STRONG><a name="[416]"></a>datalist_addhead</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, datalist.o(i.datalist_addhead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = datalist_addhead &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_request
</UL>

<P><STRONG><a name="[30b]"></a>datalist_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, datalist.o(i.datalist_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = datalist_create &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linkedlist_get
</UL>

<P><STRONG><a name="[444]"></a>datalist_getnode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, datalist.o(i.datalist_getnode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = datalist_getnode
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_request
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_active
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_hwApi
</UL>

<P><STRONG><a name="[445]"></a>datalist_getnodedata</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, datalist.o(i.datalist_getnodedata))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_active
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_hwApi
</UL>

<P><STRONG><a name="[448]"></a>datalist_gothrough</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, datalist.o(i.datalist_gothrough))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = datalist_gothrough
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_clients_components_suspended
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_clients_components_resume
</UL>

<P><STRONG><a name="[1d4]"></a>disable_biking_pause</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_biking.o(i.disable_biking_pause))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BikingResume
</UL>

<P><STRONG><a name="[328]"></a>disable_cwm_absolute_static</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, cwm_absolute_static.o(i.disable_cwm_absolute_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = disable_cwm_absolute_static
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_absolute_static
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
</UL>

<P><STRONG><a name="[322]"></a>disable_cwm_rocking_detection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_rocking_detection.o(i.disable_cwm_rocking_detection))
<BR><BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rocking_detection_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
</UL>

<P><STRONG><a name="[325]"></a>disable_cwm_watch_handupdown</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_watch_handupdown_extMem.o(i.disable_cwm_watch_handupdown))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
</UL>

<P><STRONG><a name="[10]"></a>donothing</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, algoattribute_emptyobj.o(i.donothing))
<BR>[Address Reference Count : 1]<UL><LI> algoattribute_emptyobj.o(.data)
</UL>
<P><STRONG><a name="[167]"></a>doubleArrayM2IntString</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, commonlib.o(i.doubleArrayM2IntString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = doubleArrayM2IntString &rArr; doubleM2Int &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleM2Int
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
</UL>

<P><STRONG><a name="[419]"></a>doubleM2Int</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, commonlib.o(i.doubleM2Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = doubleM2Int &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalePn2num
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleArrayM2IntString
</UL>

<P><STRONG><a name="[41d]"></a>drvListAdd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, listdrv.o(i.drvListAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = drvListAdd &rArr; listdrvAdd &rArr; listdrvNewNode &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listdrvAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableDriver
</UL>

<P><STRONG><a name="[41f]"></a>drvListFind</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, listdrv.o(i.drvListFind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drvListFind &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDrvInit
</UL>

<P><STRONG><a name="[420]"></a>drvListInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, listdrv.o(i.drvListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drvListInit &rArr; listdrvNewNode &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listdrvNewNode
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableDriver
</UL>

<P><STRONG><a name="[a1]"></a>drv_custom</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, drv_custom.o(i.drv_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_custom &rArr; sensorRegister &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorRegister
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config_drv.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>ebdStr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commonlib.o(i.ebdStr))
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoSupportList
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDrvInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apis_scl_common
</UL>

<P><STRONG><a name="[347]"></a>ebdStrAmh</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, amh_common.o(i.ebdStrAmh))
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_rockingdetection_new
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_handupdownwatch_new
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_ar_new
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_absolute_static_new
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[4fe]"></a>empty_obj_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, algoattribute_emptyobj.o(i.empty_obj_new))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_stand_new
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_shake_new
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_falling_detection_new
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_cust_algo1_new
</UL>

<P><STRONG><a name="[201]"></a>enableDriver</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, config_drv.o(i.enableDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = enableDriver &rArr; drvListAdd &rArr; listdrvAdd &rArr; listdrvNewNode &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvListInit
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_RegisterSensor
</UL>

<P><STRONG><a name="[1d3]"></a>enable_biking_pause</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_biking.o(i.enable_biking_pause))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BikingPause
</UL>

<P><STRONG><a name="[327]"></a>enable_cwm_absolute_static</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cwm_absolute_static.o(i.enable_cwm_absolute_static))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_absolute_static
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cwm_absolute_static
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
</UL>

<P><STRONG><a name="[12e]"></a>enable_cwm_biking</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_biking.o(i.enable_cwm_biking))
<BR>[Address Reference Count : 1]<UL><LI> cwm_biking_interface.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>enable_cwm_pedometer</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cwm_pedometer_watch_activity.o(i.enable_cwm_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enable_cwm_pedometer
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_pedometer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[351]"></a>enable_cwm_resample</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_resample.o(i.enable_cwm_resample))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_init
</UL>

<P><STRONG><a name="[321]"></a>enable_cwm_rocking_detection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_rocking_detection.o(i.enable_cwm_rocking_detection))
<BR><BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rocking_detection_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
</UL>

<P><STRONG><a name="[125]"></a>enable_cwm_sedentary_activity</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_sedentary_activity.o(i.enable_cwm_sedentary_activity))
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[324]"></a>enable_cwm_watch_handupdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cwm_watch_handupdown_extMem.o(i.enable_cwm_watch_handupdown))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
</UL>

<P><STRONG><a name="[1f1]"></a>eventRegisterCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.eventRegisterCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[168]"></a>floatArrayM2IntString</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, commonlib.o(i.floatArrayM2IntString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = floatArrayM2IntString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatM2Int
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProjPrepareListen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
</UL>

<P><STRONG><a name="[42c]"></a>floatM2Int</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, commonlib.o(i.floatM2Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = floatM2Int
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalePn2num
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatArrayM2IntString
</UL>

<P><STRONG><a name="[5c]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fputc &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[1fb]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_free
</UL>

<P><STRONG><a name="[18f]"></a>getAmhTime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, amh_time.o(i.getAmhTime))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_proc
</UL>

<P><STRONG><a name="[364]"></a>getChipInfo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, chip_manager.o(i.getChipInfo), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apis_scl_common
</UL>

<P><STRONG><a name="[1ea]"></a>getChipManager</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, chip_manager.o(i.getChipManager))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[2db]"></a>getConfig_cwm_sedentary_activity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cwm_sedentary_activity.o(i.getConfig_cwm_sedentary_activity))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActGetConfig
</UL>

<P><STRONG><a name="[2c5]"></a>getCustomSensIdx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proj_prepare.o(i.getCustomSensIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getCustomSensIdx &rArr; getSenTypeOrIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSenTypeOrIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProjPrepareListen
</UL>

<P><STRONG><a name="[238]"></a>getDrvInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config_drv.o(i.getDrvInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getDrvInit &rArr; drvListFind &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStr
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvListFind
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInitFromEnabledList
</UL>

<P><STRONG><a name="[2f1]"></a>getInternalSensTypeId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proj_prepare.o(i.getInternalSensTypeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getInternalSensTypeId &rArr; getSenTypeOrIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSenTypeOrIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CWM_Sensor_Enable
</UL>

<P><STRONG><a name="[1d8]"></a>getReqSensor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.getReqSensor))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_AP_SensorListen
</UL>

<P><STRONG><a name="[3bf]"></a>getWhiteList</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, whitelist_autogen.o(i.getWhiteList))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_white_list_v2
</UL>

<P><STRONG><a name="[2c3]"></a>get_analysis_info_cwm_pedometer</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.get_analysis_info_cwm_pedometer))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSyncInfo
</UL>

<P><STRONG><a name="[2b3]"></a>get_config_cwm_pedometer</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.get_config_cwm_pedometer))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerGetConfig
</UL>

<P><STRONG><a name="[2b9]"></a>get_pause_config_cwm_pedometer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.get_pause_config_cwm_pedometer))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerReportSteps
</UL>

<P><STRONG><a name="[2b2]"></a>get_steps_filtered_cwm_pedometer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.get_steps_filtered_cwm_pedometer))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerActivate
</UL>

<P><STRONG><a name="[203]"></a>hwSensorListAdd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, listdrv.o(i.hwSensorListAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hwSensorListAdd &rArr; hwsensorListAdd &rArr;  hwsensorListAdd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_RegisterSensor
</UL>

<P><STRONG><a name="[202]"></a>hwSensorListInit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, listdrv.o(i.hwSensorListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hwSensorListInit &rArr; hwsensorListNewNode &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListNewNode
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_RegisterSensor
</UL>

<P><STRONG><a name="[1e0]"></a>hwSensorListLength</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, listdrv.o(i.hwSensorListLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwSensorListLength
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_DiscoverRegisterSensor
</UL>

<P><STRONG><a name="[1e5]"></a>hwSensorListRemove</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, listdrv.o(i.hwSensorListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hwSensorListRemove &rArr; hwsensorListRemove &rArr; sys_memFree &rArr; maaFree &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_DiscoverRegisterSensor
</UL>

<P><STRONG><a name="[315]"></a>hw_client_components_active</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hw_components.o(i.hw_client_components_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hw_client_components_active &rArr; _linkedlist_get &rArr; datalist_create &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalist_getnodedata
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalist_getnode
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHwPowers
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linkedlist_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setoperated
</UL>

<P><STRONG><a name="[313]"></a>hw_client_components_change_hwApi</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_components.o(i.hw_client_components_change_hwApi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hw_client_components_change_hwApi &rArr; hw_client_components_hwApi &rArr; _linkedlist_get &rArr; datalist_create &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_hwApi
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setoperated
</UL>

<P><STRONG><a name="[314]"></a>hw_client_components_get_hwApi</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_components.o(i.hw_client_components_get_hwApi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hw_client_components_get_hwApi &rArr; hw_client_components_hwApi &rArr; _linkedlist_get &rArr; datalist_create &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_hwApi
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setoperated
</UL>

<P><STRONG><a name="[345]"></a>hw_client_components_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_components.o(i.hw_client_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_client_components_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[310]"></a>hw_client_components_request</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hw_components.o(i.hw_client_components_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hw_client_components_request &rArr; datalist_addhead &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalist_getnode
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalist_addhead
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linkedlist_get
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memFree
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setoperated
</UL>

<P><STRONG><a name="[312]"></a>hw_clients_components_resume</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_components.o(i.hw_clients_components_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hw_clients_components_resume &rArr; _linkedlist_get &rArr; datalist_create &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalist_gothrough
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linkedlist_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setoperated
</UL>

<P><STRONG><a name="[311]"></a>hw_clients_components_suspended</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_components.o(i.hw_clients_components_suspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hw_clients_components_suspended &rArr; _linkedlist_get &rArr; datalist_create &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalist_gothrough
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linkedlist_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setoperated
</UL>

<P><STRONG><a name="[77]"></a>in_pin_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board_nordic.o(i.in_pin_handler))
<BR>[Address Reference Count : 1]<UL><LI> board_nordic.o(i.gpio_init)
</UL>
<P><STRONG><a name="[44b]"></a>init_cwm_absolute_static</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cwm_absolute_static.o(i.init_cwm_absolute_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_cwm_absolute_static
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_absolute_static
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[397]"></a>init_cwm_mean_variance_float</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cwm_smoothing_filter.o(i.init_cwm_mean_variance_float))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biking_acc_stability
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_update
</UL>

<P><STRONG><a name="[111]"></a>init_cwm_pedometer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cwm_pedometer_watch_activity.o(i.init_cwm_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_cwm_pedometer &rArr; enable_cwm_pedometer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_pedometer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[350]"></a>init_cwm_resample</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, cwm_resample.o(i.init_cwm_resample))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_cwm_resample
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_init
</UL>

<P><STRONG><a name="[44c]"></a>init_cwm_rocking_detection</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cwm_rocking_detection.o(i.init_cwm_rocking_detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_cwm_rocking_detection
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rocking_detection_reset
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[124]"></a>init_cwm_sedentary_activity</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cwm_sedentary_activity.o(i.init_cwm_sedentary_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_cwm_sedentary_activity
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[44d]"></a>init_cwm_watch_handupdown</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, cwm_watch_handupdown_extMem.o(i.init_cwm_watch_handupdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_cwm_watch_handupdown
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[3b6]"></a>input_data_valid_check</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, cwm_smoothing_filter.o(i.input_data_valid_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = input_data_valid_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_elevation_estimation_input
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_estimation_update
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sensor_inputs
</UL>

<P><STRONG><a name="[a0]"></a>input_sensor_manager</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, input_sensor_manager.o(i.input_sensor_manager))
<BR>[Address Reference Count : 1]<UL><LI> config_drv.o(.constdata)
</UL>
<P><STRONG><a name="[211]"></a>isZeroFlt</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, cwm_common_utility_float.o(i.isZeroFlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAxisFeatures
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMovingAvg
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_mldt_config
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedenAct
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strideEstimation
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnssProcessing
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepCounter
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MetabolismInputCheck
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetGNSSInfo
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
</UL>

<P><STRONG><a name="[469]"></a>lsm6dso_block_data_update_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_block_data_update_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46c]"></a>lsm6dso_device_id_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dso_reg.o(i.lsm6dso_device_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsm6dso_device_id_get &rArr; lsm6dso_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46d]"></a>lsm6dso_fifo_data_level_get</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_fifo_data_level_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_fifo_data_level_get &rArr; lsm6dso_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46e]"></a>lsm6dso_fifo_gy_batch_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_fifo_gy_batch_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_fifo_gy_batch_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46f]"></a>lsm6dso_fifo_mode_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_fifo_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_fifo_mode_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[470]"></a>lsm6dso_fifo_out_raw_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dso_reg.o(i.lsm6dso_fifo_out_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsm6dso_fifo_out_raw_get &rArr; lsm6dso_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[471]"></a>lsm6dso_fifo_sensor_tag_get</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_fifo_sensor_tag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_fifo_sensor_tag_get &rArr; lsm6dso_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[472]"></a>lsm6dso_fifo_watermark_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_fifo_watermark_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_fifo_watermark_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[473]"></a>lsm6dso_fifo_wtm_flag_get</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_fifo_wtm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_fifo_wtm_flag_get &rArr; lsm6dso_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[474]"></a>lsm6dso_fifo_xl_batch_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_fifo_xl_batch_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_fifo_xl_batch_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[488]"></a>lsm6dso_from_fs16_to_mg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lsm6dso_reg.o(i.lsm6dso_from_fs16_to_mg))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[489]"></a>lsm6dso_from_fs2000_to_mdps</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lsm6dso_reg.o(i.lsm6dso_from_fs2000_to_mdps))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[475]"></a>lsm6dso_fsm_data_rate_get</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_fsm_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lsm6dso_fsm_data_rate_get &rArr; lsm6dso_mem_bank_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
</UL>

<P><STRONG><a name="[477]"></a>lsm6dso_fsm_enable_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lsm6dso_reg.o(i.lsm6dso_fsm_enable_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lsm6dso_fsm_enable_get &rArr; lsm6dso_mem_bank_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
</UL>

<P><STRONG><a name="[478]"></a>lsm6dso_gy_data_rate_set</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, lsm6dso_reg.o(i.lsm6dso_gy_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lsm6dso_gy_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; lsm6dso_mem_bank_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_enable_get
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[479]"></a>lsm6dso_gy_full_scale_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_gy_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_gy_full_scale_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47a]"></a>lsm6dso_i3c_disable_set</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_i3c_disable_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_i3c_disable_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[476]"></a>lsm6dso_mem_bank_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_mem_bank_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_mem_bank_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_enable_get
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_data_rate_get
</UL>

<P><STRONG><a name="[46a]"></a>lsm6dso_read_reg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_full_scale_set
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_reset_set
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_reset_get
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_i3c_disable_set
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_full_scale_set
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_xl_batch_set
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_wtm_flag_get
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_watermark_set
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_sensor_tag_get
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_out_raw_get
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_mode_set
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_gy_batch_set
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_data_level_get
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_device_id_get
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_block_data_update_set
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_mem_bank_set
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_enable_get
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_data_rate_get
</UL>

<P><STRONG><a name="[47b]"></a>lsm6dso_reset_get</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_reset_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_reset_get &rArr; lsm6dso_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47c]"></a>lsm6dso_reset_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_reset_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_reset_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46b]"></a>lsm6dso_write_reg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dso_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_full_scale_set
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_reset_set
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_i3c_disable_set
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_full_scale_set
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_xl_batch_set
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_watermark_set
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_mode_set
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_gy_batch_set
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_block_data_update_set
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_mem_bank_set
</UL>

<P><STRONG><a name="[47d]"></a>lsm6dso_xl_data_rate_set</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, lsm6dso_reg.o(i.lsm6dso_xl_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lsm6dso_xl_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; lsm6dso_mem_bank_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_enable_get
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47e]"></a>lsm6dso_xl_full_scale_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lsm6dso_reg.o(i.lsm6dso_xl_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_xl_full_scale_set &rArr; lsm6dso_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a2]"></a>magCalibrationProcess</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, input_sensor_manager.o(i.magCalibrationProcess))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_Mag
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 1424 bytes, Stack size 376 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = main &rArr; CWM_CustomSensorInput &rArr; sensorInput &rArr; doubleArrayM2IntString &rArr; doubleM2Int &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_full_scale_set
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_reset_set
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_reset_get
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_i3c_disable_set
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_full_scale_set
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_from_fs2000_to_mdps
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_from_fs16_to_mg
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_xl_batch_set
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_wtm_flag_get
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_watermark_set
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_sensor_tag_get
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_out_raw_get
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_mode_set
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_gy_batch_set
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_data_level_get
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_device_id_get
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_block_data_update_set
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_dbgPrintf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_GetTimeNs
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPreInit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_GetNextActionDuration_ns
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_Start
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_End
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_delay
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[200]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_malloc
</UL>

<P><STRONG><a name="[51a]"></a>memsize_cwm_absolute_static</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_absolute_static.o(i.memsize_cwm_absolute_static))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[1d2]"></a>memsize_cwm_biking</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_biking.o(i.memsize_cwm_biking))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BikingGetMemSize
</UL>

<P><STRONG><a name="[2ec]"></a>memsize_cwm_elevation_estimation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_elevation_estimation.o(i.memsize_cwm_elevation_estimation))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilityGetMemSize
</UL>

<P><STRONG><a name="[2ed]"></a>memsize_cwm_gps_filter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_gps_filter.o(i.memsize_cwm_gps_filter))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtilityGetMemSize
</UL>

<P><STRONG><a name="[2b4]"></a>memsize_cwm_pedometer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.memsize_cwm_pedometer))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerGetMemSize
</UL>

<P><STRONG><a name="[34f]"></a>memsize_cwm_resample</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_resample.o(i.memsize_cwm_resample))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_init
</UL>

<P><STRONG><a name="[517]"></a>memsize_cwm_rocking_detection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_rocking_detection.o(i.memsize_cwm_rocking_detection))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[262]"></a>memsize_cwm_sedentary_activity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_sedentary_activity.o(i.memsize_cwm_sedentary_activity))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSedenActMemSize
</UL>

<P><STRONG><a name="[519]"></a>memsize_cwm_watch_handupdown</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_watch_handupdown_extMem.o(i.memsize_cwm_watch_handupdown))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[170]"></a>mgrUpdateBySchedule</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, input_sensor_manager.o(i.mgrUpdateBySchedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mgrUpdateBySchedule &rArr; osEnqueuePrivateEvtFromIsr &rArr; EnqueueFromIsr &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueuePrivateEvtFromIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customDrvPollingTimeout
</UL>

<P><STRONG><a name="[468]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[466]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[3a9]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[493]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[41c]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[494]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[499]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[49b]"></a>nrf_balloc_alloc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_idx2block
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[49d]"></a>nrf_balloc_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_block2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[4d4]"></a>nrf_balloc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[49f]"></a>nrf_drv_clock_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wdt_started
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[4a3]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_lfclk_request &rArr; nrfx_clock_lfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[449]"></a>nrf_drv_twi_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = nrf_drv_twi_init &rArr; nrfx_twim_init &rArr; nrfx_prs_acquire &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[37a]"></a>nrf_drv_uart_init</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[4af]"></a>nrf_fprintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[3ac]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[4b0]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[4c0]"></a>nrf_log_backend_add</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_backend_add
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backend_id_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[4c2]"></a>nrf_log_backend_rtt_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[4c3]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 242 bytes, Stack size 112 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[506]"></a>nrf_log_color_id_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[492]"></a>nrf_log_default_backends_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_log_default_backends.o(i.nrf_log_default_backends_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_default_backends_init &rArr; nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nordic_system_init
</UL>

<P><STRONG><a name="[367]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 748 bytes, Stack size 80 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[368]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[4c7]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[491]"></a>nrf_log_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nordic_system_init
</UL>

<P><STRONG><a name="[48f]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[4d2]"></a>nrf_log_module_name_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[366]"></a>nrf_log_panic</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[4c6]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[4ca]"></a>nrf_memobj_alloc</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[4d3]"></a>nrf_memobj_free</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[4c4]"></a>nrf_memobj_get</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[4d0]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[4c8]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[4c5]"></a>nrf_memobj_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_read &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[4cb]"></a>nrf_memobj_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_write &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[4d1]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[4a1]"></a>nrfx_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[4a0]"></a>nrfx_clock_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[4a5]"></a>nrfx_clock_lfclk_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_lfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[43e]"></a>nrfx_gpiote_in_event_enable</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_gpiote_in_event_enable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[43d]"></a>nrfx_gpiote_in_init</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrfx_gpiote_in_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[43c]"></a>nrfx_gpiote_init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrfx_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_present_check
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[4e5]"></a>nrfx_prs_acquire</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[4e7]"></a>nrfx_rtc_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrfx_rtc.o(i.nrfx_rtc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_rtc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[50e]"></a>nrfx_rtc_init</STRONG> (Thumb, 190 bytes, Stack size 28 bytes, nrfx_rtc.o(i.nrfx_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_rtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[4e9]"></a>nrfx_rtc_overflow_enable</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrfx_rtc.o(i.nrfx_rtc_overflow_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_rtc_overflow_enable &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[44a]"></a>nrfx_twim_enable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrfx_twim.o(i.nrfx_twim_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_twim_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[4a7]"></a>nrfx_twim_init</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, nrfx_twim.o(i.nrfx_twim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nrfx_twim_init &rArr; nrfx_prs_acquire &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[1fe]"></a>nrfx_twim_rx</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, nrfx_twim.o(i.nrfx_twim_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nrfx_twim_rx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cRead
</UL>

<P><STRONG><a name="[4a8]"></a>nrfx_twim_tx</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, nrfx_twim.o(i.nrfx_twim_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>

<P><STRONG><a name="[4ef]"></a>nrfx_twim_xfer</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nrfx_twim.o(i.nrfx_twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_rx
</UL>

<P><STRONG><a name="[9b]"></a>nrfx_uart_0_irq_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrfx_uart_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uart_0_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[4aa]"></a>nrfx_uart_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[4ac]"></a>nrfx_uart_rx</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[4ae]"></a>nrfx_uart_tx</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[37e]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[9c]"></a>nrfx_uarte_0_irq_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrfx_uarte_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uarte_0_irq_handler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uarte.o(.constdata)
</UL>
<P><STRONG><a name="[4a9]"></a>nrfx_uarte_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrfx_uarte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[4ab]"></a>nrfx_uarte_rx</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrfx_uarte_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_uarte_rx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_disable
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[4ad]"></a>nrfx_uarte_tx</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[37d]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[343]"></a>obj_absolute_static_new</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, algo_proc_absolute_static.o(i.obj_absolute_static_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = obj_absolute_static_new &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStrAmh
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[33d]"></a>obj_ar_new</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, algo_proc_activity_recognition.o(i.obj_ar_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = obj_ar_new &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStrAmh
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[342]"></a>obj_cust_algo1_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, algo_proc_cust_algo1.o(i.obj_cust_algo1_new))
<BR><BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_obj_new
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[341]"></a>obj_falling_detection_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, algo_proc_falling_detection.o(i.obj_falling_detection_new))
<BR><BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_obj_new
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[33e]"></a>obj_handupdownwatch_new</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, algo_proc_watch_hand_up_down.o(i.obj_handupdownwatch_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = obj_handupdownwatch_new &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStrAmh
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[33f]"></a>obj_rockingdetection_new</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, algo_proc_rocking_detection.o(i.obj_rockingdetection_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = obj_rockingdetection_new &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStrAmh
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[340]"></a>obj_shake_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, algo_proc_shake.o(i.obj_shake_new))
<BR><BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_obj_new
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[344]"></a>obj_stand_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, algo_proc_stand.o(i.obj_stand_new))
<BR><BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_obj_new
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
</UL>

<P><STRONG><a name="[1f2]"></a>osEnqueueCommon</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.osEnqueueCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osEnqueueCommon &rArr; Enqueue &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCallBack_5ms
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCallBack_40ms
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCallBack_20ms
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCallBack_10ms
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCallBack_100ms
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCallBack_1000ms
</UL>

<P><STRONG><a name="[500]"></a>osSubscribeEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scheduler.o(i.osSubscribeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
</UL>

<P><STRONG><a name="[502]"></a>osUnSubscribeEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scheduler.o(i.osUnSubscribeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osUnSubscribeEvent &rArr; unSubscribeEvent &rArr; clst_mv_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unSubscribeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
</UL>

<P><STRONG><a name="[1ee]"></a>projAlgoInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, proj_algo.o(i.projAlgoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = projAlgoInit &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlgoInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMH_Custom
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tidAlloc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
</UL>

<P><STRONG><a name="[2b8]"></a>reset_variables_cwm_pedometer</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.reset_variables_cwm_pedometer))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerReportSteps
</UL>

<P><STRONG><a name="[50b]"></a>rsa_decrypt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cypher.o(i.rsa_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rsa_decrypt &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v2
</UL>

<P><STRONG><a name="[29b]"></a>sensorDisable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hal_sensor.o(i.sensorDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensorDisable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_node
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_custom_action
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Sync
</UL>

<P><STRONG><a name="[29a]"></a>sensorEnable</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, hal_sensor.o(i.sensorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_node
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_custom_action
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Sync
</UL>

<P><STRONG><a name="[1dc]"></a>sensorInput_Fifo_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, input_sensor_manager.o(i.sensorInput_Fifo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sensorInput_Fifo_Init &rArr; sys_memFree &rArr; maaFree &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_Init
</UL>

<P><STRONG><a name="[298]"></a>sensorIoCtl</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, hal_sensor.o(i.sensorIoCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_node
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempIoctl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onChargingIoctl
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offBodyIoctl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magIoctl
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrIoctl
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroIoctl
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnssIoctl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baroIoctl
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anyMotionIoctl
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accIoctl
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_custom_action
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Ioctl
</UL>

<P><STRONG><a name="[1ad]"></a>sensorRegister</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, hal_sensor.o(i.sensorRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sensorRegister &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getInternalFeatureDbg
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_leng
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_add_node
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMH_Custom
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_amh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_custom
</UL>

<P><STRONG><a name="[299]"></a>sensorSetRate</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hal_sensor.o(i.sensorSetRate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_node
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SetRate
</UL>

<P><STRONG><a name="[510]"></a>sensor_custom_action</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, proj_sensor.o(i.sensor_custom_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorEnable
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorDisable
</UL>

<P><STRONG><a name="[16f]"></a>setCustDrvPollingDataReady</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, input_sensor_manager.o(i.setCustDrvPollingDataReady))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempStepPower
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magStepPower
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrStepPower
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroStepPower
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnssStepPower
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baroStepPower
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accStepPower
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customDrvPollingTimeout
</UL>

<P><STRONG><a name="[334]"></a>setHrRange_age</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, amh_common.o(i.setHrRange_age))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_metabolism
</UL>

<P><STRONG><a name="[2bb]"></a>set_calories_cwm_pedometer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.set_calories_cwm_pedometer))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetNormalInfo
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetCaloriesInfo
</UL>

<P><STRONG><a name="[32e]"></a>set_config_cwm_absolute_static</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, cwm_absolute_static.o(i.set_config_cwm_absolute_static))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set
</UL>

<P><STRONG><a name="[1d5]"></a>set_config_cwm_biking</STRONG> (Thumb, 370 bytes, Stack size 80 bytes, cwm_biking.o(i.set_config_cwm_biking))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = set_config_cwm_biking
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BikingSetConfig
</UL>

<P><STRONG><a name="[248]"></a>set_config_cwm_elevation_estimation</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cwm_elevation_estimation.o(i.set_config_cwm_elevation_estimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_config_cwm_elevation_estimation
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElevationSetConfig
</UL>

<P><STRONG><a name="[256]"></a>set_config_cwm_gps_filter</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cwm_gps_filter.o(i.set_config_cwm_gps_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_config_cwm_gps_filter &rArr; gnss_filter_info_buffer_init &rArr; gnss_spatial_info_buffer_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_filter_info_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSSFilterSetConfig
</UL>

<P><STRONG><a name="[2bc]"></a>set_config_cwm_pedometer</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, cwm_pedometer_watch_activity.o(i.set_config_cwm_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_config_cwm_pedometer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetConfig
</UL>

<P><STRONG><a name="[518]"></a>set_config_cwm_rocking_detection</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cwm_rocking_detection.o(i.set_config_cwm_rocking_detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_config_cwm_rocking_detection
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[32c]"></a>set_config_cwm_watch_handupdown</STRONG> (Thumb, 444 bytes, Stack size 12 bytes, cwm_watch_handupdown_extMem.o(i.set_config_cwm_watch_handupdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_config_cwm_watch_handupdown
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set
</UL>

<P><STRONG><a name="[2bd]"></a>set_gnss_info_cwm_pedometer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.set_gnss_info_cwm_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = set_gnss_info_cwm_pedometer &rArr; gnssProcessing &rArr; isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnssProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetGNSSInfo
</UL>

<P><STRONG><a name="[2c1]"></a>set_output_cwm_pedometer</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.set_output_cwm_pedometer))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetOutputSteps
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetOutputDistance
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetNormalInfo
</UL>

<P><STRONG><a name="[2ae]"></a>set_sensors_cwm_pedometer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.set_sensors_cwm_pedometer))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerActivate
</UL>

<P><STRONG><a name="[2c4]"></a>set_steps_filtered_cwm_pedometer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.set_steps_filtered_cwm_pedometer))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSyncInfo
</UL>

<P><STRONG><a name="[2c2]"></a>set_tm_calib_cwm_pedometer</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, cwm_pedometer_watch_activity.o(i.set_tm_calib_cwm_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_tm_calib_cwm_pedometer
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerUpdateInfo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetTmConfig
</UL>

<P><STRONG><a name="[51b]"></a>sha1digest</STRONG> (Thumb, 578 bytes, Stack size 568 bytes, commonlib.o(i.sha1digest))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = sha1digest &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
</UL>

<P><STRONG><a name="[2fb]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[2b5]"></a>stairsUpdate</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, cwm_pedometer_watch_activity.o(i.stairsUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = stairsUpdate &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stairsUpdateInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerReportSteps
</UL>

<P><STRONG><a name="[501]"></a>subscribeEvent</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, scheduler.o(i.subscribeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_remove_head
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_insert_sort
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_insert_sort
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_node
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSubscribeEvent
</UL>

<P><STRONG><a name="[166]"></a>syc_getSclLog8Opt</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, syscfg.o(i.syc_getSclLog8Opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syc_getSclLog8Opt
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProjPrepareListen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
</UL>

<P><STRONG><a name="[163]"></a>syc_getSclLog9Opt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscfg.o(i.syc_getSclLog9Opt))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSensorInputLog
</UL>

<P><STRONG><a name="[319]"></a>syc_isEnterLowPowerMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, syscfg.o(i.syc_isEnterLowPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempSetRate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onChargingSetRate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offBodySetRate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magSetRate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrSetRate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroSetRate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnssSetRate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baroSetRate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accSetRate
</UL>

<P><STRONG><a name="[490]"></a>syc_isLowPowerModeCfgEnabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, syscfg.o(i.syc_isLowPowerModeCfgEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;virsens_dataadpter
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_actions
</UL>

<P><STRONG><a name="[1f3]"></a>syc_setLowPowerModeCfgEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, syscfg.o(i.syc_setLowPowerModeCfgEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
</UL>

<P><STRONG><a name="[1f4]"></a>syc_setLowPowerModeStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, syscfg.o(i.syc_setLowPowerModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_LibPostInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_actions
</UL>

<P><STRONG><a name="[158]"></a>sys_dbgPrintf</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, sysplat.o(i.sys_dbgPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agLogout
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_actmode_and_hw_cfg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlgoAmhListen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3__init_info0
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaFree
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorRegister
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tidAlloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CWM_Sensor_Enable
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerIRQHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_DiscoverRegisterSensor
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProjPrepareListen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process2
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputSclLog
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_actions
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memFree
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_Start
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_End
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_record_add
</UL>

<P><STRONG><a name="[1e2]"></a>sys_isHwInterfaceExist</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sysplat.o(i.sys_isHwInterfaceExist))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_DiscoverRegisterSensor
</UL>

<P><STRONG><a name="[15a]"></a>sys_memAlloc</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sysplat.o(i.sys_memAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaMalloc
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaInit
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getInternalFeatureDbg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureDbg
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_rockingdetection_new
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_handupdownwatch_new
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_ar_new
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_absolute_static_new
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_algo_init_cbk
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMH_Custom
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_new
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addHwClientComp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_amh
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listdrvNewNode
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListNewNode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalist_create
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalist_addhead
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_custom
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_add_node
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_start
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoDataBufferInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_record_get
</UL>

<P><STRONG><a name="[447]"></a>sys_memFree</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sysplat.o(i.sys_memFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sys_memFree &rArr; maaFree &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaFree
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getInternalFeatureDbg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureDbg
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_request
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListRemove
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_Init
</UL>

<P><STRONG><a name="[363]"></a>sys_uSleep</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sysplat.o(i.sys_uSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3__init_info0
</UL>

<P><STRONG><a name="[1e3]"></a>tidAlloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, scheduler.o(i.tidAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tidAlloc &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getInternalFeatureDbg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;projAlgoInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_DiscoverRegisterSensor
</UL>

<P><STRONG><a name="[1e6]"></a>tidFree</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.tidFree))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_DiscoverRegisterSensor
</UL>

<P><STRONG><a name="[234]"></a>timedate2sec</STRONG> (Thumb, 248 bytes, Stack size 36 bytes, amh_time.o(i.timedate2sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timedate2sec
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_time_sync
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timedate
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateToUnixTime
</UL>

<P><STRONG><a name="[6a]"></a>timerCallBack_LowPower</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, algo_amh.o(i.timerCallBack_LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = timerCallBack_LowPower &rArr; osEnqueuePrivateEvtFromIsr &rArr; EnqueueFromIsr &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueuePrivateEvtFromIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[7b]"></a>twi_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board_nordic.o(i.twi_handler))
<BR>[Address Reference Count : 1]<UL><LI> board_nordic.o(i.i2c_init)
</UL>
<P><STRONG><a name="[96]"></a>uart_error_handle</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, board_nordic.o(i.uart_error_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = uart_error_handle &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_nordic.o(i.uart_init)
</UL>
<P><STRONG><a name="[503]"></a>unSubscribeEvent</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, scheduler.o(i.unSubscribeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = unSubscribeEvent &rArr; clst_mv_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_remove
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_mv_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst_get_node
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osUnSubscribeEvent
</UL>

<P><STRONG><a name="[27d]"></a>version_cwm_sedentary_activity</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_sedentary_activity.o(i.version_cwm_sedentary_activity))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNotice
</UL>

<P><STRONG><a name="[48b]"></a>xcrc32</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, commonlib.o(i.xcrc32), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[486]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_delay
</UL>

<P><STRONG><a name="[485]"></a>platform_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.platform_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = platform_delay &rArr; nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[484]"></a>platform_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = platform_init &rArr; board_init &rArr; uart_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>platform_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(i.platform_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = platform_read &rArr; CWM_OS_i2cRead &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[7d]"></a>platform_write</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(i.platform_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = platform_write &rArr; CWM_OS_i2cWrite &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1f7]"></a>calcElapsedTicks</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, board_nordic.o(i.calcElapsedTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calcElapsedTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systickUpdate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_GetTimeNs
</UL>

<P><STRONG><a name="[39f]"></a>gpio_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, board_nordic.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gpio_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[39e]"></a>i2c_init</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, board_nordic.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = i2c_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_enable
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[39b]"></a>nordic_system_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, board_nordic.o(i.nordic_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nordic_system_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[1fd]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, board_nordic.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cWrite
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_i2cRead
</UL>

<P><STRONG><a name="[50f]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_nordic.o(i.nrf_rtc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_handler
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[95]"></a>one_sec_timer_handle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, board_nordic.o(i.one_sec_timer_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = one_sec_timer_handle &rArr; systickUpdate &rArr; platsystickTicksToUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systickUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_nordic.o(i.timer_init)
</UL>
<P><STRONG><a name="[1f8]"></a>platsystickTicksToUs</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, board_nordic.o(i.platsystickTicksToUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = platsystickTicksToUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systickUpdate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_OS_GetTimeNs
</UL>

<P><STRONG><a name="[3a0]"></a>rtc_config</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, board_nordic.o(i.rtc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rtc_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[91]"></a>rtc_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, board_nordic.o(i.rtc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_nordic.o(i.rtc_config)
</UL>
<P><STRONG><a name="[4ff]"></a>systickUpdate</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, board_nordic.o(i.systickUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = systickUpdate &rArr; platsystickTicksToUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platsystickTicksToUs
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcElapsedTicks
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_sec_timer_handle
</UL>

<P><STRONG><a name="[39c]"></a>timer_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, board_nordic.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = timer_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[39d]"></a>uart_init</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, board_nordic.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = uart_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[3a1]"></a>bsp_board_buttons_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, boards.o(i.bsp_board_buttons_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_board_buttons_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[3a4]"></a>bsp_board_leds_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, boards.o(i.bsp_board_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_board_leds_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[3a2]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_buttons_init
</UL>

<P><STRONG><a name="[4b2]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[3a6]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[3c1]"></a>clock_clk_started_notify</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[80]"></a>clock_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[3c2]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[4a4]"></a>item_enqueue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[4a2]"></a>nrf_wdt_started</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_wdt_started))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[83]"></a>uart_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[82]"></a>uarte_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.uarte_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uarte_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[4ba]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[4bb]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>

<P><STRONG><a name="[4be]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[529]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrfx_coredep_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[4a6]"></a>twi_clear_bus</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = twi_clear_bus &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[81]"></a>twim_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.twim_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = twim_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(i.nrf_drv_twi_init)
</UL>
<P><STRONG><a name="[4e6]"></a>prs_box_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[384]"></a>apply_config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_txrx_pins_set
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_hwfc_pins_set
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[450]"></a>interrupts_enable</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nrfx_uart.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = interrupts_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[4b3]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, nrfx_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[387]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[386]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[4b4]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[385]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[539]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[4f4]"></a>nrf_uart_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[451]"></a>nrf_uart_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[389]"></a>nrf_uart_hwfc_pins_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[4f2]"></a>nrf_uart_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[452]"></a>nrf_uart_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[538]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[4f6]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>

<P><STRONG><a name="[388]"></a>nrf_uart_txrx_pins_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[453]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[4f5]"></a>rx_byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrfx_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[53a]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[4f3]"></a>rx_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrfx_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[4f8]"></a>tx_blocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[4f7]"></a>tx_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[53b]"></a>tx_done_event</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[4f1]"></a>uart_irq_handler</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_0_irq_handler
</UL>

<P><STRONG><a name="[38a]"></a>apply_config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrfx_uarte.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_txrx_pins_set
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_hwfc_pins_set
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[454]"></a>interrupts_enable</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, nrfx_uarte.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[4b5]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, nrfx_uarte.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[38d]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[38c]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[4b6]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[38b]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[53c]"></a>nrf_uarte_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[4fd]"></a>nrf_uarte_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[455]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[38f]"></a>nrf_uarte_hwfc_pins_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[4fb]"></a>nrf_uarte_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[456]"></a>nrf_uarte_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[53d]"></a>nrf_uarte_rx_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_rx_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[53e]"></a>nrf_uarte_shorts_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_shorts_disable))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[4fc]"></a>nrf_uarte_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[540]"></a>nrf_uarte_tx_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_tx_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[38e]"></a>nrf_uarte_txrx_pins_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[457]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[4fa]"></a>nrfx_is_in_ram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[53f]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrfx_uarte.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[541]"></a>tx_done_event</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrfx_uarte.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[4f9]"></a>uarte_irq_handler</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, nrfx_uarte.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_tx_amount_get
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_shorts_disable
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_rx_amount_get
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_0_irq_handler
</UL>

<P><STRONG><a name="[429]"></a>finish_transfer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrfx_spim.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[2d5]"></a>irq_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_spim.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[42a]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[4bc]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>

<P><STRONG><a name="[42b]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[458]"></a>nrf_spim_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[459]"></a>nrf_spim_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_spim.o(i.nrf_spim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_spim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[2a7]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[2a8]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[2a9]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[4d6]"></a>nrf_clock_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
</UL>

<P><STRONG><a name="[4d7]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
</UL>

<P><STRONG><a name="[4e4]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>

<P><STRONG><a name="[4d5]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, nrfx_clock.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>

<P><STRONG><a name="[4e2]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[25a]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[4de]"></a>channel_port_alloc</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, nrfx_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[4d9]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[462]"></a>latch_pending_read_and_check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.latch_pending_read_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[505]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[4b7]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[4b9]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[259]"></a>nrf_gpio_latches_read_and_clear</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.nrf_gpio_latches_read_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
</UL>

<P><STRONG><a name="[4b8]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[4e0]"></a>nrf_gpio_pin_present_check</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_present_check))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[4bd]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[4bf]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[258]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[257]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[4dc]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[4e3]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[4df]"></a>pin_configured_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.pin_configured_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_configured_set
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[4dd]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[4d8]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[4db]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[4e1]"></a>pin_in_use_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[25b]"></a>port_event_handle</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.port_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_pin_get
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[504]"></a>port_handler_pin_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_pin_get))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[4da]"></a>port_handler_polarity_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_polarity_get))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[2c6]"></a>irq_handler</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nrfx_rtc.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_is_enabled
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_pending
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_IRQHandler
</UL>

<P><STRONG><a name="[45e]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[45c]"></a>nrf_rtc_event_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[4ea]"></a>nrf_rtc_event_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
</UL>

<P><STRONG><a name="[45b]"></a>nrf_rtc_event_pending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_pending))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[45d]"></a>nrf_rtc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[4eb]"></a>nrf_rtc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
</UL>

<P><STRONG><a name="[45a]"></a>nrf_rtc_int_is_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[4e8]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_enable
</UL>

<P><STRONG><a name="[2e8]"></a>irq_handler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nrfx_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[45f]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[460]"></a>nrf_timer_compare_int_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[461]"></a>nrf_timer_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[531]"></a>_NRFX_IRQ_PENDING_CLEAR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrfx_twim.o(i._NRFX_IRQ_PENDING_CLEAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _NRFX_IRQ_PENDING_CLEAR
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[4ed]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, nrfx_twim.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
</UL>

<P><STRONG><a name="[4ec]"></a>nrf_twim_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_enable))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_enable
</UL>

<P><STRONG><a name="[532]"></a>nrf_twim_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[52a]"></a>nrf_twim_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[52b]"></a>nrf_twim_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_twim.o(i.nrf_twim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_twim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[52c]"></a>nrf_twim_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[52d]"></a>nrf_twim_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[535]"></a>nrf_twim_rx_buffer_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_rx_buffer_set))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[549]"></a>nrf_twim_rxd_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_rxd_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
</UL>

<P><STRONG><a name="[530]"></a>nrf_twim_shorts_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_shorts_set))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[52e]"></a>nrf_twim_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[534]"></a>nrf_twim_tx_buffer_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_tx_buffer_set))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[548]"></a>nrf_twim_txd_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_txd_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
</UL>

<P><STRONG><a name="[4ee]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[533]"></a>nrfx_is_in_ram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[536]"></a>twi_process_error</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrfx_twim.o(i.twi_process_error))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[2d6]"></a>twim_irq_handler</STRONG> (Thumb, 484 bytes, Stack size 48 bytes, nrfx_twim.o(i.twim_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = twim_irq_handler &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_task_trigger
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_shorts_set
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_enable
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_disable
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_errorsrc_get_and_clear
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NRFX_IRQ_PENDING_CLEAR
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[4f0]"></a>twim_xfer</STRONG> (Thumb, 810 bytes, Stack size 48 bytes, nrfx_twim.o(i.twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_tx_buffer_set
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_task_trigger
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_shorts_set
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_rx_buffer_set
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_enable
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_disable
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_errorsrc_get_and_clear
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
</UL>

<P><STRONG><a name="[52f]"></a>xfer_completeness_check</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, nrfx_twim.o(i.xfer_completeness_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_txd_amount_get
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_rxd_amount_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[3ab]"></a>buffer_add</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[44e]"></a>int_print</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[4b1]"></a>string_print</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nrf_fprintf_format.o(i.string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = string_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[44f]"></a>unsigned_print</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[48c]"></a>memobj_op</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[49e]"></a>nrf_balloc_block2idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_block2idx))
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>

<P><STRONG><a name="[49c]"></a>nrf_balloc_idx2block</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_idx2block))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>

<P><STRONG><a name="[537]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[37b]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_uart_fifo.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_rx &rArr; nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[37f]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_uart_fifo.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[71]"></a>uart_event_handler</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[36c]"></a>fifo_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[36b]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[428]"></a>fifo_peek</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_fifo.o(i.fifo_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>

<P><STRONG><a name="[36e]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[372]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[374]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[525]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[373]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_timer.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[3c6]"></a>compare_reg_update</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[522]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[523]"></a>expired_timers_handler</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[463]"></a>list_insertions_handler</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[3ca]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_timer.o(i.nrfx_coredep_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[3c9]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[36f]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[375]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[3c8]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc1_start &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[371]"></a>rtc1_stop</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[3c7]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[528]"></a>timeout_handler_exec</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeout_handler_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[2d7]"></a>timer_list_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[524]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[465]"></a>timer_list_insert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[464]"></a>timer_list_remove</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[377]"></a>timer_start_op_schedule</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[2c7]"></a>timer_timeouts_check</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[3cb]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[526]"></a>user_op_alloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[527]"></a>user_op_enque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[9f]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>serial_tx</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[4c1]"></a>backend_id_assign</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.backend_id_assign))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
</UL>

<P><STRONG><a name="[3a8]"></a>buf_prealloc</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[41b]"></a>dropped_sat16_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
</UL>

<P><STRONG><a name="[467]"></a>invalid_packets_omit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[3aa]"></a>log_skip</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[48e]"></a>module_idx_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[51d]"></a>std_header_set</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_header_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std_header_set &rArr; dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[4cc]"></a>std_n</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>

<P><STRONG><a name="[4cf]"></a>postfix_process</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[4cd]"></a>prefix_process</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_print
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[507]"></a>timestamp_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_str_formatter.o(i.timestamp_print))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[2d0]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[2d2]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[2d4]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[2d3]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[2e3]"></a>nrf52_errata_103</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_103))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2e4]"></a>nrf52_errata_115</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_115))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2e5]"></a>nrf52_errata_120</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_120))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2e6]"></a>nrf52_errata_136</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2e0]"></a>nrf52_errata_36</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2e1]"></a>nrf52_errata_66</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2e2]"></a>nrf52_errata_98</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_98))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[15e]"></a>getSensorIndexTbl</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getSensorIndexTbl
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIdExt2Fs
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgr_update_process_si
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgrUpdateByDirect
</UL>

<P><STRONG><a name="[154]"></a>transformSensorInputAndFifoDataStruct</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = transformSensorInputAndFifoDataStruct
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_record_get
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_record_add
</UL>

<P><STRONG><a name="[155]"></a>fifo_record_add</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fifo_record_add &rArr; fifoDataBufferInit &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoDataBufferInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIdExt2Fs
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transformSensorInputAndFifoDataStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
</UL>

<P><STRONG><a name="[159]"></a>fifo_record_get</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fifo_record_get &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transformSensorInputAndFifoDataStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_evt_process
</UL>

<P><STRONG><a name="[15b]"></a>copyInputSensorData</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = copyInputSensorData
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgrUpdateByDirect
</UL>

<P><STRONG><a name="[15d]"></a>mgrUpdateByDirect</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mgrUpdateByDirect &rArr; copyInputSensorData
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyInputSensorData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorIndexTbl
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_evt_process
</UL>

<P><STRONG><a name="[15f]"></a>fifo_evt_process</STRONG> (Thumb, 226 bytes, Stack size 104 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fifo_evt_process &rArr; fifo_record_get &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_reset_all
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgrUpdateByDirect
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_record_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_sensor_manager_handleEvent
</UL>

<P><STRONG><a name="[161]"></a>showSensorInputLog</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = showSensorInputLog
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getSclLog9Opt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_Start
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_End
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
</UL>

<P><STRONG><a name="[164]"></a>sensorInput</STRONG> (Thumb, 370 bytes, Stack size 592 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = sensorInput &rArr; doubleArrayM2IntString &rArr; doubleM2Int &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isLibRunning
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getSclLog8Opt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureDbg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatArrayM2IntString
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleArrayM2IntString
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_start
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIdExt2Fs
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSensorInputLog
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyInputSensorData
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_record_add
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput
</UL>

<P><STRONG><a name="[171]"></a>mgr_update_process_si</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mgr_update_process_si &rArr; getSensorIndexTbl
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorIndexTbl
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgr_update_process_all
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_sensor_manager_handleEvent
</UL>

<P><STRONG><a name="[7c]"></a>input_sensor_manager_handleEvent</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = input_sensor_manager_handleEvent &rArr; fifo_evt_process &rArr; fifo_record_get &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgr_update_process_si
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_evt_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input_sensor_manager.o(i.input_sensor_manager)
</UL>
<P><STRONG><a name="[173]"></a>getCustDrvPollingDataReady</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customDrvPollingTimeout
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgr_update_process_all
</UL>

<P><STRONG><a name="[156]"></a>sensorIdExt2Fs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, input_sensor_manager.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sensorIdExt2Fs &rArr; getSensorIndexTbl
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorIndexTbl
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_reset_all
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_record_add
</UL>

<P><STRONG><a name="[427]"></a>decideFifoDataType</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, input_sensor_manager.o(i.decideFifoDataType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decideFifoDataType
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoDataBufferInit
</UL>

<P><STRONG><a name="[157]"></a>fifoDataBufferInit</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, input_sensor_manager.o(i.fifoDataBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fifoDataBufferInit &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decideFifoDataType
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_record_add
</UL>

<P><STRONG><a name="[160]"></a>fifo_reset_all</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, input_sensor_manager.o(i.fifo_reset_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fifo_reset_all &rArr; sensorIdExt2Fs &rArr; getSensorIndexTbl
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIdExt2Fs
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_evt_process
</UL>

<P><STRONG><a name="[16d]"></a>fifo_start</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, input_sensor_manager.o(i.fifo_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fifo_start &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIdExt2Fs
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput_Fifo_Start
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorInput
</UL>

<P><STRONG><a name="[1da]"></a>sensorInput_Fifo_End</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, input_sensor_manager.o(i.sensorInput_Fifo_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sensorInput_Fifo_End &rArr; osEnqueuePrivateEvtFromIsr &rArr; EnqueueFromIsr &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isLibRunning
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueuePrivateEvtFromIsr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSensorInputLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_End
</UL>

<P><STRONG><a name="[1de]"></a>sensorInput_Fifo_Start</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, input_sensor_manager.o(i.sensorInput_Fifo_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sensorInput_Fifo_Start &rArr; fifo_start &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isLibRunning
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_start
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSensorInputLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_CustomSensorInput_Fifo_Start
</UL>

<P><STRONG><a name="[4e]"></a>sensorMotionListener</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, proj_prepare.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sensorMotionListener &rArr; motion_actions &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_actions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(i.CWM_LibPostInit)
</UL>
<P><STRONG><a name="[175]"></a>checkProtectStatus</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, proj_prepare.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = checkProtectStatus &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process2
</UL>

<P><STRONG><a name="[206]"></a>CWM_SettingControl_adv</STRONG> (Thumb, 450 bytes, Stack size 96 bytes, proj_prepare.o(i.CWM_SettingControl_adv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_setLowPowerModeCfgEnabled
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apis_scl_common
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SetRate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Ioctl
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputSclLog
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isLibRunning
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
</UL>

<P><STRONG><a name="[55]"></a>evtCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, proj_prepare.o(i.evtCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = evtCallback &rArr; timeRegisterEvent &rArr; cwmTimerStart &rArr; syncTimerInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeRegisterEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(i.CWM_LibPostInit)
</UL>
<P><STRONG><a name="[431]"></a>getSenTypeOrIdx</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, proj_prepare.o(i.getSenTypeOrIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSenTypeOrIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInternalSensTypeId
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCustomSensIdx
</UL>

<P><STRONG><a name="[174]"></a>motion_actions</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, proj_prepare.o(i.motion_actions))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = motion_actions &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_setLowPowerModeStatus
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isLowPowerModeCfgEnabled
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Ioctl
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorMotionListener
</UL>

<P><STRONG><a name="[207]"></a>outputSclLog</STRONG> (Thumb, 122 bytes, Stack size 104 bytes, proj_prepare.o(i.outputSclLog), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_SettingControl_adv
</UL>

<P><STRONG><a name="[426]"></a>timeRegisterEvent</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, proj_prepare.o(i.timeRegisterEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = timeRegisterEvent &rArr; cwmTimerStart &rArr; syncTimerInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerStop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evtCallback
</UL>

<P><STRONG><a name="[54]"></a>timerCallBack_1000ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, proj_prepare.o(i.timerCallBack_1000ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = timerCallBack_1000ms &rArr; osEnqueueCommon &rArr; Enqueue &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueueCommon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(i.CWM_LibPostInit)
</UL>
<P><STRONG><a name="[53]"></a>timerCallBack_100ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, proj_prepare.o(i.timerCallBack_100ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = timerCallBack_100ms &rArr; osEnqueueCommon &rArr; Enqueue &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueueCommon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(i.CWM_LibPostInit)
</UL>
<P><STRONG><a name="[50]"></a>timerCallBack_10ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, proj_prepare.o(i.timerCallBack_10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = timerCallBack_10ms &rArr; osEnqueueCommon &rArr; Enqueue &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueueCommon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(i.CWM_LibPostInit)
</UL>
<P><STRONG><a name="[51]"></a>timerCallBack_20ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, proj_prepare.o(i.timerCallBack_20ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = timerCallBack_20ms &rArr; osEnqueueCommon &rArr; Enqueue &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueueCommon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(i.CWM_LibPostInit)
</UL>
<P><STRONG><a name="[52]"></a>timerCallBack_40ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, proj_prepare.o(i.timerCallBack_40ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = timerCallBack_40ms &rArr; osEnqueueCommon &rArr; Enqueue &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueueCommon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(i.CWM_LibPostInit)
</UL>
<P><STRONG><a name="[4f]"></a>timerCallBack_5ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, proj_prepare.o(i.timerCallBack_5ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = timerCallBack_5ms &rArr; osEnqueueCommon &rArr; Enqueue &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEnqueueCommon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_prepare.o(i.CWM_LibPostInit)
</UL>
<P><STRONG><a name="[179]"></a>updateTimer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, proj_prepare.o(i.updateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = updateTimer &rArr; cwmTimerIRQHandler &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerIRQHandler
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmGetTimerInfo
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_process
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_GetNextActionDuration_ns
</UL>

<P><STRONG><a name="[57]"></a>customSensorListen</STRONG> (Thumb, 38 bytes, Stack size 96 bytes, proj_sensor.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = customSensorListen &rArr; ProjPrepareListen &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProjPrepareListen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_sensor.o(i.Custom_MGR_Init)
</UL>
<P><STRONG><a name="[205]"></a>_CWM_Sensor_Enable</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, proj_sensor.o(i._CWM_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _CWM_Sensor_Enable &rArr; Custom_MGR_Enable &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_MGR_Enable
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_MGR_Disable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInternalSensTypeId
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isLibRunning
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_getFeatureLog
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWM_Sensor_Enable
</UL>

<P><STRONG><a name="[92]"></a>get_sensor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_sensor.o(i.get_sensor))
<BR>[Address Reference Count : 4]<UL><LI> hal_sensor.o(i.sensorDisable)
<LI> hal_sensor.o(i.sensorEnable)
<LI> hal_sensor.o(i.sensorIoCtl)
<LI> hal_sensor.o(i.sensorSetRate)
</UL>
<P><STRONG><a name="[47]"></a>callBack</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, scheduler.o(i.callBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = callBack
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTidMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.cwm_sec.common_aml.p0)
</UL>
<P><STRONG><a name="[94]"></a>compare_evtmgr_item</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scheduler.o(i.compare_evtmgr_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = compare_evtmgr_item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.subscribeEvent)
</UL>
<P><STRONG><a name="[93]"></a>get_evtmgr_item</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scheduler.o(i.get_evtmgr_item))
<BR>[Address Reference Count : 2]<UL><LI> scheduler.o(i.subscribeEvent)
<LI> scheduler.o(i.unSubscribeEvent)
</UL>
<P><STRONG><a name="[48]"></a>get_evtmgr_item_type_only</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scheduler.o(i.get_evtmgr_item_type_only))
<BR>[Address Reference Count : 2]<UL><LI> scheduler.o(.cwm_sec.common_aml.p0)
<LI> scheduler.o(i.subscribeEvent)
</UL>
<P><STRONG><a name="[480]"></a>getMaaIndex</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, sysplat.o(i.getMaaIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getMaaIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaMalloc
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaFree
</UL>

<P><STRONG><a name="[482]"></a>getMallocInfo</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, sysplat.o(i.getMallocInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getMallocInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maaInit
</UL>

<P><STRONG><a name="[47f]"></a>maaFree</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sysplat.o(i.maaFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = maaFree &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaaIndex
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memFree
</UL>

<P><STRONG><a name="[481]"></a>maaInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sysplat.o(i.maaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMallocInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>

<P><STRONG><a name="[483]"></a>maaMalloc</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sysplat.o(i.maaMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = maaMalloc &rArr; getMaaIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaaIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>

<P><STRONG><a name="[3dc]"></a>syncTimerInfo</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sw_timer.o(i.syncTimerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = syncTimerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerStop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerStart
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerIRQHandler
</UL>

<P><STRONG><a name="[297]"></a>MGR_Sync</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sensor_manager.o(i.MGR_Sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorEnable
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>

<P><STRONG><a name="[59]"></a>get_msg_item</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sensor_manager.o(i.get_msg_item))
<BR>[Address Reference Count : 2]<UL><LI> sensor_manager.o(i.MGR_Disable)
<LI> sensor_manager.o(i.MGR_Enable)
</UL>
<P><STRONG><a name="[440]"></a>hwsensorListAdd</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, listdrv.o(i.hwsensorListAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = hwsensorListAdd &rArr;  hwsensorListAdd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListNewNode
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListAdd
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListAdd
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwSensorListAdd
</UL>

<P><STRONG><a name="[442]"></a>hwsensorListLength</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, listdrv.o(i.hwsensorListLength))
<BR><BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListLength
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListLength
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwSensorListLength
</UL>

<P><STRONG><a name="[441]"></a>hwsensorListNewNode</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, listdrv.o(i.hwsensorListNewNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hwsensorListNewNode &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwsensorListAdd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwSensorListInit
</UL>

<P><STRONG><a name="[443]"></a>hwsensorListRemove</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, listdrv.o(i.hwsensorListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hwsensorListRemove &rArr; sys_memFree &rArr; maaFree &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwSensorListRemove
</UL>

<P><STRONG><a name="[41e]"></a>listdrvAdd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, listdrv.o(i.listdrvAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = listdrvAdd &rArr; listdrvNewNode &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listdrvNewNode
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvListAdd
</UL>

<P><STRONG><a name="[421]"></a>listdrvNewNode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, listdrv.o(i.listdrvNewNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = listdrvNewNode &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listdrvAdd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvListInit
</UL>

<P><STRONG><a name="[2f8]"></a>__embedded_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, commonlib.o(i.__embedded_string))
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStr
</UL>

<P><STRONG><a name="[41a]"></a>scalePn2num</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, commonlib.o(i.scalePn2num))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatM2Int
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubleM2Int
</UL>

<P><STRONG><a name="[a2]"></a>ap3__check_mcu</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chip_manager.o(i.ap3__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>ap3__deinit_info0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chip_manager.o(i.ap3__deinit_info0))
<BR>[Address Reference Count : 2]<UL><LI> chip_manager.o(.constdata)
<LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>ap3__get_uid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.ap3__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ap3__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>ap3__init_info0</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, chip_manager.o(i.ap3__init_info0))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ap3__init_info0 &rArr; sys_uSleep &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uSleep
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> chip_manager.o(.constdata)
<LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>ap4__check_mcu</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chip_manager.o(i.ap4__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>ap4__deinit_info0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chip_manager.o(i.ap4__deinit_info0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ap4__deinit_info0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>ap4__init_info0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chip_manager.o(i.ap4__init_info0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ap4__init_info0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>apa__check_mcu</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chip_manager.o(i.apa__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>as1__check_mcu</STRONG> (Thumb, 56 bytes, Stack size 120 bytes, chip_manager.o(i.as1__check_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = as1__check_mcu &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_ram_get_mcu_index
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>as1__get_uid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.as1__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = as1__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[393]"></a>base64_encode_cwm</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, chip_manager.o(i.base64_encode_cwm), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_uid_string
</UL>

<P><STRONG><a name="[3be]"></a>check_white_list_v2</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, chip_manager.o(i.check_white_list_v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = check_white_list_v2 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWhiteList
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipManager2
</UL>

<P><STRONG><a name="[b1]"></a>da2__check_mcu</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, chip_manager.o(i.da2__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>da2__get_uid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.da2__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = da2__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>g5a__check_mcu</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, chip_manager.o(i.g5a__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>g5a__get_uid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.g5a__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = g5a__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[b]"></a>getChipManager2</STRONG> (Thumb, 596 bytes, Stack size 64 bytes, chip_manager.o(i.getChipManager2))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = getChipManager2 &rArr; verify_sec_v3 &rArr; cv3_verify &rArr; vli_modMult &rArr; vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v2
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_custkey_index
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_white_list_v2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.data)
</UL>
<P><STRONG><a name="[42e]"></a>get_custkey_index</STRONG> (Thumb, 130 bytes, Stack size 104 bytes, chip_manager.o(i.get_custkey_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_custkey_index &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipManager2
</UL>

<P><STRONG><a name="[42d]"></a>make_uid_string</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, chip_manager.o(i.make_uid_string), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode_cwm
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcrc32
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipInfo
</UL>

<P><STRONG><a name="[362]"></a>memcpy_with_int</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, chip_manager.o(i.memcpy_with_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memcpy_with_int
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v3
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sec_v2
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r8a__get_uid
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r87__get_uid
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n5a__get_uid
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n40__get_uid
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_custkey_index
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g5a__get_uid
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;da2__get_uid
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as1__get_uid
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as1__check_mcu
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap3__get_uid
</UL>

<P><STRONG><a name="[a7]"></a>n32__check_mcu</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, chip_manager.o(i.n32__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>n40__check_mcu</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, chip_manager.o(i.n40__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>n40__get_uid</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chip_manager.o(i.n40__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = n40__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>n5a__check_mcu</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, chip_manager.o(i.n5a__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>n5a__get_uid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.n5a__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = n5a__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>r87__check_mcu</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, chip_manager.o(i.r87__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>r87__get_uid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.r87__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = r87__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>r8a__check_mcu</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, chip_manager.o(i.r8a__check_mcu))
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>r8a__get_uid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_manager.o(i.r8a__get_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = r8a__get_uid &rArr; memcpy_with_int
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chip_manager.o(.constdata)
</UL>
<P><STRONG><a name="[392]"></a>stick_ram_get_mcu_index</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, chip_manager.o(i.stick_ram_get_mcu_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stick_ram_get_mcu_index
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as1__check_mcu
</UL>

<P><STRONG><a name="[430]"></a>verify_sec_v2</STRONG> (Thumb, 176 bytes, Stack size 168 bytes, chip_manager.o(i.verify_sec_v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = verify_sec_v2 &rArr; rsa_decrypt &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipManager2
</UL>

<P><STRONG><a name="[42f]"></a>verify_sec_v3</STRONG> (Thumb, 128 bytes, Stack size 168 bytes, chip_manager.o(i.verify_sec_v3))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = verify_sec_v3 &rArr; cv3_verify &rArr; vli_modMult &rArr; vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_with_int
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1digest
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChipManager2
</UL>

<P><STRONG><a name="[18b]"></a>amhProcess</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, algo_amh.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = amhProcess &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhProcess_dt
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEVT
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlgoAmhListen
</UL>

<P><STRONG><a name="[69]"></a>AlgoAmhListen</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, algo_amh.o(.cwm_sec.common_aml.p0))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AlgoAmhListen &rArr; amhProcess &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_amh_checkPower
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhProcess
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerStop
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[18c]"></a>algo_amh_checkPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, algo_amh.o(.cwm_sec.common_aml.p0))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepPower
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlgoAmhListen
</UL>

<P><STRONG><a name="[bb]"></a>Ioctl</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, algo_amh.o(i.Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>SystemEVT</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, algo_amh.o(i.SystemEVT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SystemEVT &rArr; amhProcess &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhProcess
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerStop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerStart
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[60]"></a>acc_sensor_config</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, algo_amh.o(i.acc_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = acc_sensor_config &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[65]"></a>baro_sensor_config</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, algo_amh.o(i.baro_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = baro_sensor_config &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[66]"></a>gnss_sensor_config</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, algo_amh.o(i.gnss_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gnss_sensor_config &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[61]"></a>gyro_sensor_config</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, algo_amh.o(i.gyro_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gyro_sensor_config &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[64]"></a>hr_sensor_config</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, algo_amh.o(i.hr_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hr_sensor_config &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[62]"></a>mag_sensor_config</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, algo_amh.o(i.mag_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mag_sensor_config &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[63]"></a>offbody_sensor_config</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, algo_amh.o(i.offbody_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = offbody_sensor_config &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[67]"></a>oncharging_sensor_config</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, algo_amh.o(i.oncharging_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = oncharging_sensor_config &rArr; MGR_Enable &rArr; MGR_Sync &rArr; sensorEnable &rArr; sensor_custom_action &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[ba]"></a>setRate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, algo_amh.o(i.setRate))
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>stepPower</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, algo_amh.o(i.stepPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stepPower
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_amh_checkPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>virsens_dataadpter</STRONG> (Thumb, 68 bytes, Stack size 112 bytes, algo_amh.o(i.virsens_dataadpter))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = virsens_dataadpter &rArr; cwmTimerStart &rArr; syncTimerInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isLowPowerModeCfgEnabled
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmTimerStart
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_amh.o(i.algo_amh)
</UL>
<P><STRONG><a name="[31a]"></a>activate_virsens_algorithm</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, amh_app.o(i.activate_virsens_algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = activate_virsens_algorithm &rArr; addHwClientComp &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addHwClientComp
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_init
</UL>

<P><STRONG><a name="[31b]"></a>addHwClientComp</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, amh_app.o(i.addHwClientComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = addHwClientComp &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activate_virsens_algorithm
</UL>

<P><STRONG><a name="[513]"></a>algo_hw_tbl_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, amh_app.o(i.algo_hw_tbl_get), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_algo_sleep_inputHr
</UL>

<P><STRONG><a name="[358]"></a>ar_actmode_and_hw_cfg</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, amh_app.o(i.ar_actmode_and_hw_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_hw_tbl_idx_get
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setActmode_and_hw_cfg
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLastActivityMode
</UL>

<P><STRONG><a name="[361]"></a>ar_hw_tbl_idx_get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, amh_app.o(i.ar_hw_tbl_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ar_hw_tbl_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_actmode_inputHr
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_actmode_and_hw_cfg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
</UL>

<P><STRONG><a name="[3b2]"></a>cached_set_hwApi</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amh_app.o(i.cached_set_hwApi), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_actmode_inputHr
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_actmode_input_all
</UL>

<P><STRONG><a name="[35d]"></a>change_actmode_input_all</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, amh_app.o(i.change_actmode_input_all), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_set_hwApi_immediately
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cached_set_hwApi
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cached_set_hwApi
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
</UL>

<P><STRONG><a name="[354]"></a>getSensorPowerState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, amh_app.o(i.getSensorPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_getOutputType1
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isNeedActivityMode
</UL>

<P><STRONG><a name="[511]"></a>get_actmode_algo_cfg_tbl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, amh_app.o(i.get_actmode_algo_cfg_tbl), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_actmode_algo_cfg
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTbl_actmode_algo_cfg
</UL>

<P><STRONG><a name="[357]"></a>isNeedActivityMode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, amh_app.o(i.isNeedActivityMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isNeedActivityMode
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setActmode_and_hw_cfg
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLastActivityMode
</UL>

<P><STRONG><a name="[3b0]"></a>is_cached_set_hwApi</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, amh_app.o(i.is_cached_set_hwApi), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_actmode_inputHr
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_actmode_input_all
</UL>

<P><STRONG><a name="[3b1]"></a>is_set_hwApi_immediately</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, amh_app.o(i.is_set_hwApi_immediately), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_actmode_inputHr
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_actmode_input_all
</UL>

<P><STRONG><a name="[355]"></a>output_act_common</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, amh_app.o(i.output_act_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = output_act_common
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_getOutputType1
</UL>

<P><STRONG><a name="[35b]"></a>setHwAlgoPower</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, amh_app.o(i.setHwAlgoPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setHwAlgoPower
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>

<P><STRONG><a name="[35a]"></a>setLastActivityMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, amh_app.o(i.setLastActivityMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isNeedActivityMode
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_actmode_and_hw_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>

<P><STRONG><a name="[359]"></a>setSensorPowerState</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, amh_app.o(i.setSensorPowerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = setSensorPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>

<P><STRONG><a name="[35f]"></a>setTbl_actmode_algo_cfg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, amh_app.o(i.setTbl_actmode_algo_cfg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_actmode_algo_cfg_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
</UL>

<P><STRONG><a name="[35c]"></a>set_actmode_algo_cfg</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, amh_app.o(i.set_actmode_algo_cfg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_actmode_algo_cfg_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
</UL>

<P><STRONG><a name="[35e]"></a>set_actmode_inputHr</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, amh_app.o(i.set_actmode_inputHr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_set_hwApi_immediately
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_cached_set_hwApi
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cached_set_hwApi
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_hw_tbl_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
</UL>

<P><STRONG><a name="[360]"></a>set_algo_sleep_inputHr</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, amh_app.o(i.set_algo_sleep_inputHr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_hw_tbl_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setting_control
</UL>

<P><STRONG><a name="[c5]"></a>AbsoluteStaticPower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, proj_algo.o(i.AbsoluteStaticPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AbsoluteStaticPower &rArr; amhapp_setPower &rArr; setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>ActivityOutputPower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, proj_algo.o(i.ActivityOutputPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ActivityOutputPower &rArr; amhapp_setPower &rArr; setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>FallingPower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, proj_algo.o(i.FallingPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FallingPower &rArr; amhapp_setPower &rArr; setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>HandupdownPower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, proj_algo.o(i.HandupdownPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HandupdownPower &rArr; amhapp_setPower &rArr; setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>InactivityOutputPower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, proj_algo.o(i.InactivityOutputPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = InactivityOutputPower &rArr; amhapp_setPower &rArr; setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>NoMotionPower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, proj_algo.o(i.NoMotionPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = NoMotionPower &rArr; amhapp_setPower &rArr; setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>SedentaryPower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, proj_algo.o(i.SedentaryPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SedentaryPower &rArr; amhapp_setPower &rArr; setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>ShakePower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, proj_algo.o(i.ShakePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ShakePower &rArr; amhapp_setPower &rArr; setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>SleepPower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, proj_algo.o(i.SleepPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SleepPower &rArr; amhapp_setPower &rArr; setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>StandPower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, proj_algo.o(i.StandPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = StandPower &rArr; amhapp_setPower &rArr; setLastActivityMode &rArr; ar_actmode_and_hw_cfg &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhapp_setPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>SystemEVT</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, proj_algo.o(i.SystemEVT))
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(i.AMH_Custom)
</UL>
<P><STRONG><a name="[49]"></a>amhapp_OutputCallback</STRONG> (Thumb, 100 bytes, Stack size 104 bytes, proj_algo.o(i.amhapp_OutputCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = amhapp_OutputCallback &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_SensorUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.cwm_sec.common_aml.p0)
</UL>
<P><STRONG><a name="[be]"></a>setIoctl</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, proj_algo.o(i.setIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setIoctl &rArr; MGR_Ioctl &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGR_Ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>setRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, proj_algo.o(i.setRate))
<BR>[Address Reference Count : 1]<UL><LI> proj_algo.o(.constdata)
</UL>
<P><STRONG><a name="[28c]"></a>AddRoundKey</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, cypher.o(i.AddRoundKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[50c]"></a>BlockCopy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cypher.o(i.BlockCopy))
<BR><BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt
</UL>

<P><STRONG><a name="[28b]"></a>InvCipher</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cypher.o(i.InvCipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvShiftRows
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt
</UL>

<P><STRONG><a name="[28f]"></a>InvMixColumns</STRONG> (Thumb, 970 bytes, Stack size 40 bytes, cypher.o(i.InvMixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[28d]"></a>InvShiftRows</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cypher.o(i.InvShiftRows))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[28e]"></a>InvSubBytes</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, cypher.o(i.InvSubBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InvSubBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[50d]"></a>KeyExpansion</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, cypher.o(i.KeyExpansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt
</UL>

<P><STRONG><a name="[290]"></a>xtime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cypher.o(i.xtime))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
</UL>

<P><STRONG><a name="[239]"></a>EccPoint_double_jacobian</STRONG> (Thumb, 274 bytes, Stack size 72 bytes, cypher3.o(i.EccPoint_double_jacobian))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = EccPoint_double_jacobian &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[2f0]"></a>XYcZ_add</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, cypher3.o(i.XYcZ_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = XYcZ_add &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[547]"></a>add_128_128</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cypher3.o(i.add_128_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_128_128
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
</UL>

<P><STRONG><a name="[390]"></a>apply_z</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, cypher3.o(i.apply_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = apply_z &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[3d2]"></a>ecc_bytes2native</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, cypher3.o(i.ecc_bytes2native))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ecc_bytes2native
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[3d1]"></a>ecc_point_decompress</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, cypher3.o(i.ecc_point_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecc_point_decompress &rArr; mod_sqrt &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_bytes2native
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[422]"></a>mod_sqrt</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, cypher3.o(i.mod_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mod_sqrt &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_numBits
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
</UL>

<P><STRONG><a name="[546]"></a>mul_64_64</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, cypher3.o(i.mul_64_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mul_64_64
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
</UL>

<P><STRONG><a name="[240]"></a>vli_add</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, cypher3.o(i.vli_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[3d7]"></a>vli_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cypher3.o(i.vli_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vli_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[3d3]"></a>vli_cmp</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, cypher3.o(i.vli_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[23a]"></a>vli_isZero</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cypher3.o(i.vli_isZero))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[543]"></a>vli_mmod_fast</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, cypher3.o(i.vli_mmod_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vli_mmod_fast &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>

<P><STRONG><a name="[23d]"></a>vli_modAdd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cypher3.o(i.vli_modAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vli_modAdd &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[3d4]"></a>vli_modInv</STRONG> (Thumb, 300 bytes, Stack size 120 bytes, cypher3.o(i.vli_modInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vli_modInv &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[3d5]"></a>vli_modMult</STRONG> (Thumb, 326 bytes, Stack size 168 bytes, cypher3.o(i.vli_modMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = vli_modMult &rArr; vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_numBits
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[23c]"></a>vli_modMult_fast</STRONG> (Thumb, 24 bytes, Stack size 56 bytes, cypher3.o(i.vli_modMult_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vli_modMult_fast &rArr; vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[23b]"></a>vli_modSquare_fast</STRONG> (Thumb, 24 bytes, Stack size 56 bytes, cypher3.o(i.vli_modSquare_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vli_modSquare_fast &rArr; vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[23e]"></a>vli_modSub</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cypher3.o(i.vli_modSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vli_modSub &rArr; vli_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[544]"></a>vli_mult</STRONG> (Thumb, 186 bytes, Stack size 104 bytes, cypher3.o(i.vli_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vli_mult &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_64_64
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_128_128
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
</UL>

<P><STRONG><a name="[3d6]"></a>vli_numBits</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cypher3.o(i.vli_numBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vli_numBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[241]"></a>vli_rshift1</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, cypher3.o(i.vli_rshift1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vli_rshift1
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[242]"></a>vli_set</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, cypher3.o(i.vli_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[545]"></a>vli_square</STRONG> (Thumb, 236 bytes, Stack size 104 bytes, cypher3.o(i.vli_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vli_square &rArr; mul_64_64
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_64_64
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_128_128
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
</UL>

<P><STRONG><a name="[3d8]"></a>vli_sub</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, cypher3.o(i.vli_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_decompress
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[23f]"></a>vli_testBit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cypher3.o(i.vli_testBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vli_testBit
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cv3_verify
</UL>

<P><STRONG><a name="[76]"></a>CUSTOM_CMD</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, drv_custom.o(i.CUSTOM_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CUSTOM_CMD &rArr; customDrvPollingTimeout &rArr; mgrUpdateBySchedule &rArr; osEnqueuePrivateEvtFromIsr &rArr; EnqueueFromIsr &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customDrvPollingTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(i.drv_custom)
</UL>
<P><STRONG><a name="[520]"></a>CheckTheSameTimerCfg</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, drv_custom.o(i.CheckTheSameTimerCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckTheSameTimerCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
</UL>

<P><STRONG><a name="[ca]"></a>accIoctl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_custom.o(i.accIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = accIoctl &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>accSetRate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_custom.o(i.accSetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = accSetRate &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isEnterLowPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>accStepPower</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_custom.o(i.accStepPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = accStepPower
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCustDrvPollingDataReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>anyMotionIoctl</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_custom.o(i.anyMotionIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = anyMotionIoctl &rArr; sensorIoCtl &rArr; clst_get_node
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>anyMotionPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_custom.o(i.anyMotionPower))
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>anyMotionSetRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_custom.o(i.anyMotionSetRate))
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>baroIoctl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_custom.o(i.baroIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = baroIoctl &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>baroSetRate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_custom.o(i.baroSetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = baroSetRate &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isEnterLowPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>baroStepPower</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_custom.o(i.baroStepPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = baroStepPower
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCustDrvPollingDataReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[317]"></a>computePollingTime</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, drv_custom.o(i.computePollingTime))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempSetRate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempIoctl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onChargingSetRate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onChargingIoctl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offBodySetRate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offBodyIoctl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magSetRate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magIoctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrSetRate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrIoctl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroSetRate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroIoctl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnssSetRate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnssIoctl
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baroSetRate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baroIoctl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accSetRate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accIoctl
</UL>

<P><STRONG><a name="[dc]"></a>gnssIoctl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_custom.o(i.gnssIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gnssIoctl &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>gnssSetRate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_custom.o(i.gnssSetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gnssSetRate &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isEnterLowPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>gnssStepPower</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_custom.o(i.gnssStepPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gnssStepPower
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCustDrvPollingDataReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>gyroIoctl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_custom.o(i.gyroIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gyroIoctl &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>gyroSetRate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_custom.o(i.gyroSetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gyroSetRate &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isEnterLowPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>gyroStepPower</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_custom.o(i.gyroStepPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gyroStepPower
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCustDrvPollingDataReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>hrIoctl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_custom.o(i.hrIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hrIoctl &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>hrSetRate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_custom.o(i.hrSetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hrSetRate &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isEnterLowPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>hrStepPower</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_custom.o(i.hrStepPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hrStepPower
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCustDrvPollingDataReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>magIoctl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_custom.o(i.magIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = magIoctl &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>magSetRate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_custom.o(i.magSetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = magSetRate &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isEnterLowPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>magStepPower</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_custom.o(i.magStepPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = magStepPower
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCustDrvPollingDataReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>offBodyIoctl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_custom.o(i.offBodyIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = offBodyIoctl &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>offBodySetRate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_custom.o(i.offBodySetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = offBodySetRate &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isEnterLowPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>offBodyStepPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_custom.o(i.offBodyStepPower))
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>onChargingIoctl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_custom.o(i.onChargingIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = onChargingIoctl &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>onChargingSetRate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_custom.o(i.onChargingSetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = onChargingSetRate &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isEnterLowPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>onChargingStepPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_custom.o(i.onChargingStepPower))
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>reqSensorIoctl</STRONG> (Thumb, 98 bytes, Stack size 120 bytes, drv_custom.o(i.reqSensorIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = reqSensorIoctl &rArr; MgrUpdate_ReqSens &rArr; MGR_SensorUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_GetTimeNs
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrUpdate_ReqSens
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>reqSensorPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_custom.o(i.reqSensorPower))
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>reqSensorSetRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_custom.o(i.reqSensorSetRate))
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>tempIoctl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_custom.o(i.tempIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tempIoctl &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorIoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>tempSetRate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_custom.o(i.tempSetRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tempSetRate &rArr; timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerChange
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computePollingTime
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syc_isEnterLowPowerMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>tempStepPower</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_custom.o(i.tempStepPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tempStepPower
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCustDrvPollingDataReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_custom.o(.constdata)
</UL>
<P><STRONG><a name="[318]"></a>timerChange</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, drv_custom.o(i.timerChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = timerChange &rArr; osSubscribeEvent &rArr; subscribeEvent &rArr; clst_insert_sort &rArr; clst_add_node &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTheSameTimerCfg
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osUnSubscribeEvent
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSubscribeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempSetRate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempIoctl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onChargingSetRate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onChargingIoctl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offBodySetRate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offBodyIoctl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magSetRate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;magIoctl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrSetRate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrIoctl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroSetRate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroIoctl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnssSetRate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnssIoctl
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baroSetRate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baroIoctl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accSetRate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accIoctl
</UL>

<P><STRONG><a name="[30f]"></a>_setoperated</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, amh_main.o(i._setoperated))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _setoperated &rArr; hw_client_components_get_hwApi &rArr; hw_client_components_hwApi &rArr; _linkedlist_get &rArr; datalist_create &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_clients_components_suspended
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_clients_components_resume
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_request
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_get_hwApi
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_change_hwApi
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_active
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_internal_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_process_setoperated
</UL>

<P><STRONG><a name="[70]"></a>agLogout</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, amh_main.o(i.agLogout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agLogout &rArr; sys_dbgPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amh_main.o(i.amh_main_set_cfg_directly)
</UL>
<P><STRONG><a name="[6f]"></a>amh_algo_init_cbk</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, amh_main.o(i.amh_algo_init_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = amh_algo_init_cbk &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amh_main.o(i.amh_main_new)
</UL>
<P><STRONG><a name="[6e]"></a>log_mask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, amh_main.o(i.log_mask))
<BR>[Address Reference Count : 1]<UL><LI> amh_main.o(i.amh_main_new)
</UL>
<P><STRONG><a name="[33a]"></a>amh_dlog_index</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, log_dlog.o(i.amh_dlog_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = amh_dlog_index &rArr; dlogRaw &rArr; conLogItems &rArr; getItemString &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_rlog
</UL>

<P><STRONG><a name="[3cc]"></a>conLogItems</STRONG> (Thumb, 160 bytes, Stack size 320 bytes, log_dlog.o(i.conLogItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = conLogItems &rArr; getItemString &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroArray
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlogRaw
</UL>

<P><STRONG><a name="[33b]"></a>dlogRaw</STRONG> (Thumb, 604 bytes, Stack size 432 bytes, log_dlog.o(i.dlogRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = dlogRaw &rArr; conLogItems &rArr; getItemString &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conLogItems
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_dlog_index
</UL>

<P><STRONG><a name="[3ce]"></a>getItemString</STRONG> (Thumb, 424 bytes, Stack size 80 bytes, log_dlog.o(i.getItemString))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getItemString &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale2num
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conLogItems
</UL>

<P><STRONG><a name="[3cd]"></a>isZeroArray</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, log_dlog.o(i.isZeroArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isZeroArray
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conLogItems
</UL>

<P><STRONG><a name="[433]"></a>scale2num</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, log_dlog.o(i.scale2num))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemString
</UL>

<P><STRONG><a name="[78]"></a>_hw_client_search_list</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hw_components.o(i._hw_client_search_list))
<BR>[Address Reference Count : 3]<UL><LI> hw_components.o(i.hw_client_components_active)
<LI> hw_components.o(i.hw_client_components_hwApi)
<LI> hw_components.o(i.hw_client_components_request)
</UL>
<P><STRONG><a name="[79]"></a>_hw_clients_components_resume</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hw_components.o(i._hw_clients_components_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _hw_clients_components_resume &rArr; setHwPowers
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHwPowers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_components.o(i.hw_clients_components_resume)
</UL>
<P><STRONG><a name="[7a]"></a>_hw_clients_components_suspended</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hw_components.o(i._hw_clients_components_suspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _hw_clients_components_suspended &rArr; setHwPowers
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHwPowers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_components.o(i.hw_clients_components_suspended)
</UL>
<P><STRONG><a name="[30a]"></a>_linkedlist_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_components.o(i._linkedlist_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _linkedlist_get &rArr; datalist_create &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalist_create
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_clients_components_suspended
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_clients_components_resume
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_request
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_active
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_hwApi
</UL>

<P><STRONG><a name="[446]"></a>hw_client_components_hwApi</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hw_components.o(i.hw_client_components_hwApi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hw_client_components_hwApi &rArr; _linkedlist_get &rArr; datalist_create &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalist_getnodedata
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalist_getnode
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linkedlist_get
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_get_hwApi
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_change_hwApi
</UL>

<P><STRONG><a name="[309]"></a>setHwPowers</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, hw_components.o(i.setHwPowers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setHwPowers
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_client_components_active
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hw_clients_components_suspended
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hw_clients_components_resume
</UL>

<P><STRONG><a name="[145]"></a>algo_proc_activity_recognition</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, algo_proc_activity_recognition.o(.cwm_sec.common_amh_proc.p3))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = algo_proc_activity_recognition &rArr; cwm_ar_mldt &rArr; FeaturesExtraction &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhTime2timedate
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_activity_recognition
</UL>

<P><STRONG><a name="[8a]"></a>proc_activity_recognition</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, algo_proc_activity_recognition.o(.cwm_sec.common_amh_proc.p3))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = proc_activity_recognition &rArr; algo_proc_activity_recognition &rArr; cwm_ar_mldt &rArr; FeaturesExtraction &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_algo_report
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportSleepData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_contentpacked
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_proc_activity_recognition
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_activity_recognition.o(i.obj_ar_new)
</UL>
<P><STRONG><a name="[3af]"></a>ROTL16_15</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, algo_proc_activity_recognition.o(i.ROTL16_15))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc30_setup
</UL>

<P><STRONG><a name="[391]"></a>activity_type_remap</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, algo_proc_activity_recognition.o(i.activity_type_remap))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_contentpacked
</UL>

<P><STRONG><a name="[31d]"></a>algo_enable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, algo_proc_activity_recognition.o(i.algo_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = algo_enable &rArr; cwm_ar_mldt_enable &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_enable
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[32f]"></a>algo_set_actPauseDet</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, algo_proc_activity_recognition.o(i.algo_set_actPauseDet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = algo_set_actPauseDet &rArr; cwm_ar_mldt_set_algo_config &rArr; SelectById
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_algo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[331]"></a>algo_set_arAlert</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, algo_proc_activity_recognition.o(i.algo_set_arAlert))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = algo_set_arAlert &rArr; cwm_ar_mldt_set_algo_config &rArr; SelectById
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_algo_config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[332]"></a>algo_set_biking</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, algo_proc_activity_recognition.o(i.algo_set_biking))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = algo_set_biking &rArr; cwm_ar_mldt_set_algo_config &rArr; SelectById
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_algo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[333]"></a>algo_set_metabolism</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, algo_proc_activity_recognition.o(i.algo_set_metabolism))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = algo_set_metabolism &rArr; cwm_ar_mldt_set_algo_config &rArr; SelectById
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHrRange_age
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_algo_config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[335]"></a>algo_set_mldt</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, algo_proc_activity_recognition.o(i.algo_set_mldt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = algo_set_mldt &rArr; cwm_ar_mldt_set_mldt_config &rArr; isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_mldt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[337]"></a>algo_set_pedometer</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, algo_proc_activity_recognition.o(i.algo_set_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = algo_set_pedometer &rArr; cwm_ar_mldt_set_algo_config &rArr; SelectById
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_algo_config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[338]"></a>algo_set_sedentary</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, algo_proc_activity_recognition.o(i.algo_set_sedentary))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = algo_set_sedentary &rArr; cwm_ar_mldt_set_algo_config &rArr; SelectById
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_algo_config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[339]"></a>algo_set_swim</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, algo_proc_activity_recognition.o(i.algo_set_swim))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = algo_set_swim &rArr; cwm_ar_mldt_set_algo_config &rArr; SelectById
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_algo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[14b]"></a>ar_contentpacked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, algo_proc_activity_recognition.o(i.ar_contentpacked))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ar_contentpacked
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_type_remap
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportSleepData
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_activity_exit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_activity_recognition
</UL>

<P><STRONG><a name="[3ad]"></a>cc30_cwm_idc</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, algo_proc_activity_recognition.o(i.cc30_cwm_idc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cc30_cwm_idc &rArr; cc30_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc30_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[3ae]"></a>cc30_setup</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, algo_proc_activity_recognition.o(i.cc30_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cc30_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROTL16_15
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc30_cwm_idc
</UL>

<P><STRONG><a name="[89]"></a>getoperated</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, algo_proc_activity_recognition.o(i.getoperated))
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_activity_recognition.o(i.obj_ar_new)
</UL>
<P><STRONG><a name="[508]"></a>proc_activity_exit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, algo_proc_activity_recognition.o(i.proc_activity_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = proc_activity_exit &rArr; cwm_ar_mldt_exit &rArr; SelectById
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_algo_report
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_exit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_contentpacked
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[14d]"></a>reportSleepData</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, algo_proc_activity_recognition.o(i.reportSleepData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = reportSleepData &rArr; ar_contentpacked
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_algo_report
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_sedenAct_operation
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ar_contentpacked
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_activity_recognition
</UL>

<P><STRONG><a name="[88]"></a>setoperated</STRONG> (Thumb, 688 bytes, Stack size 32 bytes, algo_proc_activity_recognition.o(i.setoperated))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = setoperated &rArr; cwm_ar_mldt_init &rArr; cwm_ar_mldt_enable &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHrRange_user
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHrRage
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_set_algo_config
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_sedenAct_operation
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_resume
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_reset_pedo_variables
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_reset_breach_variables
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_pause
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_metabolism_operation
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_memsize
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_init
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepCmd
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_activity_exit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc30_cwm_idc
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_swim
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_sedentary
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_pedometer
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_mldt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_metabolism
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_biking
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_arAlert
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set_actPauseDet
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_dbgPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_activity_recognition.o(i.obj_ar_new)
</UL>
<P><STRONG><a name="[514]"></a>sleepCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, algo_proc_activity_recognition.o(i.sleepCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sleepCmd &rArr; reportSleepData &rArr; ar_contentpacked
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt_sedenAct_operation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportSleepData
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[90]"></a>proc_rocking_detection</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, algo_proc_rocking_detection.o(.cwm_sec.common_amh_proc.p3))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = proc_rocking_detection &rArr; cwm_rocking_detection &rArr; rd_iasin &rArr; rd_ipow
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_algo_report
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rocking_detection
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_rocking_detection.o(i.obj_rockingdetection_new)
</UL>
<P><STRONG><a name="[320]"></a>algo_enable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, algo_proc_rocking_detection.o(i.algo_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algo_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_rocking_detection
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cwm_rocking_detection
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[8f]"></a>getoperated</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, algo_proc_rocking_detection.o(i.getoperated))
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_rocking_detection.o(i.obj_rockingdetection_new)
</UL>
<P><STRONG><a name="[8e]"></a>setoperated</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, algo_proc_rocking_detection.o(i.setoperated))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setoperated &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_rocking_detection
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_rocking_detection
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_rocking_detection
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_rocking_detection.o(i.obj_rockingdetection_new)
</UL>
<P><STRONG><a name="[8d]"></a>proc_watch_hand_up_down</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, algo_proc_watch_hand_up_down.o(.cwm_sec.common_amh_proc.p3))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = proc_watch_hand_up_down &rArr; cwm_watch_handupdown &rArr; reset_cwm_watch_handupdown &rArr; math_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_algo_report
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_watch_handupdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_watch_hand_up_down.o(i.obj_handupdownwatch_new)
</UL>
<P><STRONG><a name="[323]"></a>algo_enable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, algo_proc_watch_hand_up_down.o(i.algo_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algo_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_watch_handupdown
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cwm_watch_handupdown
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[32b]"></a>algo_set</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, algo_proc_watch_hand_up_down.o(i.algo_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = algo_set &rArr; set_config_cwm_watch_handupdown
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_watch_handupdown
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[8c]"></a>getoperated</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, algo_proc_watch_hand_up_down.o(i.getoperated))
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_watch_hand_up_down.o(i.obj_handupdownwatch_new)
</UL>
<P><STRONG><a name="[8b]"></a>setoperated</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, algo_proc_watch_hand_up_down.o(i.setoperated))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setoperated &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_watch_handupdown
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_watch_handupdown
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_watch_hand_up_down.o(i.obj_handupdownwatch_new)
</UL>
<P><STRONG><a name="[2f9]"></a>__embedded_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amh_common.o(i.__embedded_string))
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebdStrAmh
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__embedded_string
</UL>

<P><STRONG><a name="[87]"></a>proc_absolute_static</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, algo_proc_absolute_static.o(.cwm_sec.common_amh_proc.p3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = proc_absolute_static &rArr; cwm_absolute_static &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_main_algo_report
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_absolute_static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_absolute_static.o(i.obj_absolute_static_new)
</UL>
<P><STRONG><a name="[326]"></a>algo_enable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, algo_proc_absolute_static.o(i.algo_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = algo_enable &rArr; disable_cwm_absolute_static
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_absolute_static
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cwm_absolute_static
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[32d]"></a>algo_set</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, algo_proc_absolute_static.o(i.algo_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = algo_set
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_absolute_static
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setoperated
</UL>

<P><STRONG><a name="[86]"></a>getoperated</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, algo_proc_absolute_static.o(i.getoperated))
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_absolute_static.o(i.obj_absolute_static_new)
</UL>
<P><STRONG><a name="[85]"></a>setoperated</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, algo_proc_absolute_static.o(i.setoperated))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setoperated &rArr; sys_memAlloc &rArr; maaInit &rArr; getMallocInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_absolute_static
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_absolute_static
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_set
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_memAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> algo_proc_absolute_static.o(i.obj_absolute_static_new)
</UL>
<P><STRONG><a name="[34e]"></a>set_algo_config</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, amh_resample.o(i.set_algo_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_algo_config &rArr; config_cwm_resample
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_resample
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_internal_ctrl
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amh_reSample_config
</UL>

<P><STRONG><a name="[40b]"></a>rd_iabs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_rocking_detection.o(i.rd_iabs))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rocking_detection
</UL>

<P><STRONG><a name="[40a]"></a>rd_iasin</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cwm_rocking_detection.o(i.rd_iasin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rd_iasin &rArr; rd_ipow
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_ipow
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rocking_detection
</UL>

<P><STRONG><a name="[509]"></a>rd_ipow</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cwm_rocking_detection.o(i.rd_ipow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rd_ipow
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd_iasin
</UL>

<P><STRONG><a name="[409]"></a>rd_isqrt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cwm_rocking_detection.o(i.rd_isqrt))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rocking_detection
</UL>

<P><STRONG><a name="[417]"></a>rocking_detection_reset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cwm_rocking_detection.o(i.rocking_detection_reset))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_rocking_detection
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cwm_rocking_detection
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cwm_rocking_detection
</UL>

<P><STRONG><a name="[411]"></a>Low_Pass_Filter</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, cwm_watch_handupdown_extMem.o(i.Low_Pass_Filter))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_watch_handupdown
</UL>

<P><STRONG><a name="[414]"></a>ac_iabs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cwm_watch_handupdown_extMem.o(i.ac_iabs))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_watch_handupdown
</UL>

<P><STRONG><a name="[413]"></a>math_fabs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_watch_handupdown_extMem.o(i.math_fabs))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_cwm_watch_handupdown
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_watch_handupdown
</UL>

<P><STRONG><a name="[412]"></a>math_sqrt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cwm_watch_handupdown_extMem.o(i.math_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = math_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_cwm_watch_handupdown
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_watch_handupdown
</UL>

<P><STRONG><a name="[410]"></a>reset_cwm_watch_handupdown</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, cwm_watch_handupdown_extMem.o(i.reset_cwm_watch_handupdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reset_cwm_watch_handupdown &rArr; math_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_watch_handupdown
</UL>

<P><STRONG><a name="[415]"></a>reset_handup</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, cwm_watch_handupdown_extMem.o(i.reset_handup))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_watch_handupdown
</UL>

<P><STRONG><a name="[3df]"></a>ActivityRecogFilter</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, cwm_activity_recognition.o(i.ActivityRecogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[210]"></a>CalMovingAvg</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, cwm_activity_recognition.o(i.CalMovingAvg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalMovingAvg &rArr; isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAxisFeatures
</UL>

<P><STRONG><a name="[212]"></a>CalcAxisFeatures</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, cwm_activity_recognition.o(i.CalcAxisFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CalcAxisFeatures &rArr; CalMovingAvg &rArr; isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMovingAvg
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectData
</UL>

<P><STRONG><a name="[225]"></a>CheckValidData</STRONG> (Thumb, 874 bytes, Stack size 144 bytes, cwm_activity_recognition.o(i.CheckValidData))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CheckValidData &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[229]"></a>CollectData</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, cwm_activity_recognition.o(i.CollectData))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CollectData &rArr; CalcAxisFeatures &rArr; CalMovingAvg &rArr; isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxValueIndex
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAxisFeatures
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[235]"></a>DecideSedentaryType</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, cwm_activity_recognition.o(i.DecideSedentaryType))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DecideSedentaryType &rArr; FindConvPeaks
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindConvPeaks
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedentaryEvent
</UL>

<P><STRONG><a name="[237]"></a>DetermineAverageActivity</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, cwm_activity_recognition.o(i.DetermineAverageActivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DetermineAverageActivity &rArr; GetMaxValueIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxValueIndex
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkoutEvent
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleEvent
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedentaryEvent
</UL>

<P><STRONG><a name="[24a]"></a>FeaturesExtraction</STRONG> (Thumb, 652 bytes, Stack size 768 bytes, cwm_activity_recognition.o(i.FeaturesExtraction))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = FeaturesExtraction &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_quick_sort
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_median_crossing
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_find_median
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeanStd
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCorrelationCoef
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[236]"></a>FindConvPeaks</STRONG> (Thumb, 256 bytes, Stack size 112 bytes, cwm_activity_recognition.o(i.FindConvPeaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FindConvPeaks
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecideSedentaryType
</UL>

<P><STRONG><a name="[24c]"></a>GetCorrelationCoef</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, cwm_activity_recognition.o(i.GetCorrelationCoef))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetCorrelationCoef &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeaturesExtraction
</UL>

<P><STRONG><a name="[276]"></a>HandleMLDTReportEvent</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, cwm_activity_recognition.o(i.HandleMLDTReportEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = HandleMLDTReportEvent &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[2ef]"></a>IndexMapping</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cwm_activity_recognition.o(i.IndexMapping))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkoutEvent
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleEvent
</UL>

<P><STRONG><a name="[2c8]"></a>RealTimeFilter</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, cwm_activity_recognition.o(i.RealTimeFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RealTimeFilter &rArr; GetMaxValueIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxValueIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[2cc]"></a>ResetThreeSecWindow</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cwm_activity_recognition.o(i.ResetThreeSecWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ResetThreeSecWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RollActivityBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[2ce]"></a>ResetVariables</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, cwm_activity_recognition.o(i.ResetVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ResetVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[2ee]"></a>ResultMapping</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cwm_activity_recognition.o(i.ResultMapping))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkoutEvent
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WalkRunEvent
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VehicleEvent
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[2cd]"></a>RollActivityBuffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cwm_activity_recognition.o(i.RollActivityBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetThreeSecWindow
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[2dd]"></a>SedentaryEvent</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, cwm_activity_recognition.o(i.SedentaryEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SedentaryEvent &rArr; DecideSedentaryType &rArr; FindConvPeaks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeanStd
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineAverageActivity
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecideSedentaryType
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ar_mldt
</UL>

<P><STRONG><a name="[f]"></a>UnknownEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_activity_recognition.o(i.UnknownEvent))
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_recognition.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>VehicleEvent</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cwm_activity_recognition.o(i.VehicleEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VehicleEvent &rArr; DetermineAverageActivity &rArr; GetMaxValueIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResultMapping
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndexMapping
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineAverageActivity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_recognition.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>WalkRunEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_activity_recognition.o(i.WalkRunEvent))
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResultMapping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_recognition.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>WorkoutEvent</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, cwm_activity_recognition.o(i.WorkoutEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WorkoutEvent &rArr; DetermineAverageActivity &rArr; GetMaxValueIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResultMapping
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndexMapping
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineAverageActivity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_recognition.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>cwm_resample_EMA_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cwm_resample.o(i.cwm_resample_EMA_get))
<BR>[Address Reference Count : 1]<UL><LI> cwm_resample.o(i.config_cwm_resample)
</UL>
<P><STRONG><a name="[74]"></a>cwm_resample_EMA_update</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cwm_resample.o(i.cwm_resample_EMA_update))
<BR><BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_resample_counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_resample.o(i.config_cwm_resample)
</UL>
<P><STRONG><a name="[73]"></a>cwm_resample_SMA_get</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cwm_resample.o(i.cwm_resample_SMA_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cwm_resample_SMA_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_resample.o(i.config_cwm_resample)
</UL>
<P><STRONG><a name="[72]"></a>cwm_resample_SMA_update</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cwm_resample.o(i.cwm_resample_SMA_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cwm_resample_SMA_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_resample.o(i.config_cwm_resample)
</UL>
<P><STRONG><a name="[408]"></a>cwm_resample_counter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cwm_resample.o(i.cwm_resample_counter))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_resample_EMA_update
</UL>

<P><STRONG><a name="[407]"></a>cwm_resample_run</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, cwm_resample.o(i.cwm_resample_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cwm_resample_run &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_resample
</UL>

<P><STRONG><a name="[26c]"></a>HandleDailyData</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, cwm_algorithm_interface.o(i.HandleDailyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HandleDailyData
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDailyData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetShareAlgo
</UL>

<P><STRONG><a name="[26d]"></a>SetDailyData</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, cwm_algorithm_interface.o(i.SetDailyData))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDailyInfo
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleDailyData
</UL>

<P><STRONG><a name="[f3]"></a>BreachCheckSteps</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_ar_utility_interface.o(i.BreachCheckSteps))
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>BreachReportEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cwm_ar_utility_interface.o(i.BreachReportEvent))
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>BreachResetVariables</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cwm_ar_utility_interface.o(i.BreachResetVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BreachResetVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>ElevationActivate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cwm_ar_utility_interface.o(i.ElevationActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ElevationActivate &rArr; cwm_elevation_estimation &rArr; elevation_estimation_update &rArr; elevation_update &rArr; slope_angle_update &rArr; cwm_atan2 &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_elevation_estimation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>ElevationSetConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_ar_utility_interface.o(i.ElevationSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ElevationSetConfig &rArr; set_config_cwm_elevation_estimation
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_elevation_estimation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>GNSSFilterActivate</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, cwm_ar_utility_interface.o(i.GNSSFilterActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = GNSSFilterActivate &rArr; cwm_gps_filter &rArr; gnss_smoother_update &rArr; points_smoother &rArr; cwm_mean_filter &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>GNSSFilterSetConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_ar_utility_interface.o(i.GNSSFilterSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GNSSFilterSetConfig &rArr; set_config_cwm_gps_filter &rArr; gnss_filter_info_buffer_init &rArr; gnss_spatial_info_buffer_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_gps_filter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>HandWashReport</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cwm_ar_utility_interface.o(i.HandWashReport))
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>MetabolismActivate</STRONG> (Thumb, 88 bytes, Stack size 96 bytes, cwm_ar_utility_interface.o(i.MetabolismActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = MetabolismActivate &rArr; cwm_metabolism &rArr; MetabolismInputCheck &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>MetabolismGetConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_ar_utility_interface.o(i.MetabolismGetConfig))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_get_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>MetabolismOperation</STRONG> (Thumb, 34 bytes, Stack size 56 bytes, cwm_ar_utility_interface.o(i.MetabolismOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MetabolismOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>MetabolismSetConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cwm_ar_utility_interface.o(i.MetabolismSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = MetabolismSetConfig &rArr; cwm_metabolism_set_config &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_set_config
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>MetabolsimAnaerobicTask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_ar_utility_interface.o(i.MetabolsimAnaerobicTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MetabolsimAnaerobicTask &rArr; cwm_metabolism_anaerobic_te_task &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_anaerobic_te_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>MetabolsimUpdateMetrics</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cwm_ar_utility_interface.o(i.MetabolsimUpdateMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MetabolsimUpdateMetrics &rArr; cwm_metabolism_update_metrics &rArr; UpdateTeAndRecoveryTime &rArr; GetRecoveryTime &rArr; GetInterpolatedValue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_update_metrics
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>UtilityCreateObject</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cwm_ar_utility_interface.o(i.UtilityCreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UtilityCreateObject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>UtilityGetMemSize</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cwm_ar_utility_interface.o(i.UtilityGetMemSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UtilityGetMemSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_embedded_string
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_gps_filter
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_elevation_estimation
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_memsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_ar_utility_interface.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>PedometerAccumulateMAI</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, cwm_pedometer_interface.o(i.PedometerAccumulateMAI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PedometerAccumulateMAI &rArr; cwmMat_length &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>PedometerActivate</STRONG> (Thumb, 262 bytes, Stack size 448 bytes, cwm_pedometer_interface.o(i.PedometerActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = PedometerActivate &rArr; cwm_pedometer &rArr; GetStepCounter &rArr; FindSteps &rArr; cwm_bubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDailyInfo
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensors_cwm_pedometer
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_steps_filtered_cwm_pedometer
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerPassVariables
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>PedometerCreateObject</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cwm_pedometer_interface.o(i.PedometerCreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PedometerCreateObject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>PedometerExit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cwm_pedometer_interface.o(i.PedometerExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = PedometerExit &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>PedometerGetConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_pedometer_interface.o(i.PedometerGetConfig))
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_cwm_pedometer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>PedometerGetMemSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_pedometer_interface.o(i.PedometerGetMemSize))
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_pedometer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[2af]"></a>PedometerPassVariables</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, cwm_pedometer_interface.o(i.PedometerPassVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PedometerPassVariables
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerActivate
</UL>

<P><STRONG><a name="[10f]"></a>PedometerReportSteps</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, cwm_pedometer_interface.o(i.PedometerReportSteps))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = PedometerReportSteps &rArr; stairsUpdate &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stairsUpdate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_variables_cwm_pedometer
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pause_config_cwm_pedometer
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRemainSteps
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSyncInfo
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetUpdateBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>PedometerSetCaloriesInfo</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, cwm_pedometer_interface.o(i.PedometerSetCaloriesInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PedometerSetCaloriesInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_calories_cwm_pedometer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>PedometerSetConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cwm_pedometer_interface.o(i.PedometerSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PedometerSetConfig &rArr; set_config_cwm_pedometer
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_pedometer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>PedometerSetGNSSInfo</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, cwm_pedometer_interface.o(i.PedometerSetGNSSInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = PedometerSetGNSSInfo &rArr; set_gnss_info_cwm_pedometer &rArr; gnssProcessing &rArr; isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gnss_info_cwm_pedometer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[2be]"></a>PedometerSetNormalInfo</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, cwm_pedometer_interface.o(i.PedometerSetNormalInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PedometerSetNormalInfo &rArr; PedometerSetOutputSteps
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_cwm_pedometer
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_calories_cwm_pedometer
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetOutputSteps
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetOutputDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerUpdateInfo
</UL>

<P><STRONG><a name="[2c0]"></a>PedometerSetOutputDistance</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, cwm_pedometer_interface.o(i.PedometerSetOutputDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PedometerSetOutputDistance
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_cwm_pedometer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetUpdateBack
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetNormalInfo
</UL>

<P><STRONG><a name="[2bf]"></a>PedometerSetOutputSteps</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cwm_pedometer_interface.o(i.PedometerSetOutputSteps))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PedometerSetOutputSteps
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_cwm_pedometer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetUpdateBack
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetNormalInfo
</UL>

<P><STRONG><a name="[5a]"></a>PedometerSetTmConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cwm_pedometer_interface.o(i.PedometerSetTmConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = PedometerSetTmConfig &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tm_calib_cwm_pedometer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(i.PedometerCreateObject)
</UL>
<P><STRONG><a name="[2b7]"></a>PedometerSetUpdateBack</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cwm_pedometer_interface.o(i.PedometerSetUpdateBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PedometerSetUpdateBack &rArr; PedometerSetOutputSteps
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetOutputSteps
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetOutputDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRemainSteps
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerReportSteps
</UL>

<P><STRONG><a name="[2b6]"></a>PedometerSyncInfo</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, cwm_pedometer_interface.o(i.PedometerSyncInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PedometerSyncInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steps_filtered_cwm_pedometer
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_analysis_info_cwm_pedometer
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAveragePace
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRemainSteps
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerReportSteps
</UL>

<P><STRONG><a name="[10e]"></a>PedometerUpdateInfo</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cwm_pedometer_interface.o(i.PedometerUpdateInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PedometerUpdateInfo &rArr; PedometerSetNormalInfo &rArr; PedometerSetOutputSteps
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tm_calib_cwm_pedometer
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetNormalInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pedometer_interface.o(.constdata)
</UL>
<P><STRONG><a name="[2ba]"></a>ReportRemainSteps</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cwm_pedometer_interface.o(i.ReportRemainSteps))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReportRemainSteps &rArr; PedometerSyncInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSyncInfo
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerSetUpdateBack
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedometerReportSteps
</UL>

<P><STRONG><a name="[1c9]"></a>ActivityScoresDebugLog</STRONG> (Thumb, 144 bytes, Stack size 136 bytes, cwm_seden_activity_interface.o(i.ActivityScoresDebugLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ActivityScoresDebugLog &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateActivityScores
</UL>

<P><STRONG><a name="[119]"></a>CalculateActivityScores</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, cwm_seden_activity_interface.o(i.CalculateActivityScores))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = CalculateActivityScores &rArr; UpdateActivityScores &rArr; ActivityScoresDebugLog &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmVec_movingAvg_SQR
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeanStd
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLowActivity
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateActivityScores
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectASData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[214]"></a>CollectASData</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, cwm_seden_activity_interface.o(i.CollectASData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CollectASData &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateActivityScores
</UL>

<P><STRONG><a name="[22f]"></a>ConvertAccToCount</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, cwm_seden_activity_interface.o(i.ConvertAccToCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConvertAccToCount &rArr; cwmMat_length &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_imax
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateActivityScores
</UL>

<P><STRONG><a name="[117]"></a>GetSedenActMemSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_seden_activity_interface.o(i.GetSedenActMemSize))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_sedentary_activity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[2aa]"></a>PassVariablesToSeden</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, cwm_seden_activity_interface.o(i.PassVariablesToSeden))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PassVariablesToSeden &rArr; GetMeanStd &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeanStd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SedenActActivate
</UL>

<P><STRONG><a name="[128]"></a>SedenActActivate</STRONG> (Thumb, 108 bytes, Stack size 160 bytes, cwm_seden_activity_interface.o(i.SedenActActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = SedenActActivate &rArr; cwm_sedentary_activity &rArr; HandleSedenActReportFlow &rArr; HandleSedenSystemEvent &rArr; HandleSleepStop &rArr; OutputStopSleepTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAlgosOutput
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassVariablesToSeden
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>SedenActCreateObject</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cwm_seden_activity_interface.o(i.SedenActCreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SedenActCreateObject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>SedenActGetConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_seden_activity_interface.o(i.SedenActGetConfig))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getConfig_cwm_sedentary_activity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>SedenActOperation</STRONG> (Thumb, 34 bytes, Stack size 56 bytes, cwm_seden_activity_interface.o(i.SedenActOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SedenActOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>SedenActSetConfig</STRONG> (Thumb, 164 bytes, Stack size 152 bytes, cwm_seden_activity_interface.o(i.SedenActSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = SedenActSetConfig &rArr; config_cwm_sedentary_activity &rArr; ConfigSleep &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_sedentary_activity
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_seden_activity_interface.o(.constdata)
</UL>
<P><STRONG><a name="[217]"></a>UpdateActivityScores</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, cwm_seden_activity_interface.o(i.UpdateActivityScores))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = UpdateActivityScores &rArr; ActivityScoresDebugLog &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertAccToCount
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityScoresDebugLog
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateActivityScores
</UL>

<P><STRONG><a name="[216]"></a>UpdateLowActivity</STRONG> (Thumb, 646 bytes, Stack size 32 bytes, cwm_seden_activity_interface.o(i.UpdateLowActivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UpdateLowActivity
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateActivityScores
</UL>

<P><STRONG><a name="[12a]"></a>SwimCreateObject</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_swim_interface.o(i.SwimCreateObject))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_swim_interface.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>SwimGetMemSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_swim_interface.o(i.SwimGetMemSize))
<BR>[Address Reference Count : 1]<UL><LI> cwm_swim_interface.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>ActivateBiking</STRONG> (Thumb, 262 bytes, Stack size 288 bytes, cwm_biking_interface.o(i.ActivateBiking))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ActivateBiking &rArr; cwm_biking &rArr; metabolism_event_update &rArr; cwm_metabolism &rArr; MetabolismInputCheck &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeCalories
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetShareAlgo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGNSSRelatedAlgo
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAlgo
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BikingSaveOutput
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_biking_interface.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>BikingCreateObject</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_biking_interface.o(i.BikingCreateObject))
<BR>[Address Reference Count : 1]<UL><LI> cwm_biking_interface.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>BikingExit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_biking_interface.o(i.BikingExit))
<BR>[Address Reference Count : 1]<UL><LI> cwm_biking_interface.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>BikingGetMemSize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cwm_biking_interface.o(i.BikingGetMemSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BikingGetMemSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_embedded_string
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memsize_cwm_biking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_biking_interface.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>BikingPause</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_biking_interface.o(i.BikingPause))
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_biking_pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_biking_interface.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>BikingResume</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_biking_interface.o(i.BikingResume))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_biking_pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_biking_interface.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>BikingSaveOutput</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, cwm_biking_interface.o(i.BikingSaveOutput))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBiking
</UL>

<P><STRONG><a name="[132]"></a>BikingSetConfig</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cwm_biking_interface.o(i.BikingSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BikingSetConfig &rArr; set_config_cwm_biking
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_biking
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_biking_interface.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>OPDRCreateObject</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_PDR_interface.o(i.OPDRCreateObject))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_PDR_interface.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>FitnessCreateObject</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cwm_fitness_interface.o(i.FitnessCreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FitnessCreateObject
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_fitness_interface.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>FitnessGetMemSize</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cwm_fitness_interface.o(i.FitnessGetMemSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FitnessGetMemSize &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_max
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_fitness_interface.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>ActivityAlertActivate</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, cwm_activity_alert_interface.o(i.ActivityAlertActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ActivityAlertActivate &rArr; cwm_activity_alert_get_hand_type &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert_get_hand_type
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertPassVariables
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_alert_interface.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>ActivityAlertCreateObject</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cwm_activity_alert_interface.o(i.ActivityAlertCreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ActivityAlertCreateObject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_alert_interface.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>ActivityAlertGetConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_activity_alert_interface.o(i.ActivityAlertGetConfig))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert_get_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_alert_interface.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>ActivityAlertGetMemSize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cwm_activity_alert_interface.o(i.ActivityAlertGetMemSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ActivityAlertGetMemSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_embedded_string
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert_memsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_alert_interface.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>ActivityAlertPassVariables</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, cwm_activity_alert_interface.o(i.ActivityAlertPassVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ActivityAlertPassVariables &rArr; IsSwimActivity
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSwimActivity
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertActivate
</UL>

<P><STRONG><a name="[13c]"></a>ActivityAlertSetConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cwm_activity_alert_interface.o(i.ActivityAlertSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ActivityAlertSetConfig &rArr; cwm_activity_alert_set_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert_set_config
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_activity_alert_interface.o(.constdata)
</UL>
<P><STRONG><a name="[1c0]"></a>IsSwimActivity</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, cwm_activity_alert_interface.o(i.IsSwimActivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsSwimActivity
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertPassVariables
</UL>

<P><STRONG><a name="[140]"></a>PauseResumeCreateObject</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cwm_pause_resume_interface.o(i.PauseResumeCreateObject))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_pause_resume_interface.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>PauseResumeGetMemSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_pause_resume_interface.o(i.PauseResumeGetMemSize))
<BR>[Address Reference Count : 1]<UL><LI> cwm_pause_resume_interface.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>SportsSwingCreate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_sports_swing_interface.o(i.SportsSwingCreate))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEmptyTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cwm_sports_swing_interface.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>SportsSwingGetMemSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cwm_sports_swing_interface.o(i.SportsSwingGetMemSize))
<BR>[Address Reference Count : 1]<UL><LI> cwm_sports_swing_interface.o(.constdata)
</UL>
<P><STRONG><a name="[3b9]"></a>calculate_prior_index</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cwm_gps_filter.o(i.calculate_prior_index))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_update
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_filter_input
</UL>

<P><STRONG><a name="[3b8]"></a>check_gnss_filter_input</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, cwm_gps_filter.o(i.check_gnss_filter_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = check_gnss_filter_input &rArr; check_gnss_points &rArr; wgs84_to_distance &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_points
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_point
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_prior_index
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter
</UL>

<P><STRONG><a name="[3ba]"></a>check_gnss_point</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, cwm_gps_filter.o(i.check_gnss_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_gnss_point &rArr; cwm_abs
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_abs
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_filter_input
</UL>

<P><STRONG><a name="[3bb]"></a>check_gnss_points</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, cwm_gps_filter.o(i.check_gnss_points))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = check_gnss_points &rArr; wgs84_to_distance &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_filter_input
</UL>

<P><STRONG><a name="[3c4]"></a>clone_gps_filter_output</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, cwm_gps_filter.o(i.clone_gps_filter_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clone_gps_filter_output
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter
</UL>

<P><STRONG><a name="[3f2]"></a>cwm_check_data_convergence</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cwm_gps_filter.o(i.cwm_check_data_convergence))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cwm_check_data_convergence
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precision_update
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_issue_return
</UL>

<P><STRONG><a name="[3fb]"></a>gnss_filter_info_buffer_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cwm_gps_filter.o(i.gnss_filter_info_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gnss_filter_info_buffer_init &rArr; gnss_spatial_info_buffer_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_init
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_buffer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_cwm_gps_filter
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter_init
</UL>

<P><STRONG><a name="[3fa]"></a>gnss_smoother_update</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, cwm_gps_filter.o(i.gnss_smoother_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = gnss_smoother_update &rArr; points_smoother &rArr; cwm_mean_filter &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three_points_buffer_update
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoother_info_update
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;points_smoother
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_info_update
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_update
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter
</UL>

<P><STRONG><a name="[3f9]"></a>gnss_spatial_filter_update</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, cwm_gps_filter.o(i.gnss_spatial_filter_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = gnss_spatial_filter_update &rArr; gnss_spatial_info_update &rArr; wgs84_to_angle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three_points_buffer_update
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default_gnss_spatial_info_constraint
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_info_update
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_update
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_issue_return
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_buffer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter
</UL>

<P><STRONG><a name="[435]"></a>gnss_spatial_info_buffer_reset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cwm_gps_filter.o(i.gnss_spatial_info_buffer_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gnss_spatial_info_buffer_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_filter_update
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_filter_info_buffer_init
</UL>

<P><STRONG><a name="[43a]"></a>gnss_spatial_info_issue_return</STRONG> (Thumb, 458 bytes, Stack size 64 bytes, cwm_gps_filter.o(i.gnss_spatial_info_issue_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gnss_spatial_info_issue_return &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_check_data_convergence
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_filter_update
</UL>

<P><STRONG><a name="[439]"></a>gnss_spatial_info_update</STRONG> (Thumb, 268 bytes, Stack size 72 bytes, cwm_gps_filter.o(i.gnss_spatial_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gnss_spatial_info_update &rArr; wgs84_to_angle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_info_update
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_angle
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_prior_index
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_filter_update
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_smoother_update
</UL>

<P><STRONG><a name="[3f7]"></a>location_info_update</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, cwm_gps_filter.o(i.location_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = location_info_update &rArr; wgs84_to_distance &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_filter_update
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_smoother_update
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter
</UL>

<P><STRONG><a name="[437]"></a>points_smoother</STRONG> (Thumb, 368 bytes, Stack size 184 bytes, cwm_gps_filter.o(i.points_smoother))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = points_smoother &rArr; cwm_mean_filter &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_abs
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_mean_filter
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_smoother_update
</UL>

<P><STRONG><a name="[3f8]"></a>precision_update</STRONG> (Thumb, 952 bytes, Stack size 288 bytes, cwm_gps_filter.o(i.precision_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = precision_update &rArr; cwm_check_data_convergence
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_check_data_convergence
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter
</UL>

<P><STRONG><a name="[3fc]"></a>set_default_gnss_spatial_info_constraint</STRONG> (Thumb, 106 bytes, Stack size 44 bytes, cwm_gps_filter.o(i.set_default_gnss_spatial_info_constraint))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = set_default_gnss_spatial_info_constraint
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_filter_update
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_gps_filter_init
</UL>

<P><STRONG><a name="[436]"></a>smoother_info_update</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, cwm_gps_filter.o(i.smoother_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = smoother_info_update &rArr; wgs84_to_distance &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgs84_to_distance
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_smoother_update
</UL>

<P><STRONG><a name="[438]"></a>three_points_buffer_update</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, cwm_gps_filter.o(i.three_points_buffer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = three_points_buffer_update
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_filter_update
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_smoother_update
</UL>

<P><STRONG><a name="[43b]"></a>wgs84_to_angle</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, cwm_gps_filter.o(i.wgs84_to_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wgs84_to_angle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_acos
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_abs
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_update
</UL>

<P><STRONG><a name="[3bd]"></a>wgs84_to_distance</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, cwm_gps_filter.o(i.wgs84_to_distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wgs84_to_distance &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_cos
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_atan2
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sin
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoother_info_update
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_info_update
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gnss_spatial_info_update
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gnss_points
</UL>

<P><STRONG><a name="[20f]"></a>CalHRRZoneAndIntensity</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, cwm_metabolism.o(i.CalHRRZoneAndIntensity))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMetaMetrics
</UL>

<P><STRONG><a name="[20e]"></a>CalMetaMetrics</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, cwm_metabolism.o(i.CalMetaMetrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalMetaMetrics
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalHRRZoneAndIntensity
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
</UL>

<P><STRONG><a name="[218]"></a>CalculateAerobicTe</STRONG> (Thumb, 446 bytes, Stack size 152 bytes, cwm_metabolism.o(i.CalculateAerobicTe))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CalculateAerobicTe &rArr; GetInterpolatedValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInterpolatedValue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
</UL>

<P><STRONG><a name="[21a]"></a>CalculateEPOC</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, cwm_metabolism.o(i.CalculateEPOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CalculateEPOC
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPolynomial
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
</UL>

<P><STRONG><a name="[21c]"></a>CalculatePAI</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, cwm_metabolism.o(i.CalculatePAI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CalculatePAI &rArr; __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
</UL>

<P><STRONG><a name="[219]"></a>GetInterpolatedValue</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, cwm_metabolism.o(i.GetInterpolatedValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetInterpolatedValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecoveryTime
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAerobicTe
</UL>

<P><STRONG><a name="[21b]"></a>GetPolynomial</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cwm_metabolism.o(i.GetPolynomial))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateEPOC
</UL>

<P><STRONG><a name="[261]"></a>GetRecoveryTime</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, cwm_metabolism.o(i.GetRecoveryTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GetRecoveryTime &rArr; GetInterpolatedValue
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInterpolatedValue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTeAndRecoveryTime
</UL>

<P><STRONG><a name="[29e]"></a>MetabolismInputCheck</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cwm_metabolism.o(i.MetabolismInputCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MetabolismInputCheck &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
</UL>

<P><STRONG><a name="[400]"></a>RollingWeekBuffer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cwm_metabolism.o(i.RollingWeekBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_rolling_weekly_data
</UL>

<P><STRONG><a name="[3fe]"></a>UpdateMetaModel</STRONG> (Thumb, 1432 bytes, Stack size 12 bytes, cwm_metabolism.o(i.UpdateMetaModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UpdateMetaModel
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_set_config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_init
</UL>

<P><STRONG><a name="[3ff]"></a>UpdatePAIModel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cwm_metabolism.o(i.UpdatePAIModel))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_set_config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_init
</UL>

<P><STRONG><a name="[2ea]"></a>UpdateTeAndRecoveryTime</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, cwm_metabolism.o(i.UpdateTeAndRecoveryTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UpdateTeAndRecoveryTime &rArr; GetRecoveryTime &rArr; GetInterpolatedValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecoveryTime
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_update_metrics
</UL>

<P><STRONG><a name="[402]"></a>AccAnalysis</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, cwm_pedometer_watch_activity.o(i.AccAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AccAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[21e]"></a>CheckAxisAccMess</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, cwm_pedometer_watch_activity.o(i.CheckAxisAccMess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckAxisAccMess
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[244]"></a>ElevationProcess</STRONG> (Thumb, 484 bytes, Stack size 64 bytes, cwm_pedometer_watch_activity.o(i.ElevationProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ElevationProcess &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stairsUpdateInternal
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StairsDetection
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_xlnSmall
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[24f]"></a>FindPeaks</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, cwm_pedometer_watch_activity.o(i.FindPeaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FindPeaks &rArr; cwm_bubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_bubbleSort
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isFalseTrigger
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepCounter
</UL>

<P><STRONG><a name="[251]"></a>FindSteps</STRONG> (Thumb, 746 bytes, Stack size 520 bytes, cwm_pedometer_watch_activity.o(i.FindSteps))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = FindSteps &rArr; cwm_bubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_bubbleSort
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeakValleyNMS
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isFalseTrigger
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepCounter
</UL>

<P><STRONG><a name="[25d]"></a>GetMetabolism</STRONG> (Thumb, 562 bytes, Stack size 168 bytes, cwm_pedometer_watch_activity.o(i.GetMetabolism))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = GetMetabolism &rArr; cwm_metabolism &rArr; MetabolismInputCheck &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_calAvgMaxMin
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVO2maxRunSection
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PedoOutputUpdate
</UL>

<P><STRONG><a name="[263]"></a>GetStepCounter</STRONG> (Thumb, 588 bytes, Stack size 1064 bytes, cwm_pedometer_watch_activity.o(i.GetStepCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = GetStepCounter &rArr; FindSteps &rArr; cwm_bubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalMessCheck
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeakFilter
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSteps
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPeaks
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[404]"></a>GetStepFilter</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, cwm_pedometer_watch_activity.o(i.GetStepFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetStepFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[266]"></a>GetStepFrequency</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, cwm_pedometer_watch_activity.o(i.GetStepFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GetStepFrequency &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[260]"></a>GetVO2maxRunSection</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, cwm_pedometer_watch_activity.o(i.GetVO2maxRunSection))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetVO2maxRunSection &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMetabolism
</UL>

<P><STRONG><a name="[265]"></a>PeakFilter</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, cwm_pedometer_watch_activity.o(i.PeakFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PeakFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubWindowClassification
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepCounter
</UL>

<P><STRONG><a name="[252]"></a>PeakValleyNMS</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, cwm_pedometer_watch_activity.o(i.PeakValleyNMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PeakValleyNMS
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSteps
</UL>

<P><STRONG><a name="[2ac]"></a>PedoOutputUpdate</STRONG> (Thumb, 890 bytes, Stack size 48 bytes, cwm_pedometer_watch_activity.o(i.PedoOutputUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = PedoOutputUpdate &rArr; GetMetabolism &rArr; cwm_metabolism &rArr; MetabolismInputCheck &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMetabolism
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAveragePace
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[264]"></a>SignalMessCheck</STRONG> (Thumb, 194 bytes, Stack size 28 bytes, cwm_pedometer_watch_activity.o(i.SignalMessCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SignalMessCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepCounter
</UL>

<P><STRONG><a name="[246]"></a>StairsDetection</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, cwm_pedometer_watch_activity.o(i.StairsDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = StairsDetection
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElevationProcess
</UL>

<P><STRONG><a name="[51e]"></a>StrideCalibrate</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.StrideCalibrate))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strideEstimation
</UL>

<P><STRONG><a name="[2ab]"></a>SubWindowClassification</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.SubWindowClassification))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeakFilter
</UL>

<P><STRONG><a name="[434]"></a>gnssProcessing</STRONG> (Thumb, 518 bytes, Stack size 56 bytes, cwm_pedometer_watch_activity.o(i.gnssProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gnssProcessing &rArr; isZeroFlt
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gnss_info_cwm_pedometer
</UL>

<P><STRONG><a name="[403]"></a>isFalseTrigger</STRONG> (Thumb, 306 bytes, Stack size 1016 bytes, cwm_pedometer_watch_activity.o(i.isFalseTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = isFalseTrigger &rArr; FindSteps &rArr; cwm_bubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSteps
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPeaks
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[406]"></a>paceEstimation</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, cwm_pedometer_watch_activity.o(i.paceEstimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = paceEstimation
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[247]"></a>stairsUpdateInternal</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, cwm_pedometer_watch_activity.o(i.stairsUpdateInternal))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElevationProcess
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stairsUpdate
</UL>

<P><STRONG><a name="[405]"></a>strideEstimation</STRONG> (Thumb, 868 bytes, Stack size 120 bytes, cwm_pedometer_watch_activity.o(i.strideEstimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = strideEstimation &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrideCalibrate
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism_get_config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_pedometer
</UL>

<P><STRONG><a name="[269]"></a>AccumulateReleaseTime</STRONG> (Thumb, 172 bytes, Stack size 12 bytes, cwm_sedentary_activity.o(i.AccumulateReleaseTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AccumulateReleaseTime
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReminderAndRelease
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleAlarmAndNonstatic
</UL>

<P><STRONG><a name="[40d]"></a>AccumulateSleepTime</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, cwm_sedentary_activity.o(i.AccumulateSleepTime))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[1af]"></a>AccumulateStandTime</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, cwm_sedentary_activity.o(i.AccumulateStandTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = AccumulateStandTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_acos
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwmMat_length
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStand
</UL>

<P><STRONG><a name="[271]"></a>CalculateConfidence</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, cwm_sedentary_activity.o(i.CalculateConfidence))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleHeartRate
</UL>

<P><STRONG><a name="[21f]"></a>CheckDelayMode</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cwm_sedentary_activity.o(i.CheckDelayMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CheckDelayMode &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeBaseSwicth
</UL>

<P><STRONG><a name="[220]"></a>CheckGapTime</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, cwm_sedentary_activity.o(i.CheckGapTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CheckGapTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StageREMbyHeartRate
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStopSleepTime
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputOperationTime
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputAwakeSleepTime
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLightDeepTime
</UL>

<P><STRONG><a name="[221]"></a>CheckOutputBuffer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cwm_sedentary_activity.o(i.CheckOutputBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CheckOutputBuffer &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStartSleepTime
</UL>

<P><STRONG><a name="[222]"></a>CheckStartNoticeEvent</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cwm_sedentary_activity.o(i.CheckStartNoticeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CheckStartNoticeEvent &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSleepStop
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNotice
</UL>

<P><STRONG><a name="[223]"></a>CheckTimeDiff</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.CheckTimeDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CheckTimeDiff &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_iabs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
</UL>

<P><STRONG><a name="[22b]"></a>ConfigMode</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, cwm_sedentary_activity.o(i.ConfigMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ConfigMode &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_sedentary_activity
</UL>

<P><STRONG><a name="[22c]"></a>ConfigSedentary</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, cwm_sedentary_activity.o(i.ConfigSedentary))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ConfigSedentary &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ThresholdInRange_int
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_sedentary_activity
</UL>

<P><STRONG><a name="[22e]"></a>ConfigSleep</STRONG> (Thumb, 190 bytes, Stack size 160 bytes, cwm_sedentary_activity.o(i.ConfigSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ConfigSleep &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_ThresholdInRange_int
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_cwm_sedentary_activity
</UL>

<P><STRONG><a name="[233]"></a>DateToUnixTime</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.DateToUnixTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DateToUnixTime &rArr; timedate2sec
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timedate2sec
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhTime2timedate
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_set_ap_status
</UL>

<P><STRONG><a name="[40c]"></a>DetectHighActivity</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, cwm_sedentary_activity.o(i.DetectHighActivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DetectHighActivity
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[267]"></a>HandleAccumuStatusTime</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, cwm_sedentary_activity.o(i.HandleAccumuStatusTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleAccumuStatusTime
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_imax
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_accumulated_time
</UL>

<P><STRONG><a name="[268]"></a>HandleAlarmAndNonstatic</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, cwm_sedentary_activity.o(i.HandleAlarmAndNonstatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HandleAlarmAndNonstatic &rArr; AccumulateReleaseTime
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumulateReleaseTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[26a]"></a>HandleBackToSleep</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.HandleBackToSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = HandleBackToSleep &rArr; OutputAwakeSleepTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputAwakeSleepTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[26e]"></a>HandleFakesleep</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cwm_sedentary_activity.o(i.HandleFakesleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HandleFakesleep &rArr; ResetActScoreSleep &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetActScoreSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStopEvent
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSleepStop
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_get_sleep_report_data
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[270]"></a>HandleHeartRate</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, cwm_sedentary_activity.o(i.HandleHeartRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HandleHeartRate &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateConfidence
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[272]"></a>HandleLightDeepTime</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, cwm_sedentary_activity.o(i.HandleLightDeepTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = HandleLightDeepTime &rArr; SetStatusProportion &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStatusProportion
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStatusTime
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGapTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[277]"></a>HandleModeSwitch</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, cwm_sedentary_activity.o(i.HandleModeSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = HandleModeSwitch &rArr; HandleTimeBaseSwicth &rArr; CheckDelayMode &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeBaseSwicth
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[279]"></a>HandleNapStop</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.HandleNapStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = HandleNapStop &rArr; HandleNotice &rArr; OutputStartSleepTime &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNotice
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenSystemEvent
</UL>

<P><STRONG><a name="[27a]"></a>HandleNotice</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, cwm_sedentary_activity.o(i.HandleNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = HandleNotice &rArr; OutputStartSleepTime &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_cwm_sedentary_activity
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStartSleepTime
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNoticeCondition
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStartNoticeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStopEvent
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNapStop
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[27e]"></a>HandleReminderAndRelease</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, cwm_sedentary_activity.o(i.HandleReminderAndRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HandleReminderAndRelease &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumulateReleaseTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[27f]"></a>HandleSedenActReportFlow</STRONG> (Thumb, 498 bytes, Stack size 72 bytes, cwm_sedentary_activity.o(i.HandleSedenActReportFlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = HandleSedenActReportFlow &rArr; HandleSedenSystemEvent &rArr; HandleSleepStop &rArr; OutputStopSleepTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedentary
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetActScoreSleep
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStopEvent
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenSystemEvent
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateToUnixTime
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeDiff
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[280]"></a>HandleSedenSystemEvent</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, cwm_sedentary_activity.o(i.HandleSedenSystemEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = HandleSedenSystemEvent &rArr; HandleSleepStop &rArr; OutputStopSleepTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedentary
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetActScoreSleep
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSleepStop
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNapStop
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
</UL>

<P><STRONG><a name="[284]"></a>HandleSleepStatus</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.HandleSleepStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = HandleSleepStatus &rArr; StageREMbyHeartRate &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StageREMbyHeartRate
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[283]"></a>HandleSleepStop</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, cwm_sedentary_activity.o(i.HandleSleepStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = HandleSleepStop &rArr; OutputStopSleepTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStopSleepTime
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStartSleepTime
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleFakesleep
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStartNoticeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenSystemEvent
</UL>

<P><STRONG><a name="[287]"></a>HandleStand</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.HandleStand))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = HandleStand &rArr; AccumulateStandTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedentary
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumulateStandTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[281]"></a>HandleStopEvent</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, cwm_sedentary_activity.o(i.HandleStopEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = HandleStopEvent &rArr; OutputStopSleepTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStopSleepTime
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNotice
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleFakesleep
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[278]"></a>HandleTimeBaseSwicth</STRONG> (Thumb, 514 bytes, Stack size 72 bytes, cwm_sedentary_activity.o(i.HandleTimeBaseSwicth))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = HandleTimeBaseSwicth &rArr; CheckDelayMode &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDelayMode
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleModeSwitch
</UL>

<P><STRONG><a name="[27b]"></a>IsNoticeCondition</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.IsNoticeCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = IsNoticeCondition &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNotice
</UL>

<P><STRONG><a name="[291]"></a>IsSleepCondition</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.IsSleepCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = IsSleepCondition &rArr; SetStartInitTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStartInitTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[293]"></a>IsStatic</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, cwm_sedentary_activity.o(i.IsStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = IsStatic &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[294]"></a>IsWakeCondition</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, cwm_sedentary_activity.o(i.IsWakeCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = IsWakeCondition &rArr; SetStopInitTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStopInitTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[26b]"></a>OutputAwakeSleepTime</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, cwm_sedentary_activity.o(i.OutputAwakeSleepTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = OutputAwakeSleepTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStatusTime
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGapTime
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleBackToSleep
</UL>

<P><STRONG><a name="[2a4]"></a>OutputEndNoticeEvent</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.OutputEndNoticeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = OutputEndNoticeEvent &rArr; OutputStopSleepTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStopSleepTime
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_set_ap_status
</UL>

<P><STRONG><a name="[2a5]"></a>OutputOperationTime</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.OutputOperationTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = OutputOperationTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStatusTime
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGapTime
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_set_ap_status
</UL>

<P><STRONG><a name="[27c]"></a>OutputStartSleepTime</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, cwm_sedentary_activity.o(i.OutputStartSleepTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = OutputStartSleepTime &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutputTime
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOutputBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSleepStop
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNotice
</UL>

<P><STRONG><a name="[274]"></a>OutputStatusTime</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, cwm_sedentary_activity.o(i.OutputStatusTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStopSleepTime
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputOperationTime
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputAwakeSleepTime
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLightDeepTime
</UL>

<P><STRONG><a name="[286]"></a>OutputStopSleepTime</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.OutputStopSleepTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = OutputStopSleepTime &rArr; OutputStatusTime &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStatusTime
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGapTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputEndNoticeEvent
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStopEvent
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSleepStop
</UL>

<P><STRONG><a name="[26f]"></a>ResetActScoreSleep</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.ResetActScoreSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ResetActScoreSleep &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenSystemEvent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleFakesleep
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_reset_sleep
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_reset_nap
</UL>

<P><STRONG><a name="[2ca]"></a>ResetSedenAct</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.ResetSedenAct))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ResetSedenAct &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isZeroFlt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedentary
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[282]"></a>ResetSedentary</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cwm_sedentary_activity.o(i.ResetSedentary))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ResetSedentary &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSedenAct
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStand
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenSystemEvent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSedenActReportFlow
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_reset_sedentary
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_release_reminder
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[2cb]"></a>ResetStand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cwm_sedentary_activity.o(i.ResetStand))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ResetStand &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity_reset_stand
</UL>

<P><STRONG><a name="[275]"></a>SaveSleepOutput</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cwm_sedentary_activity.o(i.SaveSleepOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutputTime
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOutputBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StageREMbyHeartRate
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStopSleepTime
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStatusTime
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputOperationTime
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputEndNoticeEvent
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputAwakeSleepTime
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStopEvent
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSleepStop
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSleepStatus
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleNapStop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLightDeepTime
</UL>

<P><STRONG><a name="[2a6]"></a>SaveSleepOutputTime</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, cwm_sedentary_activity.o(i.SaveSleepOutputTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhTime2timedate
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputStartSleepTime
</UL>

<P><STRONG><a name="[2da]"></a>SedenActDebugLogs</STRONG> (Thumb, 268 bytes, Stack size 168 bytes, cwm_sedentary_activity.o(i.SedenActDebugLogs))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = SedenActDebugLogs &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[292]"></a>SetStartInitTime</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cwm_sedentary_activity.o(i.SetStartInitTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SetStartInitTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStartSleepInitTime
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSleepCondition
</UL>

<P><STRONG><a name="[273]"></a>SetStatusProportion</STRONG> (Thumb, 210 bytes, Stack size 144 bytes, cwm_sedentary_activity.o(i.SetStatusProportion))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = SetStatusProportion &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLightDeepTime
</UL>

<P><STRONG><a name="[295]"></a>SetStopInitTime</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cwm_sedentary_activity.o(i.SetStopInitTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SetStopInitTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWakeCondition
</UL>

<P><STRONG><a name="[285]"></a>StageREMbyHeartRate</STRONG> (Thumb, 614 bytes, Stack size 64 bytes, cwm_sedentary_activity.o(i.StageREMbyHeartRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = StageREMbyHeartRate &rArr; SaveSleepOutput &rArr; SaveSleepOutputTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSleepOutput
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGapTime
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSleepStatus
</UL>

<P><STRONG><a name="[2de]"></a>SyncLowActivityToScore</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, cwm_sedentary_activity.o(i.SyncLowActivityToScore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SyncLowActivityToScore
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[2e9]"></a>UpdateStartSleepInitTime</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, cwm_sedentary_activity.o(i.UpdateStartSleepInitTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = UpdateStartSleepInitTime &rArr; SetStartInitTime &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algo_log
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStartInitTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sedentary_activity
</UL>

<P><STRONG><a name="[3e9]"></a>basic_statistic_info_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cwm_biking.o(i.basic_statistic_info_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
</UL>

<P><STRONG><a name="[394]"></a>biking_acc_stability</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, cwm_biking.o(i.biking_acc_stability))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = biking_acc_stability &rArr; cwm_get_statics_std_float &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_mean_variance_float
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_statics_data_update_float
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_get_statics_std_float
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stability_event_update
</UL>

<P><STRONG><a name="[399]"></a>biking_temp_update</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, cwm_biking.o(i.biking_temp_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = biking_temp_update &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
</UL>

<P><STRONG><a name="[3b3]"></a>check_biking_input</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cwm_biking.o(i.check_biking_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = check_biking_input &rArr; check_biking_input_setting &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_biking_input_setting
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
</UL>

<P><STRONG><a name="[3b4]"></a>check_biking_input_setting</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, cwm_biking.o(i.check_biking_input_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_biking_input_setting &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_biking_input
</UL>

<P><STRONG><a name="[3c3]"></a>clone_biking_output</STRONG> (Thumb, 518 bytes, Stack size 40 bytes, cwm_biking.o(i.clone_biking_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = clone_biking_output &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_calAvgMaxMin
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
</UL>

<P><STRONG><a name="[43f]"></a>gps_speed_stability</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cwm_biking.o(i.gps_speed_stability))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gps_speed_stability &rArr; code_update
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stability_event_update
</UL>

<P><STRONG><a name="[3ed]"></a>mem_elevation_output_update</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, cwm_biking.o(i.mem_elevation_output_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_elevation_output_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
</UL>

<P><STRONG><a name="[3ec]"></a>mem_gps_output_update</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, cwm_biking.o(i.mem_gps_output_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mem_gps_output_update &rArr; cwm_rolling_statistic_info_update &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_calAvgMaxMin
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_reset
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_info_update
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
</UL>

<P><STRONG><a name="[3ef]"></a>mem_metabolism_output_update</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, cwm_biking.o(i.mem_metabolism_output_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_metabolism_output_update
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_calAvgMaxMin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
</UL>

<P><STRONG><a name="[3ee]"></a>metabolism_event_update</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, cwm_biking.o(i.metabolism_event_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = metabolism_event_update &rArr; cwm_metabolism &rArr; MetabolismInputCheck &rArr; algo_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_abs
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed2biking_mets_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_metabolism
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
</UL>

<P><STRONG><a name="[48d]"></a>speed2biking_mets_code</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, cwm_biking.o(i.speed2biking_mets_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = speed2biking_mets_code
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metabolism_event_update
</UL>

<P><STRONG><a name="[3eb]"></a>stability_event_update</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, cwm_biking.o(i.stability_event_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stability_event_update &rArr; biking_acc_stability &rArr; cwm_get_statics_std_float &rArr; cwm_sqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_speed_stability
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;biking_acc_stability
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_biking
</UL>

<P><STRONG><a name="[3b5]"></a>check_elevation_estimation_input</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, cwm_elevation_estimation.o(i.check_elevation_estimation_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = check_elevation_estimation_input &rArr; check_sensor_inputs &rArr; input_data_valid_check
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_data_valid_check
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sensor_inputs
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_elevation_estimation
</UL>

<P><STRONG><a name="[3b7]"></a>check_sensor_inputs</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, cwm_elevation_estimation.o(i.check_sensor_inputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = check_sensor_inputs &rArr; input_data_valid_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_data_valid_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_elevation_estimation_input
</UL>

<P><STRONG><a name="[3f4]"></a>clone_elevation_estimation_output</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, cwm_elevation_estimation.o(i.clone_elevation_estimation_output))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_elevation_estimation
</UL>

<P><STRONG><a name="[3f6]"></a>elevation_estimation_update</STRONG> (Thumb, 228 bytes, Stack size 128 bytes, cwm_elevation_estimation.o(i.elevation_estimation_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = elevation_estimation_update &rArr; elevation_update &rArr; slope_angle_update &rArr; cwm_atan2 &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_update
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_data_valid_check
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_update
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_elevation_estimation
</UL>

<P><STRONG><a name="[423]"></a>elevation_update</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, cwm_elevation_estimation.o(i.elevation_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = elevation_update &rArr; slope_angle_update &rArr; cwm_atan2 &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_sqrt
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cwm_mean_variance_float
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_statics_data_update_float
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_rolling_statistic_info_update
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_xlnSmall
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slope_update
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slope_angle_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_estimation_update
</UL>

<P><STRONG><a name="[424]"></a>slope_angle_update</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, cwm_elevation_estimation.o(i.slope_angle_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = slope_angle_update &rArr; cwm_atan2 &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_atan2
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_update
</UL>

<P><STRONG><a name="[425]"></a>slope_update</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, cwm_elevation_estimation.o(i.slope_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slope_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elevation_update
</UL>

<P><STRONG><a name="[1c4]"></a>AccumuLongTermActType</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, cwm_activity_alert.o(i.AccumuLongTermActType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AccumuLongTermActType
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertVoting
</UL>

<P><STRONG><a name="[1c3]"></a>ActivityAlertVoting</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, cwm_activity_alert.o(i.ActivityAlertVoting))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ActivityAlertVoting &rArr; DecideHandType &rArr; GetMaxValueIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxValueIndex
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecideHandType
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccumuLongTermActType
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert
</UL>

<P><STRONG><a name="[1ca]"></a>AlertCheckEvent</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, cwm_activity_alert.o(i.AlertCheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AlertCheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_inRange
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert
</UL>

<P><STRONG><a name="[1c6]"></a>DecideHandType</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, cwm_activity_alert.o(i.DecideHandType))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DecideHandType &rArr; GetMaxValueIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxValueIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertVoting
</UL>

<P><STRONG><a name="[1c5]"></a>GetMaxValueIndex</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, cwm_activity_alert.o(i.GetMaxValueIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetMaxValueIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecideHandType
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityAlertVoting
</UL>

<P><STRONG><a name="[3dd]"></a>GetRideInterval</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, cwm_activity_alert.o(i.GetRideInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetRideInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwm_activity_alert
</UL>

<P><STRONG><a name="[308]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2f4]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[30d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[30c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5d]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[5e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
